{"version":3,"sources":["../src/view/create-component-loader.js","../src/util/guid.js","../src/util/empty.js","../src/util/extend.js","../src/util/inherits.js","../src/util/each.js","../src/util/bind.js","../src/browser/on.js","../src/browser/un.js","../src/util/split-str-2-obj.js","../src/browser/svg-tags.js","../src/browser/create-el.js","../src/browser/remove-el.js","../src/util/next-tick.js","../src/browser/ie.js","../src/browser/ie-old-than-9.js","../src/browser/trigger.js","../src/browser/input-event-compatible.js","../src/browser/auto-close-tags.js","../src/util/data-types.js","../src/parser/walker.js","../src/util/kebab2camel.js","../src/browser/bool-attrs.js","../src/parser/create-accessor.js","../src/parser/read-unary-expr.js","../src/parser/read-string.js","../src/parser/read-number.js","../src/parser/read-parenthesized-expr.js","../src/parser/read-ident.js","../src/parser/read-tertiary-expr.js","../src/parser/read-logical-or-expr.js","../src/parser/read-logical-and-expr.js","../src/parser/read-equality-expr.js","../src/parser/read-accessor.js","../src/parser/read-call.js","../src/parser/read-multiplicative-expr.js","../src/parser/read-additive-expr.js","../src/parser/read-relational-expr.js","../src/parser/parse-expr.js","../src/parser/parse-call.js","../src/parser/parse-interp.js","../src/util/decode-html-entity.js","../src/parser/parse-text.js","../src/parser/parse-directive.js","../src/parser/integrate-attr.js","../src/parser/parse-template.js","../src/runtime/default-filters.js","../src/runtime/eval-expr.js","../src/runtime/eval-args.js","../src/runtime/change-expr-compare.js","../src/view/life-cycle.js","../src/view/get-a-node-prop.js","../src/view/get-prop-handler.js","../src/util/contains.js","../src/view/is-data-change-by-element.js","../src/runtime/find-method.js","../src/runtime/data.js","../src/view/get-event-listener.js","../src/runtime/changes-is-in-data-ref.js","../src/browser/insert-before.js","../src/view/base-props.js","../src/view/dom-children-walker.js","../src/view/element.js","../src/view/node-own-create-stump.js","../src/view/element-dispose-children.js","../src/view/node-own-simple-dispose.js","../src/view/async-component.js","../src/view/create-reverse-node.js","../src/view/reverse-element-children.js","../src/view/create-node.js","../src/view/element-get-transition.js","../src/view/element-own-detach.js","../src/view/element-own-dispose.js","../src/view/element-own-on-el.js","../src/browser/is-browser.js","../src/util/emit-devtool.js","../src/util/warn.js","../src/view/warn-event-listen-method.js","../src/view/element-own-attached.js","../src/view/node-s-bind-init.js","../src/util/union-keys.js","../src/view/node-s-bind-update.js","../src/view/warn-set-html.js","../src/browser/no-set-html.js","../src/view/get-node-path.js","../src/parser/unpack-anode.js","../src/view/component.js","../src/util/create-data-types-checker.js","../src/view/define-component.js","../src/view/component-loader.js","../src/view/parse-component-template.js","../src/browser/hot-tags.js","../src/view/text-node.js","../src/view/is-end-stump.js","../src/view/node-own-only-children-attach.js","../src/view/slot-node.js","../src/view/for-node.js","../src/view/if-node.js","../src/view/is-node.js","../src/view/template-node.js","../src/view/preheat-a-node.js","../src/parser/expr-type.js","../src/view/node-type.js","src/index.js"],"names":["App","san","defineComponent","initData","fontSize","text","translate","computed","textGroup","data","get","split","onTextCompositionstart","e","flag","onTextCompositionend","target","value","replace","set","onTextInput","onTextKeydown","test","key","preventDefault","template","app","attach","document","body"],"mappings":"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","file":"src.70694e96.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建组件Loader\n */\n\nvar ComponentLoader = require('./component-loader');\n\n/**\n * 创建组件Loader\n *\n * @param {Object|Function} options 创建组件Loader的参数。为Object时参考下方描述，为Function时代表load方法。\n * @param {Function} options.load load方法\n * @param {Function=} options.placeholder loading过程中渲染的占位组件\n * @param {Function=} options.fallback load失败时渲染的组件\n * @return {ComponentLoader}\n */\nfunction createComponentLoader(options) {\n    var placeholder = options.placeholder;\n    var fallback = options.fallback;\n    var load = typeof options === 'function' ? options : options.load;\n\n    return new ComponentLoader(load, placeholder, fallback);\n}\n\nexports = module.exports = createComponentLoader;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 唯一id\n */\n\n\n/**\n * 获取唯一id\n *\n * @type {number} 唯一id\n */\nvar guid = 1;\n\nexports = module.exports = guid;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 空函数\n */\n\n\n/**\n * 啥都不干\n */\nfunction empty() {}\n\nexports = module.exports = empty;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 属性拷贝\n */\n\n/**\n * 对象属性拷贝\n *\n * @param {Object} target 目标对象\n * @param {Object} source 源对象\n * @return {Object} 返回目标对象\n */\nfunction extend(target, source) {\n    for (var key in source) {\n        /* istanbul ignore else  */\n        if (source.hasOwnProperty(key)) {\n            var value = source[key];\n            if (typeof value !== 'undefined') {\n                target[key] = value;\n            }\n        }\n    }\n\n    return target;\n}\n\nexports = module.exports = extend;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 构建类之间的继承关系\n */\n\nvar extend = require('./extend');\n\n/**\n * 构建类之间的继承关系\n *\n * @param {Function} subClass 子类函数\n * @param {Function} superClass 父类函数\n */\nfunction inherits(subClass, superClass) {\n    /* jshint -W054 */\n    var subClassProto = subClass.prototype;\n    var F = new Function();\n    F.prototype = superClass.prototype;\n    subClass.prototype = new F();\n    subClass.prototype.constructor = subClass;\n    extend(subClass.prototype, subClassProto);\n    /* jshint +W054 */\n}\n\nexports = module.exports = inherits;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 遍历数组\n */\n\n\n/**\n * 遍历数组集合\n *\n * @param {Array} array 数组源\n * @param {function(Any,number):boolean} iterator 遍历函数\n */\nfunction each(array, iterator) {\n    if (array && array.length > 0) {\n        for (var i = 0, l = array.length; i < l; i++) {\n            if (iterator(array[i], i) === false) {\n                break;\n            }\n        }\n    }\n}\n\nexports = module.exports = each;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file bind函数\n */\n\n/**\n * Function.prototype.bind 方法的兼容性封装\n *\n * @param {Function} func 要bind的函数\n * @param {Object} thisArg this指向对象\n * @param {...*} args 预设的初始参数\n * @return {Function}\n */\nfunction bind(func, thisArg) {\n    var nativeBind = Function.prototype.bind;\n    var slice = Array.prototype.slice;\n    // #[begin] allua\n    if (nativeBind && func.bind === nativeBind) {\n    // #[end]\n        return nativeBind.apply(func, slice.call(arguments, 1));\n    // #[begin] allua\n    }\n\n    /* istanbul ignore next */\n    var args = slice.call(arguments, 2);\n    /* istanbul ignore next */\n    return function () {\n        return func.apply(thisArg, args.concat(slice.call(arguments)));\n    };\n    // #[end]\n}\n\nexports = module.exports = bind;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file DOM 事件挂载\n */\n\n/**\n * DOM 事件挂载\n *\n * @inner\n * @param {HTMLElement} el DOM元素\n * @param {string} eventName 事件名\n * @param {Function} listener 监听函数\n * @param {boolean} capture 是否是捕获阶段\n */\nfunction on(el, eventName, listener, capture) {\n    // #[begin] allua\n    /* istanbul ignore else */\n    if (el.addEventListener) {\n    // #[end]\n        el.addEventListener(eventName, listener, capture);\n    // #[begin] allua\n    }\n    else {\n        el.attachEvent('on' + eventName, listener);\n    }\n    // #[end]\n}\n\nexports = module.exports = on;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file DOM 事件卸载\n */\n\n/**\n * DOM 事件卸载\n *\n * @inner\n * @param {HTMLElement} el DOM元素\n * @param {string} eventName 事件名\n * @param {Function} listener 监听函数\n * @param {boolean} capture 是否是捕获阶段\n */\nfunction un(el, eventName, listener, capture) {\n    // #[begin] allua\n    /* istanbul ignore else */\n    if (el.addEventListener) {\n    // #[end]\n        el.removeEventListener(eventName, listener, capture);\n    // #[begin] allua\n    }\n    else {\n        el.detachEvent('on' + eventName, listener);\n    }\n    // #[end]\n}\n\nexports = module.exports = un;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 将字符串逗号切分返回对象\n */\n\nvar each = require('../util/each');\n\n/**\n * 将字符串逗号切分返回对象\n *\n * @param {string} source 源字符串\n * @return {Object}\n */\nfunction splitStr2Obj(source) {\n    var result = {};\n    each(\n        source.split(','),\n        function (key) {\n            result[key] = key;\n        }\n    );\n    return result;\n}\n\nexports = module.exports = splitStr2Obj;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file SVG标签表\n */\n\nvar splitStr2Obj = require('../util/split-str-2-obj');\n\n/**\n * svgTags\n *\n * @see https://www.w3.org/TR/SVG/svgdtd.html 只取常用\n * @type {Object}\n */\nvar svgTags = splitStr2Obj(''\n    // structure\n    + 'svg,g,defs,desc,metadata,symbol,use,'\n    // image & shape\n    + 'image,path,rect,circle,line,ellipse,polyline,polygon,'\n    // text\n    + 'text,tspan,tref,textpath,'\n    // other\n    + 'marker,pattern,clippath,mask,filter,cursor,view,animate,'\n    // font\n    + 'font,font-face,glyph,missing-glyph,'\n    // camel\n    + 'animateColor,animateMotion,animateTransform,textPath,foreignObject'\n);\n\nexports = module.exports = svgTags;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file DOM创建\n */\n\nvar svgTags = require('./svg-tags');\n\n/**\n * 创建 DOM 元素\n *\n * @param  {string} tagName tagName\n * @return {HTMLElement}\n */\nfunction createEl(tagName) {\n    if (svgTags[tagName] && document.createElementNS) {\n        return document.createElementNS('http://www.w3.org/2000/svg', tagName);\n    }\n\n    return document.createElement(tagName);\n}\n\nexports = module.exports = createEl;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 移除DOM\n */\n\n/**\n * 将 DOM 从页面中移除\n *\n * @param {HTMLElement} el DOM元素\n */\nfunction removeEl(el) {\n    if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n    }\n}\n\nexports = module.exports = removeEl;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 在下一个时间周期运行任务\n */\n\n// 该方法参照了vue2.5.0的实现，感谢vue团队\n// SEE: https://github.com/vuejs/vue/blob/0948d999f2fddf9f90991956493f976273c5da1f/src/core/util/env.js#L68\n\n\nvar bind = require('./bind');\n\n/**\n * 下一个周期要执行的任务列表\n *\n * @inner\n * @type {Array}\n */\nvar nextTasks = [];\n\n/**\n * 执行下一个周期任务的函数\n *\n * @inner\n * @type {Function}\n */\nvar nextHandler;\n\n/**\n * 浏览器是否支持原生Promise\n * 对Promise做判断，是为了禁用一些不严谨的Promise的polyfill\n *\n * @inner\n * @type {boolean}\n */\nvar isNativePromise = typeof Promise === 'function' && /native code/.test(Promise);\n\n/**\n * 在下一个时间周期运行任务\n *\n * @inner\n * @param {Function} fn 要运行的任务函数\n * @param {Object=} thisArg this指向对象\n */\nfunction nextTick(fn, thisArg) {\n    if (thisArg) {\n        fn = bind(fn, thisArg);\n    }\n    nextTasks.push(fn);\n\n    if (nextHandler) {\n        return;\n    }\n\n    nextHandler = function () {\n        var tasks = nextTasks.slice(0);\n        nextTasks = [];\n        nextHandler = null;\n\n        for (var i = 0, l = tasks.length; i < l; i++) {\n            tasks[i]();\n        }\n    };\n\n    // 非标准方法，但是此方法非常吻合要求。\n    /* istanbul ignore next */\n    if (typeof setImmediate === 'function') {\n        setImmediate(nextHandler);\n    }\n    // 用MessageChannel去做setImmediate的polyfill\n    // 原理是将新的message事件加入到原有的dom events之后\n    else if (typeof MessageChannel === 'function') {\n        var channel = new MessageChannel();\n        var port = channel.port2;\n        channel.port1.onmessage = nextHandler;\n        port.postMessage(1);\n    }\n    // for native app\n    else if (isNativePromise) {\n        Promise.resolve().then(nextHandler);\n    }\n    else {\n        setTimeout(nextHandler, 0);\n    }\n}\n\nexports = module.exports = nextTick;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file ie版本号\n */\n\n// #[begin] allua\n/**\n * 从userAgent中ie版本号的匹配信息\n *\n * @type {Array}\n */\nvar ieVersionMatch = typeof navigator !== 'undefined'\n    && navigator.userAgent.match(/(msie|trident)(\\s*|\\/)([0-9]+)/i);\n\n/**\n * ie版本号，非ie时为0\n *\n * @type {number}\n */\nvar ie = ieVersionMatch ? /* istanbul ignore next */ ieVersionMatch[3] - 0 : 0;\nif (ie && !/msie/i.test(ieVersionMatch[1])) {\n    ie += 4;\n}\n// #[end]\n\nexports = module.exports = ie;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 是否 IE 并且小于 9\n */\n\nvar ie = require('./ie');\n\n// HACK:\n// 1. IE8下，设置innerHTML时如果以html comment开头，comment会被自动滤掉\n//    为了保证stump存在，需要设置完html后，createComment并appendChild/insertBefore\n// 2. IE8下，innerHTML还不支持custom element，所以需要用div替代，不用createElement\n// 3. 虽然IE8已经优化了字符串+连接，碎片化连接性能不再退化\n//    但是由于上面多个兼容场景都用 < 9 判断，所以字符串连接也沿用\n//    所以结果是IE8下字符串连接用的是数组join的方式\n\n// #[begin] allua\n/**\n * 是否 IE 并且小于 9\n */\nvar ieOldThan9 = ie && /* istanbul ignore next */ ie < 9;\n// #[end]\n\nexports = module.exports = ieOldThan9;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 触发元素事件\n */\n\n/**\n * 触发元素事件\n *\n * @inner\n * @param {HTMLElement} el DOM元素\n * @param {string} eventName 事件名\n */\nfunction trigger(el, eventName) {\n    var event = document.createEvent('HTMLEvents');\n    event.initEvent(eventName, true, true);\n    el.dispatchEvent(event);\n}\n\nexports = module.exports = trigger;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解决 IE9 在表单元素中删除字符时不触发事件的问题\n */\n\nvar ie = require('./ie');\nvar on = require('./on');\nvar trigger = require('./trigger');\n\n// #[begin] allua\n/* istanbul ignore if */\nif (ie === 9) {\n    on(document, 'selectionchange', function () {\n        var el = document.activeElement;\n        if (el.tagName === 'TEXTAREA' || el.tagName === 'INPUT') {\n            trigger(el, 'input');\n        }\n    });\n}\n// #[end]\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 自闭合标签表\n */\n\nvar splitStr2Obj = require('../util/split-str-2-obj');\n\n/**\n * 自闭合标签列表\n *\n * @type {Object}\n */\nvar autoCloseTags = splitStr2Obj('area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr');\n\nexports = module.exports = autoCloseTags;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file data types\n */\n\nvar bind = require('./bind');\nvar empty = require('./empty');\nvar extend = require('./extend');\n\n// #[begin] error\nvar ANONYMOUS_CLASS_NAME = '<<anonymous>>';\n\n/**\n * 获取精确的类型\n *\n * @NOTE 如果 obj 是一个 DOMElement，我们会返回 `element`；\n *\n * @param  {*} obj 目标\n * @return {string}\n */\nfunction getDataType(obj) {\n    // 不支持element了。data应该是纯数据\n    // if (obj && obj.nodeType === 1) {\n    //     return 'element';\n    // }\n\n    return Object.prototype.toString\n        .call(obj)\n        .slice(8, -1)\n        .toLowerCase();\n}\n// #[end]\n\n/**\n * 创建链式的数据类型校验器\n *\n * @param  {Function} validate 真正的校验器\n * @return {Function}\n */\nfunction createChainableChecker(validate) {\n    /* istanbul ignore next */\n    var chainedChecker = function () {};\n    chainedChecker.isRequired = empty;\n\n    // 只在 error 功能启用时才有实际上的 dataTypes 检测\n    // #[begin] error\n    validate = validate || empty;\n    var checkType = function (isRequired, data, dataName, componentName, fullDataName) {\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        /* istanbul ignore next */\n        componentName = componentName || ANONYMOUS_CLASS_NAME;\n\n        // 如果是 null 或 undefined，那么要提前返回啦\n        if (dataValue == null) {\n            // 是 required 就报错\n            if (isRequired) {\n                throw new Error('[SAN ERROR] '\n                    + 'The `' + dataName + '` '\n                    + 'is marked as required in `' + componentName + '`, '\n                    + 'but its value is ' + dataType\n                );\n            }\n            // 不是 required，那就是 ok 的\n            return;\n        }\n\n        validate(data, dataName, componentName, fullDataName);\n\n    };\n\n    chainedChecker = bind(checkType, null, false);\n    chainedChecker.isRequired = bind(checkType, null, true);\n    // #[end]\n\n    return chainedChecker;\n\n}\n\n// #[begin] error\n/**\n * 生成主要类型数据校验器\n *\n * @param  {string} type 主类型\n * @return {Function}\n */\nfunction createPrimaryTypeChecker(type) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        if (dataType !== type) {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type'\n                + '(' + dataType + ' supplied to ' + componentName + ', '\n                + 'expected ' + type + ')'\n            );\n        }\n\n    });\n\n}\n\n\n\n/**\n * 生成 arrayOf 校验器\n *\n * @param  {Function} arrayItemChecker 数组中每项数据的校验器\n * @return {Function}\n */\nfunction createArrayOfChecker(arrayItemChecker) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (typeof arrayItemChecker !== 'function') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + dataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `arrayOf`, expected `function`'\n            );\n        }\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        if (dataType !== 'array') {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type'\n                + '(' + dataType + ' supplied to ' + componentName + ', '\n                + 'expected array)'\n            );\n        }\n\n        for (var i = 0, len = dataValue.length; i < len; i++) {\n            arrayItemChecker(dataValue, i, componentName, fullDataName + '[' + i + ']');\n        }\n\n    });\n\n}\n\n/**\n * 生成 instanceOf 检测器\n *\n * @param  {Function|Class} expectedClass 期待的类\n * @return {Function}\n */\nfunction createInstanceOfChecker(expectedClass) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        var dataValue = data[dataName];\n\n        if (dataValue instanceof expectedClass) {\n            return;\n        }\n\n        var dataValueClassName = dataValue.constructor && dataValue.constructor.name\n            ? dataValue.constructor.name\n            : /* istanbul ignore next */ ANONYMOUS_CLASS_NAME;\n\n        /* istanbul ignore next */\n        var expectedClassName = expectedClass.name || ANONYMOUS_CLASS_NAME;\n\n        throw new Error('[SAN ERROR] '\n            + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type'\n            + '(' + dataValueClassName + ' supplied to ' + componentName + ', '\n            + 'expected instance of ' + expectedClassName + ')'\n        );\n\n\n    });\n\n}\n\n/**\n * 生成 shape 校验器\n *\n * @param  {Object} shapeTypes shape 校验规则\n * @return {Function}\n */\nfunction createShapeChecker(shapeTypes) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (getDataType(shapeTypes) !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + fullDataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `shape`, expected `object`'\n            );\n        }\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        if (dataType !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type'\n                + '(' + dataType + ' supplied to ' + componentName + ', '\n                + 'expected object)'\n            );\n        }\n\n        for (var shapeKeyName in shapeTypes) {\n            /* istanbul ignore else  */\n            if (shapeTypes.hasOwnProperty(shapeKeyName)) {\n                var checker = shapeTypes[shapeKeyName];\n                if (typeof checker === 'function') {\n                    checker(dataValue, shapeKeyName, componentName, fullDataName + '.' + shapeKeyName);\n                }\n            }\n        }\n\n    });\n\n}\n\n/**\n * 生成 oneOf 校验器\n *\n * @param  {Array} expectedEnumValues 期待的枚举值\n * @return {Function}\n */\nfunction createOneOfChecker(expectedEnumValues) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (getDataType(expectedEnumValues) !== 'array') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + fullDataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `oneOf`, array is expected.'\n            );\n        }\n\n        var dataValue = data[dataName];\n\n        for (var i = 0, len = expectedEnumValues.length; i < len; i++) {\n            if (dataValue === expectedEnumValues[i]) {\n                return;\n            }\n        }\n\n        throw new Error('[SAN ERROR] '\n            + 'Invalid ' + componentName + ' data `' + fullDataName + '` of value'\n            + '(`' + dataValue + '` supplied to ' + componentName + ', '\n            + 'expected one of ' + expectedEnumValues.join(',') + ')'\n        );\n\n    });\n\n}\n\n/**\n * 生成 oneOfType 校验器\n *\n * @param  {Array<Function>} expectedEnumOfTypeValues 期待的枚举类型\n * @return {Function}\n */\nfunction createOneOfTypeChecker(expectedEnumOfTypeValues) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (getDataType(expectedEnumOfTypeValues) !== 'array') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + dataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `oneOf`, array is expected.'\n            );\n        }\n\n        var dataValue = data[dataName];\n\n        for (var i = 0, len = expectedEnumOfTypeValues.length; i < len; i++) {\n\n            var checker = expectedEnumOfTypeValues[i];\n\n            if (typeof checker !== 'function') {\n                continue;\n            }\n\n            try {\n                checker(data, dataName, componentName, fullDataName);\n                // 如果 checker 完成校验没报错，那就返回了\n                return;\n            }\n            catch (e) {\n                // 如果有错误，那么应该把错误吞掉\n            }\n\n        }\n\n        // 所有的可接受 type 都失败了，才丢一个异常\n        throw new Error('[SAN ERROR] '\n            + 'Invalid ' + componentName + ' data `' + dataName + '` of value'\n            + '(`' + dataValue + '` supplied to ' + componentName + ')'\n        );\n\n    });\n\n}\n\n/**\n * 生成 objectOf 校验器\n *\n * @param  {Function} typeChecker 对象属性值校验器\n * @return {Function}\n */\nfunction createObjectOfChecker(typeChecker) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n\n        if (typeof typeChecker !== 'function') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + dataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `objectOf`, expected function'\n            );\n        }\n\n        var dataValue = data[dataName];\n        var dataType = getDataType(dataValue);\n\n        if (dataType !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid ' + componentName + ' data `' + dataName + '` of type'\n                + '(' + dataType + ' supplied to ' + componentName + ', '\n                + 'expected object)'\n            );\n        }\n\n        for (var dataKeyName in dataValue) {\n            /* istanbul ignore else  */\n            if (dataValue.hasOwnProperty(dataKeyName)) {\n                typeChecker(\n                    dataValue,\n                    dataKeyName,\n                    componentName,\n                    fullDataName + '.' + dataKeyName\n                );\n            }\n        }\n\n\n    });\n\n}\n\n/**\n * 生成 exact 校验器\n *\n * @param  {Object} shapeTypes object 形态定义\n * @return {Function}\n */\nfunction createExactChecker(shapeTypes) {\n\n    return createChainableChecker(function (data, dataName, componentName, fullDataName, secret) {\n\n        if (getDataType(shapeTypes) !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + dataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `exact`'\n            );\n        }\n\n        var dataValue = data[dataName];\n        var dataValueType = getDataType(dataValue);\n\n        if (dataValueType !== 'object') {\n            throw new Error('[SAN ERROR] '\n                + 'Invalid data `' + fullDataName + '` of type `' + dataValueType + '`'\n                + '(supplied to ' + componentName + ', expected `object`)'\n            );\n        }\n\n        var allKeys = {};\n\n        // 先合入 shapeTypes\n        extend(allKeys, shapeTypes);\n        // 再合入 dataValue\n        extend(allKeys, dataValue);\n        // 保证 allKeys 的类型正确\n\n        for (var key in allKeys) {\n            /* istanbul ignore else  */\n            if (allKeys.hasOwnProperty(key)) {\n                var checker = shapeTypes[key];\n\n                // dataValue 中有一个多余的数据项\n                if (!checker) {\n                    throw new Error('[SAN ERROR] '\n                        + 'Invalid data `' + fullDataName + '` key `' + key + '` '\n                        + 'supplied to `' + componentName + '`. '\n                        + '(`' + key + '` is not defined in `DataTypes.exact`)'\n                    );\n                }\n\n                if (!(key in dataValue)) {\n                    throw new Error('[SAN ERROR] '\n                        + 'Invalid data `' + fullDataName + '` key `' + key + '` '\n                        + 'supplied to `' + componentName + '`. '\n                        + '(`' + key + '` is marked `required` in `DataTypes.exact`)'\n                    );\n                }\n\n                checker(\n                    dataValue,\n                    key,\n                    componentName,\n                    fullDataName + '.' + key,\n                    secret\n                );\n\n            }\n        }\n\n    });\n\n}\n// #[end]\n\n\n\n/* eslint-disable fecs-valid-var-jsdoc */\nvar DataTypes = {\n    array: createChainableChecker(),\n    object: createChainableChecker(),\n    func: createChainableChecker(),\n    string: createChainableChecker(),\n    number: createChainableChecker(),\n    bool: createChainableChecker(),\n    symbol: createChainableChecker(),\n    any: createChainableChecker,\n    arrayOf: createChainableChecker,\n    instanceOf: createChainableChecker,\n    shape: createChainableChecker,\n    oneOf: createChainableChecker,\n    oneOfType: createChainableChecker,\n    objectOf: createChainableChecker,\n    exact: createChainableChecker\n};\n\n// #[begin] error\nDataTypes = {\n\n    any: createChainableChecker(),\n\n    // 类型检测\n    array: createPrimaryTypeChecker('array'),\n    object: createPrimaryTypeChecker('object'),\n    func: createPrimaryTypeChecker('function'),\n    string: createPrimaryTypeChecker('string'),\n    number: createPrimaryTypeChecker('number'),\n    bool: createPrimaryTypeChecker('boolean'),\n    symbol: createPrimaryTypeChecker('symbol'),\n\n    // 复合类型检测\n    arrayOf: createArrayOfChecker,\n    instanceOf: createInstanceOfChecker,\n    shape: createShapeChecker,\n    oneOf: createOneOfChecker,\n    oneOfType: createOneOfTypeChecker,\n    objectOf: createObjectOfChecker,\n    exact: createExactChecker\n\n};\n/* eslint-enable fecs-valid-var-jsdoc */\n// #[end]\n\n\nmodule.exports = DataTypes;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 字符串源码读取类\n */\n\n\n/**\n * 字符串源码读取类，用于模板字符串解析过程\n *\n * @class\n * @param {string} source 要读取的字符串\n */\nfunction Walker(source) {\n    this.source = source;\n    this.len = this.source.length;\n    this.index = 0;\n}\n\n/**\n * 获取当前字符码\n *\n * @return {number}\n */\nWalker.prototype.currentCode = function () {\n    return this.source.charCodeAt(this.index);\n};\n\n/**\n * 截取字符串片段\n *\n * @param {number} start 起始位置\n * @param {number} end 结束位置\n * @return {string}\n */\nWalker.prototype.cut = function (start, end) {\n    return this.source.slice(start, end);\n};\n\n/**\n * 向前读取字符\n *\n * @param {number} distance 读取字符数\n */\nWalker.prototype.go = function (distance) {\n    this.index += distance;\n};\n\n/**\n * 读取下一个字符，返回下一个字符的 code\n *\n * @return {number}\n */\nWalker.prototype.nextCode = function () {\n    this.go(1);\n    return this.currentCode();\n};\n\n/**\n * 获取相应位置字符的 code\n *\n * @param {number} index 字符位置\n * @return {number}\n */\nWalker.prototype.charCode = function (index) {\n    return this.source.charCodeAt(index);\n};\n\n/**\n * 向前读取字符，直到遇到指定字符再停止\n * 未指定字符时，当遇到第一个非空格、制表符的字符停止\n *\n * @param {number=} charCode 指定字符的code\n * @return {boolean} 当指定字符时，返回是否碰到指定的字符\n */\nWalker.prototype.goUntil = function (charCode) {\n    var code;\n    while (this.index < this.len && (code = this.currentCode())) {\n        switch (code) {\n            case 32: // 空格 space\n            case 9: // 制表符 tab\n            case 13: // \\r\n            case 10: // \\n\n                this.index++;\n                break;\n\n            default:\n                if (code === charCode) {\n                    this.index++;\n                    return 1;\n                }\n                return;\n        }\n    }\n};\n\n/**\n * 向前读取符合规则的字符片段，并返回规则匹配结果\n *\n * @param {RegExp} reg 字符片段的正则表达式\n * @param {boolean} isMatchStart 是否必须匹配当前位置\n * @return {Array?}\n */\nWalker.prototype.match = function (reg, isMatchStart) {\n    reg.lastIndex = this.index;\n\n    var match = reg.exec(this.source);\n    if (match && (!isMatchStart || this.index === match.index)) {\n        this.index = reg.lastIndex;\n        return match;\n    }\n};\n\nexports = module.exports = Walker;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 把 kebab case 字符串转换成 camel case\n */\n\n/**\n * 把 kebab case 字符串转换成 camel case\n *\n * @param {string} source 源字符串\n * @return {string}\n */\nfunction kebab2camel(source) {\n    return source.replace(/-+(.)/ig, function (match, alpha) {\n        return alpha.toUpperCase();\n    });\n}\n\nexports = module.exports = kebab2camel;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file bool属性表\n */\n\n\nvar splitStr2Obj = require('../util/split-str-2-obj');\n\n/**\n * bool属性表\n *\n * @type {Object}\n */\nvar boolAttrs = splitStr2Obj(\n    'allowpaymentrequest,async,autofocus,autoplay,'\n    + 'checked,controls,default,defer,disabled,formnovalidate,'\n    + 'hidden,ismap,itemscope,loop,multiple,muted,nomodule,novalidate,'\n    + 'open,readonly,required,reversed,selected,typemustmatch'\n);\n\nexports = module.exports = boolAttrs;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建访问表达式对象\n */\n\nvar ExprType = require('./expr-type');\n\n/**\n * 创建访问表达式对象\n *\n * @param {Array} paths 访问路径\n * @return {Object}\n */\nfunction createAccessor(paths) {\n    return {\n        type: ExprType.ACCESSOR,\n        paths: paths\n    };\n}\n\nexports = module.exports = createAccessor;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取一元表达式\n */\n\nvar ExprType = require('./expr-type');\nvar readString = require('./read-string');\nvar readNumber = require('./read-number');\nvar readCall = require('./read-call');\nvar readParenthesizedExpr = require('./read-parenthesized-expr');\nvar readTertiaryExpr = require('./read-tertiary-expr');\n\nfunction postUnaryExpr(expr, operator) {\n    switch (operator) {\n        case 33:\n            var value;\n            switch (expr.type) {\n                case ExprType.NUMBER:\n                case ExprType.STRING:\n                case ExprType.BOOL:\n                    value = !expr.value;\n                    break;\n                case ExprType.ARRAY:\n                case ExprType.OBJECT:\n                    value = false;\n                    break;\n                case ExprType.NULL:\n                    value = true;\n                    break;\n            }\n\n            if (value != null) {\n                return {\n                    type: ExprType.BOOL,\n                    value: value\n                };\n            }\n            break;\n\n        case 43:\n            switch (expr.type) {\n                case ExprType.NUMBER:\n                case ExprType.STRING:\n                case ExprType.BOOL:\n                    return {\n                        type: ExprType.NUMBER,\n                        value: +expr.value\n                    };\n            }\n            break;\n\n        case 45:\n            switch (expr.type) {\n                case ExprType.NUMBER:\n                case ExprType.STRING:\n                case ExprType.BOOL:\n                    return {\n                        type: ExprType.NUMBER,\n                        value: -expr.value\n                    };\n            }\n            break;\n    }\n\n    return {\n        type: ExprType.UNARY,\n        expr: expr,\n        operator: operator\n    };\n}\n\n/**\n * 读取一元表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readUnaryExpr(walker) {\n    walker.goUntil();\n\n    var currentCode = walker.currentCode();\n    switch (currentCode) {\n        case 33: // !\n        case 43: // +\n        case 45: // -\n            walker.go(1);\n            return postUnaryExpr(readUnaryExpr(walker), currentCode);\n\n        case 34: // \"\n        case 39: // '\n            return readString(walker);\n\n        case 48: // number\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n            return readNumber(walker);\n\n        case 40: // (\n            return readParenthesizedExpr(walker);\n\n        // array literal\n        case 91: // [\n            walker.go(1);\n            var arrItems = [];\n            while (!walker.goUntil(93)) { // ]\n                var item = {};\n                arrItems.push(item);\n\n                if (walker.currentCode() === 46 && walker.match(/\\.\\.\\.\\s*/g)) {\n                    item.spread = true;\n                }\n\n                item.expr = readTertiaryExpr(walker);\n                walker.goUntil(44); // ,\n            }\n\n            return {\n                type: ExprType.ARRAY,\n                items: arrItems\n            };\n\n        // object literal\n        case 123: // {\n            walker.go(1);\n            var objItems = [];\n\n            while (!walker.goUntil(125)) { // }\n                var item = {};\n                objItems.push(item);\n\n                if (walker.currentCode() === 46 && walker.match(/\\.\\.\\.\\s*/g)) {\n                    item.spread = true;\n                    item.expr = readTertiaryExpr(walker);\n                }\n                else {\n                    // #[begin] error\n                    var walkerIndexBeforeName = walker.index;\n                    // #[end]\n\n                    item.name = readUnaryExpr(walker);\n\n                    // #[begin] error\n                    if (item.name.type > 4) {\n                        throw new Error(\n                            '[SAN FATAL] unexpect object name: '\n                            + walker.cut(walkerIndexBeforeName, walker.index)\n                        );\n                    }\n                    // #[end]\n\n                    if (walker.goUntil(58)) { // :\n                        item.expr = readTertiaryExpr(walker);\n                    }\n                    else {\n                        item.expr = item.name;\n                    }\n\n                    if (item.name.type === ExprType.ACCESSOR) {\n                        item.name = item.name.paths[0];\n                    }\n                }\n\n                walker.goUntil(44); // ,\n            }\n\n            return {\n                type: ExprType.OBJECT,\n                items: objItems\n            };\n    }\n\n    return readCall(walker);\n}\n\nexports = module.exports = readUnaryExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取字符串\n */\n\n\nvar ExprType = require('./expr-type');\n\n/**\n * 读取字符串\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readString(walker) {\n    var startCode = walker.currentCode();\n    var startIndex = walker.index;\n    var charCode;\n\n    walkLoop: while ((charCode = walker.nextCode())) {\n        switch (charCode) {\n            case 92: // \\\n                walker.go(1);\n                break;\n            case startCode:\n                walker.go(1);\n                break walkLoop;\n        }\n    }\n\n    var literal = walker.cut(startIndex, walker.index);\n    return {\n        type: ExprType.STRING,\n        // 处理字符转义\n        value: (new Function('return ' + literal))()\n    };\n}\n\nexports = module.exports = readString;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取数字\n */\n\n\nvar ExprType = require('./expr-type');\nvar readUnaryExpr = require('./read-unary-expr');\n\n/**\n * 读取数字\n *\n * @inner\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readNumber(walker) {\n    var match = walker.match(/\\s*([0-9]+(\\.[0-9]+)?)/g, 1);\n\n    if (match) {\n        return {\n            type: ExprType.NUMBER,\n            value: +match[1]\n        };\n    }\n}\n\nexports = module.exports = readNumber;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取括号表达式\n */\n\nvar readTertiaryExpr = require('./read-tertiary-expr');\n\n/**\n * 读取括号表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readParenthesizedExpr(walker) {\n    walker.go(1);\n    var expr = readTertiaryExpr(walker);\n    walker.goUntil(41); // )\n\n    expr.parenthesized = true;\n    return expr;\n}\n\nexports = module.exports = readParenthesizedExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取ident\n */\n\n/**\n * 读取ident\n * 这里的 ident 指标识符(identifier)，也就是通常意义上的变量名\n * 这里默认的变量名规则为：由美元符号($)、数字、字母或者下划线(_)构成的字符串\n *\n * @inner\n * @param {Walker} walker 源码读取对象\n * @return {string}\n */\nfunction readIdent(walker) {\n    var match = walker.match(/\\s*([\\$0-9a-z_]+)/ig, 1);\n\n    // #[begin] error\n    if (!match) {\n        throw new Error('[SAN FATAL] expect an ident: ' + walker.cut(walker.index));\n    }\n    // #[end]\n\n    return match[1];\n}\n\nexports = module.exports = readIdent;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取三元表达式\n */\n\nvar ExprType = require('./expr-type');\nvar readLogicalORExpr = require('./read-logical-or-expr');\n\n/**\n * 读取三元表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readTertiaryExpr(walker) {\n    var conditional = readLogicalORExpr(walker);\n    walker.goUntil();\n\n    if (walker.currentCode() === 63) { // ?\n        walker.go(1);\n        var yesExpr = readTertiaryExpr(walker);\n        walker.goUntil();\n\n        if (walker.currentCode() === 58) { // :\n            walker.go(1);\n            return {\n                type: ExprType.TERTIARY,\n                segs: [\n                    conditional,\n                    yesExpr,\n                    readTertiaryExpr(walker)\n                ]\n            };\n        }\n    }\n\n    return conditional;\n}\n\nexports = module.exports = readTertiaryExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取逻辑或表达式\n */\n\nvar ExprType = require('./expr-type');\nvar readLogicalANDExpr = require('./read-logical-and-expr');\n\n/**\n * 读取逻辑或表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readLogicalORExpr(walker) {\n    var expr = readLogicalANDExpr(walker);\n    walker.goUntil();\n\n    if (walker.currentCode() === 124) { // |\n        if (walker.nextCode() === 124) {\n            walker.go(1);\n            return {\n                type: ExprType.BINARY,\n                operator: 248,\n                segs: [expr, readLogicalORExpr(walker)]\n            };\n        }\n\n        walker.go(-1);\n    }\n\n    return expr;\n}\n\nexports = module.exports = readLogicalORExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取逻辑与表达式\n */\n\nvar ExprType = require('./expr-type');\nvar readEqualityExpr = require('./read-equality-expr');\n\n/**\n * 读取逻辑与表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readLogicalANDExpr(walker) {\n    var expr = readEqualityExpr(walker);\n    walker.goUntil();\n\n    if (walker.currentCode() === 38) { // &\n        if (walker.nextCode() === 38) {\n            walker.go(1);\n            return {\n                type: ExprType.BINARY,\n                operator: 76,\n                segs: [expr, readLogicalANDExpr(walker)]\n            };\n        }\n\n        walker.go(-1);\n    }\n\n    return expr;\n}\n\nexports = module.exports = readLogicalANDExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取相等比对表达式\n */\n\nvar ExprType = require('./expr-type');\nvar readRelationalExpr = require('./read-relational-expr');\n\n/**\n * 读取相等比对表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readEqualityExpr(walker) {\n    var expr = readRelationalExpr(walker);\n    walker.goUntil();\n\n    var code = walker.currentCode();\n    switch (code) {\n        case 61: // =\n        case 33: // !\n            if (walker.nextCode() === 61) {\n                code += 61;\n                if (walker.nextCode() === 61) {\n                    code += 61;\n                    walker.go(1);\n                }\n\n                return {\n                    type: ExprType.BINARY,\n                    operator: code,\n                    segs: [expr, readRelationalExpr(walker)]\n                };\n            }\n\n            walker.go(-1);\n    }\n\n    return expr;\n}\n\nexports = module.exports = readEqualityExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取访问表达式\n */\n\nvar ExprType = require('./expr-type');\nvar createAccessor = require('./create-accessor');\nvar readIdent = require('./read-ident');\nvar readTertiaryExpr = require('./read-tertiary-expr');\n\n/**\n * 读取访问表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readAccessor(walker) {\n    var firstSeg = readIdent(walker);\n    switch (firstSeg) {\n        case 'true':\n        case 'false':\n            return {\n                type: ExprType.BOOL,\n                value: firstSeg === 'true'\n            };\n        case 'null':\n            return {\n                type: ExprType.NULL\n            };\n    }\n\n    var result = createAccessor([\n        {\n            type: ExprType.STRING,\n            value: firstSeg\n        }\n    ]);\n\n    /* eslint-disable no-constant-condition */\n    accessorLoop: while (1) {\n    /* eslint-enable no-constant-condition */\n\n        switch (walker.currentCode()) {\n            case 46: // .\n                walker.go(1);\n\n                // ident as string\n                result.paths.push({\n                    type: ExprType.STRING,\n                    value: readIdent(walker)\n                });\n                break;\n\n            case 91: // [\n                walker.go(1);\n                result.paths.push(readTertiaryExpr(walker));\n                walker.goUntil(93); // ]\n                break;\n\n            default:\n                break accessorLoop;\n        }\n    }\n\n    return result;\n}\n\nexports = module.exports = readAccessor;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取调用\n */\n\nvar ExprType = require('./expr-type');\nvar readAccessor = require('./read-accessor');\nvar readTertiaryExpr = require('./read-tertiary-expr');\n\n/**\n * 读取调用\n *\n * @param {Walker} walker 源码读取对象\n * @param {Array=} defaultArgs 默认参数\n * @return {Object}\n */\nfunction readCall(walker, defaultArgs) {\n    walker.goUntil();\n    var result = readAccessor(walker);\n\n    var args;\n    if (walker.goUntil(40)) { // (\n        args = [];\n\n        while (!walker.goUntil(41)) { // )\n            args.push(readTertiaryExpr(walker));\n            walker.goUntil(44); // ,\n        }\n    }\n    else if (defaultArgs) {\n        args = defaultArgs;\n    }\n\n    if (args) {\n        result = {\n            type: ExprType.CALL,\n            name: result,\n            args: args\n        };\n    }\n\n    return result;\n}\n\nexports = module.exports = readCall;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取乘法表达式\n */\n\nvar ExprType = require('./expr-type');\nvar readUnaryExpr = require('./read-unary-expr');\n\n/**\n * 读取乘法表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readMultiplicativeExpr(walker) {\n    var expr = readUnaryExpr(walker);\n\n    while (1) {\n        walker.goUntil();\n\n        var code = walker.currentCode();\n        switch (code) {\n            case 37: // %\n            case 42: // *\n            case 47: // /\n                walker.go(1);\n                expr = {\n                    type: ExprType.BINARY,\n                    operator: code,\n                    segs: [expr, readUnaryExpr(walker)]\n                };\n                continue;\n        }\n\n        break;\n    }\n\n\n    return expr;\n}\n\nexports = module.exports = readMultiplicativeExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取加法表达式\n */\n\nvar ExprType = require('./expr-type');\nvar readMultiplicativeExpr = require('./read-multiplicative-expr');\n\n\n/**\n * 读取加法表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readAdditiveExpr(walker) {\n    var expr = readMultiplicativeExpr(walker);\n\n    while (1) {\n        walker.goUntil();\n        var code = walker.currentCode();\n\n        switch (code) {\n            case 43: // +\n            case 45: // -\n                walker.go(1);\n                expr = {\n                    type: ExprType.BINARY,\n                    operator: code,\n                    segs: [expr, readMultiplicativeExpr(walker)]\n                };\n                continue;\n        }\n\n        break;\n    }\n\n    return expr;\n}\n\nexports = module.exports = readAdditiveExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 读取关系判断表达式\n */\n\nvar ExprType = require('./expr-type');\nvar readAdditiveExpr = require('./read-additive-expr');\n\n/**\n * 读取关系判断表达式\n *\n * @param {Walker} walker 源码读取对象\n * @return {Object}\n */\nfunction readRelationalExpr(walker) {\n    var expr = readAdditiveExpr(walker);\n    walker.goUntil();\n\n    var code = walker.currentCode();\n    switch (code) {\n        case 60: // <\n        case 62: // >\n            if (walker.nextCode() === 61) {\n                code += 61;\n                walker.go(1);\n            }\n\n            return {\n                type: ExprType.BINARY,\n                operator: code,\n                segs: [expr, readAdditiveExpr(walker)]\n            };\n    }\n\n    return expr;\n}\n\nexports = module.exports = readRelationalExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析表达式\n */\n\nvar Walker = require('./walker');\nvar readTertiaryExpr = require('./read-tertiary-expr');\n\n/**\n * 解析表达式\n *\n * @param {string} source 源码\n * @return {Object}\n */\nfunction parseExpr(source) {\n    if (!source) {\n        return;\n    }\n\n    if (typeof source === 'object' && source.type) {\n        return source;\n    }\n\n    return readTertiaryExpr(new Walker(source));\n}\n\nexports = module.exports = parseExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析调用\n */\n\n\nvar Walker = require('./walker');\nvar ExprType = require('./expr-type');\nvar readCall = require('./read-call');\n\n/**\n * 解析调用\n *\n * @param {string} source 源码\n * @param {Array=} defaultArgs 默认参数\n * @return {Object}\n */\nfunction parseCall(source, defaultArgs) {\n    var expr = readCall(new Walker(source), defaultArgs);\n\n    if (expr.type !== ExprType.CALL) {\n        expr = {\n            type: ExprType.CALL,\n            name: expr,\n            args: defaultArgs || []\n        };\n    }\n    \n    return expr;\n}\n\nexports = module.exports = parseCall;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析插值替换\n */\n\nvar Walker = require('./walker');\nvar readTertiaryExpr = require('./read-tertiary-expr');\nvar ExprType = require('./expr-type');\nvar readCall = require('./read-call');\n\n/**\n * 解析插值替换\n *\n * @param {string} source 源码\n * @return {Object}\n */\nfunction parseInterp(source) {\n    var walker = new Walker(source);\n\n    var interp = {\n        type: ExprType.INTERP,\n        expr: readTertiaryExpr(walker),\n        filters: []\n    };\n\n    while (walker.goUntil(124)) { // |\n        var callExpr = readCall(walker, []);\n        switch (callExpr.name.paths[0].value) {\n            case 'html':\n                break;\n            case 'raw':\n                interp.original = 1;\n                break;\n            default:\n                interp.filters.push(callExpr);\n        }\n    }\n\n    return interp;\n}\n\nexports = module.exports = parseInterp;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解码 HTML 字符实体\n */\n\nvar ENTITY_DECODE_MAP = {\n    lt: '<',\n    gt: '>',\n    nbsp: '\\u00a0',\n    quot: '\\\"',\n    emsp: '\\u2003',\n    ensp: '\\u2002',\n    thinsp: '\\u2009',\n    copy: '\\xa9',\n    reg: '\\xae',\n    zwnj: '\\u200c',\n    zwj: '\\u200d',\n    amp: '&'\n};\n\n/**\n * 解码 HTML 字符实体\n *\n * @param {string} source 要解码的字符串\n * @return {string}\n */\nfunction decodeHTMLEntity(source) {\n    return source\n        .replace(/&#([0-9]+);/g, function (match, code) {\n            return String.fromCharCode(+code);\n        })\n        .replace(/&#x([0-9a-f]+);/ig, function (match, code) {\n            return String.fromCharCode(parseInt(code, 16));\n        })\n        .replace(/&([a-z]+);/ig, function (match, code) {\n            return ENTITY_DECODE_MAP[code] || match;\n        });\n}\n\nexports = module.exports = decodeHTMLEntity;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析文本\n */\n\nvar Walker = require('./walker');\nvar ExprType = require('./expr-type');\nvar parseInterp = require('./parse-interp');\nvar decodeHTMLEntity = require('../util/decode-html-entity');\n\n/**\n * 对字符串进行可用于new RegExp的字面化\n *\n * @inner\n * @param {string} source 需要字面化的字符串\n * @return {string} 字符串字面化结果\n */\nfunction regexpLiteral(source) {\n    return source.replace(/[\\^\\[\\]\\$\\(\\)\\{\\}\\?\\*\\.\\+\\\\]/g, function (c) {\n        return '\\\\' + c;\n    });\n}\n\nvar delimRegCache = {};\n\n/**\n * 解析文本\n *\n * @param {string} source 源码\n * @param {Array?} delimiters 分隔符。默认为 ['{{', '}}']\n * @return {Object}\n */\nfunction parseText(source, delimiters) {\n    delimiters = delimiters || ['{{', '}}'];\n\n    var regCacheKey = delimiters[0] + '>..<' + delimiters[1];\n    var exprStartReg = delimRegCache[regCacheKey];\n    if (!exprStartReg) {\n        exprStartReg = new RegExp(\n            regexpLiteral(delimiters[0])\n                + '\\\\s*([\\\\s\\\\S]+?)\\\\s*'\n                + regexpLiteral(delimiters[1]),\n            'g'\n        );\n        delimRegCache[regCacheKey] = exprStartReg;\n    }\n\n    var exprMatch;\n\n    var walker = new Walker(source);\n    var beforeIndex = 0;\n\n    var segs = [];\n    var original;\n    \n    function pushStringToSeg(text) {\n        text && segs.push({\n            type: ExprType.STRING,\n            value: decodeHTMLEntity(text)\n        });\n    }\n\n    var delimEndLen = delimiters[1].length;\n    while ((exprMatch = walker.match(exprStartReg)) != null) {\n        var interpSource = exprMatch[1];\n        var interpLen = exprMatch[0].length;\n        if (walker.cut(walker.index + 1 - delimEndLen, walker.index + 1) === delimiters[1]) {\n            interpSource += walker.cut(walker.index, walker.index + 1);\n            walker.go(1);\n            interpLen++;\n        }\n\n        pushStringToSeg(walker.cut(\n            beforeIndex,\n            walker.index - interpLen\n        ));\n\n        var interp = parseInterp(interpSource);\n        original = original || interp.original;\n        segs.push(interp);\n\n        beforeIndex = walker.index;\n    }\n\n    pushStringToSeg(walker.cut(beforeIndex));\n\n    switch (segs.length) {\n        case 0:\n            return {\n                type: ExprType.STRING,\n                value: ''\n            };\n\n        case 1:\n            if (segs[0].type === ExprType.INTERP && segs[0].filters.length === 0 && !segs[0].original) {\n                return segs[0].expr;\n            }\n            return segs[0];\n    }\n\n    return original ? {\n        type: ExprType.TEXT,\n        segs: segs,\n        original: 1\n    } : {\n        type: ExprType.TEXT,\n        segs: segs\n    };\n}\n\nexports = module.exports = parseText;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析指令\n */\n\n\nvar Walker = require('./walker');\nvar parseExpr = require('./parse-expr');\nvar parseCall = require('./parse-call');\nvar parseText = require('./parse-text');\nvar readAccessor = require('./read-accessor');\nvar readUnaryExpr = require('./read-unary-expr');\n\n/**\n * 指令解析器\n *\n * @inner\n * @type {Object}\n */\nvar directiveParsers = {\n    'for': function (value) {\n        var walker = new Walker(value);\n        var match = walker.match(/^\\s*([$0-9a-z_]+)(\\s*,\\s*([$0-9a-z_]+))?\\s+in\\s+/ig, 1);\n\n        if (match) {\n            var directive = {\n                item: match[1],\n                value: readUnaryExpr(walker)\n            };\n\n            if (match[3]) {\n                directive.index = match[3];\n            }\n\n            if (walker.match(/\\s*trackby\\s+/ig, 1)) {\n                var start = walker.index;\n                directive.trackBy = readAccessor(walker);\n                directive.trackByRaw = walker.cut(start, walker.index);\n            }\n            return directive;\n        }\n\n        // #[begin] error\n        throw new Error('[SAN FATAL] for syntax error: ' + value);\n        // #[end]\n    },\n\n    'ref': function (value, options) {\n        return {\n            value: parseText(value, options.delimiters)\n        };\n    },\n\n    'if': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'elif': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'else': function () {\n        return {\n            value: {}\n        };\n    },\n\n    'bind': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'html': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'show': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'is': function (value) {\n        return {\n            value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n    },\n\n    'transition': function (value) {\n        return {\n            value: parseCall(value)\n        };\n    }\n};\n\n/**\n * 解析指令\n *\n * @param {ANode} aNode 抽象节点\n * @param {string} name 指令名称\n * @param {string} value 指令值\n * @param {Object} options 解析参数\n * @param {Array?} options.delimiters 插值分隔符列表\n */\nfunction parseDirective(aNode, name, value, options) {\n    if (name === 'else-if') {\n        name = 'elif';\n    }\n\n    var parser = directiveParsers[name];\n    if (parser) {\n        aNode.directives[name] = parser(value, options);\n    }\n}\n\nexports = module.exports = parseDirective;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析抽象节点属性\n */\n\nvar each = require('../util/each');\nvar kebab2camel = require('../util/kebab2camel');\nvar boolAttrs = require('../browser/bool-attrs');\nvar ExprType = require('./expr-type');\nvar createAccessor = require('./create-accessor');\nvar parseExpr = require('./parse-expr');\nvar parseCall = require('./parse-call');\nvar parseText = require('./parse-text');\nvar parseDirective = require('./parse-directive');\n\n\n/**\n * 解析抽象节点属性\n *\n * @param {ANode} aNode 抽象节点\n * @param {string} name 属性名称\n * @param {string} value 属性值\n * @param {Object} options 解析参数\n * @param {Array?} options.delimiters 插值分隔符列表\n */\nfunction integrateAttr(aNode, name, value, options) {\n    var prefixIndex = name.indexOf('-');\n    var realName;\n    var prefix;\n\n    if (prefixIndex > 0) {\n        prefix = name.slice(0, prefixIndex);\n        realName = name.slice(prefixIndex + 1);\n    }\n\n    switch (prefix) {\n        case 'on':\n            var event = {\n                name: realName,\n                modifier: {}\n            };\n            aNode.events.push(event);\n\n            var colonIndex;\n            while ((colonIndex = value.indexOf(':')) > 0) {\n                var modifier = value.slice(0, colonIndex);\n\n                // eventHandler(\"dd:aa\") 这种情况不能算modifier，需要辨识\n                if (!/^[a-z]+$/i.test(modifier)) {\n                    break;\n                }\n\n                event.modifier[modifier] = true;\n                value = value.slice(colonIndex + 1);\n            }\n\n            event.expr = parseCall(value, [\n                createAccessor([\n                    {type: ExprType.STRING, value: '$event'}\n                ])\n            ]);\n            break;\n\n        case 'san':\n        case 's':\n            parseDirective(aNode, realName, value, options);\n            break;\n\n        case 'prop':\n            integrateProp(aNode, realName, value, options);\n            break;\n\n        case 'var':\n            if (!aNode.vars) {\n                aNode.vars = [];\n            }\n\n            realName = kebab2camel(realName);\n            aNode.vars.push({\n                name: realName,\n                expr: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n            });\n            break;\n\n        default:\n            integrateProp(aNode, name, value, options);\n    }\n}\n\n/**\n * 解析抽象节点绑定属性\n *\n * @inner\n * @param {ANode} aNode 抽象节点\n * @param {string} name 属性名称\n * @param {string} rawValue 属性值\n * @param {Object} options 解析参数\n * @param {Array?} options.delimiters 插值分隔符列表\n */\nfunction integrateProp(aNode, name, rawValue, options) {\n    // parse two way binding, e.g. value=\"{=ident=}\"\n    if (rawValue && rawValue.indexOf('{=') === 0 && rawValue.slice(-2) === '=}') {\n        aNode.props.push({\n            name: name,\n            expr: parseExpr(rawValue.slice(2, -2)),\n            x: 1\n        });\n\n        return;\n    }\n\n    var expr = parseText(rawValue || '', options.delimiters);\n\n    if (expr.value === '') {\n        if (boolAttrs[name]) {\n            expr = {\n                type: ExprType.BOOL,\n                value: true\n            };\n        }\n    }\n    else {\n        switch (name) {\n            case 'class':\n            case 'style':\n\n                switch (expr.type) {\n                    case ExprType.TEXT:\n                        for (var i = 0, l = expr.segs.length; i < l; i++) {\n                            if (expr.segs[i].type === ExprType.INTERP) {\n                                expr.segs[i].filters.push({\n                                    type: ExprType.CALL,\n                                    name: createAccessor([\n                                        {\n                                            type: ExprType.STRING,\n                                            value: '_' + name\n                                        }\n                                    ]),\n                                    args: []\n                                });\n                            }\n                        }\n                        break;\n\n                    case ExprType.INTERP:\n                        expr.filters.push({\n                            type: ExprType.CALL,\n                            name: createAccessor([\n                                {\n                                    type: ExprType.STRING,\n                                    value: '_' + name\n                                }\n                            ]),\n                            args: []\n                        });\n                        break;\n\n                    default:\n                        if (expr.type !== ExprType.STRING) {\n                            expr = {\n                                type: ExprType.INTERP,\n                                expr: expr,\n                                filters: [{\n                                    type: ExprType.CALL,\n                                    name: createAccessor([\n                                        {\n                                            type: ExprType.STRING,\n                                            value: '_' + name\n                                        }\n                                    ]),\n                                    args: []\n                                }]\n                            }\n                        }\n                }\n        }\n\n    }\n\n    aNode.props.push(\n        rawValue != null\n            ? {name: name, expr: expr}\n            : {name: name, expr: expr, noValue: 1}\n    );\n}\n\n\nexports = module.exports = integrateAttr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析模板\n */\n\n\nvar Walker = require('./walker');\nvar ExprType = require('./expr-type');\nvar integrateAttr = require('./integrate-attr');\nvar parseText = require('./parse-text');\nvar svgTags = require('../browser/svg-tags');\nvar autoCloseTags = require('../browser/auto-close-tags');\n\n// #[begin] error\nfunction getXPath(stack, currentTagName) {\n    var path = ['ROOT'];\n    for (var i = 1, len = stack.length; i < len; i++) {\n        path.push(stack[i].tagName);\n    }\n    if (currentTagName) {\n        path.push(currentTagName);\n    }\n    return path.join('>');\n}\n// #[end]\n\n/* eslint-disable fecs-max-statements */\n\n/**\n * 解析 template\n *\n * @param {string} source template源码\n * @param {Object?} options 解析参数\n * @param {string?} options.trimWhitespace 空白文本的处理策略。none|blank|all\n * @param {Array?} options.delimiters 插值分隔符列表\n * @return {ANode}\n */\nfunction parseTemplate(source, options) {\n    options = options || {};\n    options.trimWhitespace = options.trimWhitespace || 'none';\n\n    var rootNode = {\n        directives: {},\n        props: [],\n        events: [],\n        children: []\n    };\n\n    if (typeof source !== 'string') {\n        return rootNode;\n    }\n\n    source = source.replace(/<!--([\\s\\S]*?)-->/mg, '').replace(/(^\\s+|\\s+$)/g, '');\n    var walker = new Walker(source);\n\n    var tagReg = /<(\\/)?([a-z][a-z0-9-]*)\\s*/ig;\n    var attrReg = /([-:0-9a-z\\[\\]_]+)(\\s*=\\s*(([^'\"<>\\s]+)|\"([^\"]*?)\"|'([^']*?)'))?\\s*/ig;\n\n    var tagMatch;\n    var currentNode = rootNode;\n    var stack = [rootNode];\n    var stackIndex = 0;\n    var beforeLastIndex = 0;\n\n    while ((tagMatch = walker.match(tagReg)) != null) {\n        var tagMatchStart = walker.index - tagMatch[0].length;\n        var tagEnd = tagMatch[1];\n        var tagName = tagMatch[2];\n        if (!svgTags[tagName]) {\n            tagName = tagName.toLowerCase();\n        }\n\n        // 62: >\n        // 47: /\n        // 处理 </xxxx >\n        if (tagEnd) {\n            if (walker.currentCode() === 62) {\n                // 满足关闭标签的条件时，关闭标签\n                // 向上查找到对应标签，找不到时忽略关闭\n                var closeIndex = stackIndex;\n\n                // #[begin] error\n                // 如果正在闭合一个自闭合的标签，例如 </input>，报错\n                if (autoCloseTags[tagName]) {\n                    throw new Error(''\n                        + '[SAN ERROR] ' + getXPath(stack, tagName) + ' is a `auto closed` tag, '\n                        + 'so it cannot be closed with </' + tagName + '>'\n                    );\n                }\n\n                // 如果关闭的 tag 和当前打开的不一致，报错\n                if (\n                    stack[closeIndex].tagName !== tagName\n                    // 这里要把 table 自动添加 tbody 的情况给去掉\n                    && !(tagName === 'table' && stack[closeIndex].tagName === 'tbody')\n                ) {\n                    throw new Error('[SAN ERROR] ' + getXPath(stack) + ' is closed with ' + tagName);\n                }\n                // #[end]\n\n\n                pushTextNode(source.slice(beforeLastIndex, tagMatchStart));\n                while (closeIndex > 0 && stack[closeIndex].tagName !== tagName) {\n                    closeIndex--;\n                }\n\n                if (closeIndex > 0) {\n                    stackIndex = closeIndex - 1;\n                    currentNode = stack[stackIndex];\n                }\n                walker.go(1);\n            }\n            // #[begin] error\n            else {\n                // 处理 </xxx 非正常闭合标签\n\n                // 如果闭合标签时，匹配后的下一个字符是 <，即下一个标签的开始，那么当前闭合标签未闭合\n                if (walker.currentCode() === 60) {\n                    throw new Error(''\n                        + '[SAN ERROR] ' + getXPath(stack)\n                        + '\\'s close tag not closed'\n                    );\n                }\n\n                // 闭合标签有属性\n                throw new Error(''\n                    + '[SAN ERROR] ' + getXPath(stack)\n                    + '\\'s close tag has attributes'\n                );\n            }\n            // #[end]\n        }\n        else {\n            var aElement = {\n                directives: {},\n                props: [],\n                events: [],\n                children: [],\n                tagName: tagName\n            };\n            var tagClose = autoCloseTags[tagName];\n\n            // 解析 attributes\n\n            /* eslint-disable no-constant-condition */\n            while (1) {\n            /* eslint-enable no-constant-condition */\n\n                var nextCharCode = walker.currentCode();\n\n                // 标签结束时跳出 attributes 读取\n                // 标签可能直接结束或闭合结束\n                if (nextCharCode === 62) {\n                    walker.go(1);\n                    break;\n                }\n\n                // 遇到 /> 按闭合处理\n                if (nextCharCode === 47\n                    && walker.charCode(walker.index + 1) === 62\n                ) {\n                    walker.go(2);\n                    tagClose = 1;\n                    break;\n                }\n\n                // template 串结束了\n                // 这时候，说明这个读取周期的所有内容，都是text\n                if (!nextCharCode) {\n                    pushTextNode(walker.cut(beforeLastIndex));\n                    aElement = null;\n                    break;\n                }\n\n                // #[begin] error\n                // 在处理一个 open 标签时，如果遇到了 <， 即下一个标签的开始，则当前标签未能正常闭合，报错\n                if (nextCharCode === 60) {\n                    throw new Error('[SAN ERROR] ' + getXPath(stack, tagName) + ' is not closed');\n                }\n                // #[end]\n\n                // 读取 attribute\n                var attrMatch = walker.match(attrReg, 1);\n                if (attrMatch) {\n                    integrateAttr(\n                        aElement,\n                        attrMatch[1],\n                        attrMatch[2] ? (attrMatch[4] || (attrMatch[5] == null ? attrMatch[6] : attrMatch[5])) : void(0),\n                        options\n                    );\n                }\n                else {\n                    pushTextNode(walker.cut(beforeLastIndex, walker.index));\n                    aElement = null;\n                    break;\n                }\n            }\n\n            if (aElement) {\n                pushTextNode(source.slice(beforeLastIndex, tagMatchStart));\n\n                // handle show directive, append expr to style prop\n                if (aElement.directives.show) {\n                    // find style prop\n                    var styleProp = null;\n                    var propsLen = aElement.props.length;\n                    while (propsLen--) {\n                        if (aElement.props[propsLen].name === 'style') {\n                            styleProp = aElement.props[propsLen];\n                            break;\n                        }\n                    }\n\n                    var showStyleExpr = {\n                        type: ExprType.TERTIARY,\n                        segs: [\n                            aElement.directives.show.value,\n                            {type: ExprType.STRING, value: ''},\n                            {type: ExprType.STRING, value: ';display:none;'}\n                        ]\n                    };\n\n                    if (styleProp) {\n                        if (styleProp.expr.type === ExprType.TEXT) {\n                            styleProp.expr.segs.push(showStyleExpr);\n                        }\n                        else {\n                            aElement.props[propsLen].expr = {\n                                type: ExprType.TEXT,\n                                segs: [\n                                    styleProp.expr,\n                                    showStyleExpr\n                                ]\n                            };\n                        }\n                    }\n                    else {\n                        aElement.props.push({\n                            name: 'style',\n                            expr: showStyleExpr\n                        });\n                    }\n                }\n\n                // match if directive for else/elif directive\n                var elseDirective = aElement.directives['else'] // eslint-disable-line dot-notation\n                    || aElement.directives.elif;\n\n                if (elseDirective) {\n                    var parentChildrenLen = currentNode.children.length;\n                    var ifANode = null;\n\n                    while (parentChildrenLen--) {\n                        var parentChild = currentNode.children[parentChildrenLen];\n                        if (parentChild.textExpr) {\n                            currentNode.children.splice(parentChildrenLen, 1);\n                            continue;\n                        }\n\n                        ifANode = parentChild;\n                        break;\n                    }\n\n                    // #[begin] error\n                    if (!ifANode || !parentChild.directives['if']) { // eslint-disable-line dot-notation\n                        throw new Error('[SAN FATEL] else not match if.');\n                    }\n                    // #[end]\n\n                    if (ifANode) {\n                        ifANode.elses = ifANode.elses || [];\n                        ifANode.elses.push(aElement);\n                    }\n                }\n                else {\n                    if (aElement.tagName === 'tr' && currentNode.tagName === 'table') {\n                        var tbodyNode = {\n                            directives: {},\n                            props: [],\n                            events: [],\n                            children: [],\n                            tagName: 'tbody'\n                        };\n                        currentNode.children.push(tbodyNode);\n                        currentNode = tbodyNode;\n                        stack[++stackIndex] = tbodyNode;\n                    }\n\n                    currentNode.children.push(aElement);\n                }\n\n                if (!tagClose) {\n                    currentNode = aElement;\n                    stack[++stackIndex] = aElement;\n                }\n            }\n\n        }\n\n        beforeLastIndex = walker.index;\n    }\n\n    pushTextNode(walker.cut(beforeLastIndex));\n\n    return rootNode;\n\n    /**\n     * 在读取栈中添加文本节点\n     *\n     * @inner\n     * @param {string} text 文本内容\n     */\n    function pushTextNode(text) {\n        switch (options.trimWhitespace) {\n            case 'blank':\n                if (/^\\s+$/.test(text)) {\n                    text = null;\n                }\n                break;\n\n            case 'all':\n                text = text.replace(/(^\\s+|\\s+$)/g, '');\n                break;\n        }\n\n        if (text) {\n            var expr = parseText(text, options.delimiters);\n            var lastChild = currentNode.children[currentNode.children.length - 1];\n            var textExpr = lastChild && lastChild.textExpr;\n\n            if (textExpr) {\n                if (textExpr.segs) {\n                    textExpr.segs = textExpr.segs.concat(expr.segs || expr);\n                }\n                else if (textExpr.value != null && expr.value != null) {\n                    textExpr.value = textExpr.value + expr.value;\n                }\n                else {\n                    lastChild.textExpr = {\n                        type: ExprType.TEXT,\n                        segs: [textExpr].concat(expr.segs || expr)\n                    };\n                }\n            }\n            else {\n                currentNode.children.push({\n                    textExpr: expr\n                });\n            }\n        }\n    }\n}\n\n/* eslint-enable fecs-max-statements */\n\nexports = module.exports = parseTemplate;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 默认filter\n */\n\n\n/* eslint-disable fecs-camelcase */\n\n\nfunction defaultStyleFilter(source) {\n    if (typeof source === 'object') {\n        var result = '';\n        for (var key in source) {\n            /* istanbul ignore else  */\n            if (source.hasOwnProperty(key)) {\n                result += key + ':' + source[key] + ';';\n            }\n        }\n\n        return result;\n    }\n\n    return source;\n}\n\n/**\n * 默认filter\n *\n * @const\n * @type {Object}\n */\nvar DEFAULT_FILTERS = {\n\n    /**\n     * URL编码filter\n     *\n     * @param {string} source 源串\n     * @return {string} 替换结果串\n     */\n    url: encodeURIComponent,\n\n    _class: function (source) {\n        if (source instanceof Array) {\n            return source.join(' ');\n        }\n\n        return source;\n    },\n    _style: defaultStyleFilter,\n\n    _xclass: function (outer, inner) {\n        if (outer instanceof Array) {\n            outer = outer.join(' ');\n        }\n\n        if (outer) {\n            if (inner) {\n                return inner + ' ' + outer;\n            }\n\n            return outer;\n        }\n\n        return inner;\n    },\n\n    _xstyle: function (outer, inner) {\n        outer = outer && defaultStyleFilter(outer);\n        if (outer) {\n            if (inner) {\n                return inner + ';' + outer;\n            }\n\n            return outer;\n        }\n\n        return inner;\n    }\n};\n/* eslint-enable fecs-camelcase */\n\nexports = module.exports = DEFAULT_FILTERS;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 表达式计算\n */\n\nvar ExprType = require('../parser/expr-type');\nvar extend = require('../util/extend');\nvar DEFAULT_FILTERS = require('./default-filters');\nvar evalArgs = require('./eval-args');\n\n/**\n * 计算表达式的值\n *\n * @param {Object} expr 表达式对象\n * @param {Data} data 数据容器对象\n * @param {Component=} owner 所属组件环境\n * @return {*}\n */\nfunction evalExpr(expr, data, owner) {\n    if (expr.value != null) {\n        return expr.value;\n    }\n\n    var value;\n\n    switch (expr.type) {\n        case ExprType.NULL:\n            return null;\n\n        case ExprType.UNARY:\n            value = evalExpr(expr.expr, data, owner);\n            switch (expr.operator) {\n                case 33:\n                    value = !value;\n                    break;\n\n                case 43:\n                    value = +value;\n                    break;\n\n                case 45:\n                    value = 0 - value;\n                    break;\n            }\n            return value;\n\n        case ExprType.BINARY:\n            value = evalExpr(expr.segs[0], data, owner);\n            var rightValue = evalExpr(expr.segs[1], data, owner);\n\n            /* eslint-disable eqeqeq */\n            switch (expr.operator) {\n                case 37:\n                    value = value % rightValue;\n                    break;\n\n                case 43:\n                    value = value + rightValue;\n                    break;\n\n                case 45:\n                    value = value - rightValue;\n                    break;\n\n                case 42:\n                    value = value * rightValue;\n                    break;\n\n                case 47:\n                    value = value / rightValue;\n                    break;\n\n                case 60:\n                    value = value < rightValue;\n                    break;\n\n                case 62:\n                    value = value > rightValue;\n                    break;\n\n                case 76:\n                    value = value && rightValue;\n                    break;\n\n                case 94:\n                    value = value != rightValue;\n                    break;\n\n                case 121:\n                    value = value <= rightValue;\n                    break;\n\n                case 122:\n                    value = value == rightValue;\n                    break;\n\n                case 123:\n                    value = value >= rightValue;\n                    break;\n\n                case 155:\n                    value = value !== rightValue;\n                    break;\n\n                case 183:\n                    value = value === rightValue;\n                    break;\n\n                case 248:\n                    value = value || rightValue;\n                    break;\n\n            }\n            /* eslint-enable eqeqeq */\n            return value;\n\n        case ExprType.TERTIARY:\n            return evalExpr(\n                expr.segs[evalExpr(expr.segs[0], data, owner) ? 1 : 2],\n                data,\n                owner\n            );\n\n\n        case ExprType.ARRAY:\n            value = [];\n            for (var i = 0, l = expr.items.length; i < l; i++) {\n                var item = expr.items[i];\n                var itemValue = evalExpr(item.expr, data, owner);\n\n                if (item.spread) {\n                    itemValue && (value = value.concat(itemValue));\n                }\n                else {\n                    value.push(itemValue);\n                }\n            }\n            return value;\n\n        case ExprType.OBJECT:\n            value = {};\n            for (var i = 0, l = expr.items.length; i < l; i++) {\n                var item = expr.items[i];\n                var itemValue = evalExpr(item.expr, data, owner);\n\n                if (item.spread) {\n                    itemValue && extend(value, itemValue);\n                }\n                else {\n                    value[evalExpr(item.name, data, owner)] = itemValue;\n                }\n            }\n            return value;\n\n        case ExprType.ACCESSOR:\n            return data.get(expr);\n\n\n        case ExprType.INTERP:\n            value = evalExpr(expr.expr, data, owner);\n\n            if (owner) {\n                for (var i = 0, l = expr.filters.length; i < l; i++) {\n                    var filter = expr.filters[i];\n                    var filterName = filter.name.paths[0].value;\n\n                    switch (filterName) {\n                        case 'url':\n                        case '_class':\n                        case '_style':\n                            value = DEFAULT_FILTERS[filterName](value);\n                            break;\n\n                        case '_xclass':\n                        case '_xstyle':\n                            value = DEFAULT_FILTERS[filterName](value, evalExpr(filter.args[0], data, owner));\n                            break;\n\n                        default:\n                            value = owner.filters[filterName] && owner.filters[filterName].apply(\n                                owner,\n                                [value].concat(evalArgs(filter.args, data, owner))\n                            );\n                    }\n                }\n            }\n\n            if (value == null) {\n                value = '';\n            }\n\n            return value;\n\n        case ExprType.CALL:\n            if (owner && expr.name.type === ExprType.ACCESSOR) {\n                var method = owner;\n                var pathsLen = expr.name.paths.length;\n\n                for (var i = 0; method && i < pathsLen; i++) {\n                    method = method[evalExpr(expr.name.paths[i], data, owner)];\n                }\n\n                if (method) {\n                    value = method.apply(owner, evalArgs(expr.args, data, owner));\n                }\n            }\n\n            break;\n\n        /* eslint-disable no-redeclare */\n        case ExprType.TEXT:\n            var buf = '';\n            for (var i = 0, l = expr.segs.length; i < l; i++) {\n                var seg = expr.segs[i];\n                buf += seg.value || evalExpr(seg, data, owner);\n            }\n            return buf;\n    }\n\n    return value;\n}\n\nexports = module.exports = evalExpr;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 为函数调用计算参数数组的值\n */\n\n\nvar evalExpr = require('./eval-expr');\n\n/**\n * 为函数调用计算参数数组的值\n *\n * @param {Array} args 参数表达式列表\n * @param {Data} data 数据环境\n * @param {Component} owner 组件环境\n * @return {Array}\n */\nfunction evalArgs(args, data, owner) {\n    var result = [];\n    for (var i = 0; i < args.length; i++) {\n        result.push(evalExpr(args[i], data, owner));\n    }\n\n    return result;\n}\n\nexports = module.exports = evalArgs;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 比较变更表达式与目标表达式之间的关系\n */\n\nvar ExprType = require('../parser/expr-type');\nvar evalExpr = require('./eval-expr');\n\n/**\n * 判断变更表达式与多个表达式之间的关系，0为完全没关系，1为有关系\n *\n * @inner\n * @param {Object} changeExpr 目标表达式\n * @param {Array} exprs 多个源表达式\n * @param {Data} data 表达式所属数据环境\n * @return {number}\n */\nfunction changeExprCompareExprs(changeExpr, exprs, data) {\n    for (var i = 0, l = exprs.length; i < l; i++) {\n        if (changeExprCompare(changeExpr, exprs[i], data)) {\n            return 1;\n        }\n    }\n\n    return 0;\n}\n\n/**\n * 比较变更表达式与目标表达式之间的关系，用于视图更新判断\n * 视图更新需要根据其关系，做出相应的更新行为\n *\n * 0: 完全没关系\n * 1: 变更表达式是目标表达式的母项(如a与a.b) 或 表示需要完全变化\n * 2: 变更表达式是目标表达式相等\n * >2: 变更表达式是目标表达式的子项，如a.b.c与a.b\n *\n * @param {Object} changeExpr 变更表达式\n * @param {Object} expr 要比较的目标表达式\n * @param {Data} data 表达式所属数据环境\n * @return {number}\n */\nfunction changeExprCompare(changeExpr, expr, data) {\n    // if (!expr.dynamic) {\n    //     return 0;\n    // }\n\n    switch (expr.type) {\n        case ExprType.ACCESSOR:\n            var paths = expr.paths;\n            var pathsLen = paths.length;\n            var changePaths = changeExpr.paths;\n            var changeLen = changePaths.length;\n\n            var result = 1;\n            for (var i = 0; i < pathsLen; i++) {\n                var pathExpr = paths[i];\n                var pathExprValue = pathExpr.value;\n\n                if (pathExprValue == null && changeExprCompare(changeExpr, pathExpr, data)) {\n                    result = 1;\n                    break;\n                }\n\n                if (result && i < changeLen\n                    /* eslint-disable eqeqeq */\n                    && (pathExprValue || evalExpr(pathExpr, data)) != changePaths[i].value\n                    /* eslint-enable eqeqeq */\n                ) {\n                    result = 0;\n                }\n            }\n\n            if (result) {\n                result = Math.max(1, changeLen - pathsLen + 2);\n            }\n            return result;\n\n        case ExprType.UNARY:\n            return changeExprCompare(changeExpr, expr.expr, data) ? 1 : 0;\n\n\n        case ExprType.TEXT:\n        case ExprType.BINARY:\n        case ExprType.TERTIARY:\n            return changeExprCompareExprs(changeExpr, expr.segs, data);\n\n        case ExprType.ARRAY:\n        case ExprType.OBJECT:\n            for (var i = 0; i < expr.items.length; i++) {\n                if (changeExprCompare(changeExpr, expr.items[i].expr, data)) {\n                    return 1;\n                }\n            }\n\n            break;\n\n        case ExprType.INTERP:\n            if (changeExprCompare(changeExpr, expr.expr, data)) {\n                return 1\n            }\n            else {\n                for (var i = 0; i < expr.filters.length; i++) {\n                    if (changeExprCompareExprs(changeExpr, expr.filters[i].args, data)) {\n                        return 1;\n                    }\n                }\n            }\n\n            break;\n\n        case ExprType.CALL:\n            if (changeExprCompareExprs(changeExpr, expr.name.paths, data)\n                || changeExprCompareExprs(changeExpr, expr.args, data)\n            ) {\n                return 1\n            }\n            break;\n    }\n\n    return 0;\n}\n\nexports = module.exports = changeExprCompare;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 生命周期类\n */\n\nfunction lifeCycleOwnIs(name) {\n    return this[name];\n}\n\n/* eslint-disable fecs-valid-var-jsdoc */\n/**\n * 节点生命周期信息\n *\n * @inner\n * @type {Object}\n */\nvar LifeCycle = {\n    start: {},\n\n    compiled: {\n        is: lifeCycleOwnIs,\n        compiled: true\n    },\n\n    inited: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true\n    },\n\n    created: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true,\n        created: true\n    },\n\n    attached: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true,\n        created: true,\n        attached: true\n    },\n\n    leaving: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true,\n        created: true,\n        attached: true,\n        leaving: true\n    },\n\n    detached: {\n        is: lifeCycleOwnIs,\n        compiled: true,\n        inited: true,\n        created: true,\n        detached: true\n    },\n\n    disposed: {\n        is: lifeCycleOwnIs,\n        disposed: true\n    }\n};\n/* eslint-enable fecs-valid-var-jsdoc */\n\n\nexports = module.exports = LifeCycle;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取 ANode props 数组中相应 name 的项\n */\n\n/**\n * 获取 ANode props 数组中相应 name 的项\n *\n * @param {Object} aNode ANode对象\n * @param {string} name name属性匹配串\n * @return {Object}\n */\nfunction getANodeProp(aNode, name) {\n    var index = aNode.hotspot.props[name];\n    if (index != null) {\n        return aNode.props[index];\n    }\n}\n\nexports = module.exports = getANodeProp;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取属性处理对象\n */\n\nvar contains = require('../util/contains');\nvar empty = require('../util/empty');\nvar nextTick = require('../util/next-tick');\nvar svgTags = require('../browser/svg-tags');\nvar ie = require('../browser/ie');\nvar evalExpr = require('../runtime/eval-expr');\nvar getANodeProp = require('./get-a-node-prop');\nvar NodeType = require('./node-type');\n\n\n/**\n * HTML 属性和 DOM 操作属性的对照表\n *\n * @inner\n * @const\n * @type {Object}\n */\nvar HTML_ATTR_PROP_MAP = {\n    'readonly': 'readOnly',\n    'cellpadding': 'cellPadding',\n    'cellspacing': 'cellSpacing',\n    'colspan': 'colSpan',\n    'rowspan': 'rowSpan',\n    'valign': 'vAlign',\n    'usemap': 'useMap',\n    'frameborder': 'frameBorder',\n    'for': 'htmlFor'\n};\n\n/**\n * 默认的元素的属性设置的变换方法\n *\n * @inner\n * @type {Object}\n */\nfunction defaultElementPropHandler(el, value, name) {\n    var propName = HTML_ATTR_PROP_MAP[name] || name;\n    var valueNotNull = value != null;\n\n    // input 的 type 是个特殊属性，其实也应该用 setAttribute\n    // 但是 type 不应该运行时动态改变，否则会有兼容性问题\n    // 所以这里直接就不管了\n    if (propName in el) {\n        el[propName] = valueNotNull ? value : '';\n    }\n    else if (valueNotNull) {\n        el.setAttribute(name, value);\n    }\n\n    if (!valueNotNull) {\n        el.removeAttribute(name);\n    }\n}\n\nfunction svgPropHandler(el, value, name) {\n    el.setAttribute(name, value);\n}\n\nfunction boolPropHandler(el, value, name) {\n    var propName = HTML_ATTR_PROP_MAP[name] || name;\n    el[propName] = !!value;\n}\n\n// #[begin] allua\n// see https://github.com/baidu/san/issues/495\nfunction placeholderHandler(el, value, name, element) {\n    /* istanbul ignore if */\n    if (ie > 9 && !el.value && value) {\n        element.__bkph = true;\n        nextTick(function () {\n            element.__bkph = false;\n        });\n    }\n\n    defaultElementPropHandler(el, value, name);\n}\n// #[end]\n\n/* eslint-disable fecs-properties-quote */\n/**\n * 默认的属性设置变换方法\n *\n * @inner\n * @type {Object}\n */\nvar defaultElementPropHandlers = {\n    style: function (el, value) {\n        el.style.cssText = value;\n    },\n\n    'class': function (el, value) { // eslint-disable-line\n        if (\n            // #[begin] allua\n            ie\n            ||\n            // #[end]\n            el.className !== value\n        ) {\n            el.className = value;\n        }\n    },\n\n    slot: empty,\n\n    draggable: boolPropHandler\n};\n/* eslint-enable fecs-properties-quote */\n\nvar analInputChecker = {\n    checkbox: contains,\n    radio: function (a, b) {\n        return a === b;\n    }\n};\n\nfunction analInputCheckedState(element, value) {\n    var bindValue = getANodeProp(element.aNode, 'value');\n    var bindType = getANodeProp(element.aNode, 'type');\n\n    if (bindValue && bindType) {\n        var type = evalExpr(bindType.expr, element.scope, element.owner);\n\n        if (analInputChecker[type]) {\n            var bindChecked = getANodeProp(element.aNode, 'checked');\n            if (bindChecked != null && !bindChecked.hintExpr) {\n                bindChecked.hintExpr = bindValue.expr;\n            }\n\n            return !!analInputChecker[type](\n                value,\n                element.data\n                    ? evalExpr(bindValue.expr, element.data, element)\n                    : evalExpr(bindValue.expr, element.scope, element.owner)\n            );\n        }\n    }\n}\n\nvar elementPropHandlers = {\n    input: {\n        multiple: boolPropHandler,\n        checked: function (el, value, name, element) {\n            var state = analInputCheckedState(element, value);\n\n            boolPropHandler(\n                el,\n                state != null ? state : value,\n                'checked',\n                element\n            );\n\n            // #[begin] allua\n            // 代码不用抽出来防重复，allua内的代码在现代浏览器版本会被编译时干掉，gzip也会处理重复问题\n            // see: #378\n            /* istanbul ignore if */\n            if (ie && ie < 8 && !element.lifeCycle.attached) {\n                boolPropHandler(\n                    el,\n                    state != null ? state : value,\n                    'defaultChecked',\n                    element\n                );\n            }\n            // #[end]\n        },\n\n        // #[begin] allua\n        placeholder: placeholderHandler,\n        // #[end]\n\n        readonly: boolPropHandler,\n        disabled: boolPropHandler,\n        autofocus: boolPropHandler,\n        required: boolPropHandler\n    },\n\n    option: {\n        value: function (el, value, name, element) {\n            defaultElementPropHandler(el, value, name, element);\n\n            if (isOptionSelected(element, value)) {\n                el.selected = true;\n            }\n        }\n    },\n\n    select: {\n        readonly: boolPropHandler,\n        disabled: boolPropHandler,\n        autofocus: boolPropHandler,\n        required: boolPropHandler\n    },\n\n    textarea: {\n        // #[begin] allua\n        placeholder: placeholderHandler,\n        // #[end]\n        readonly: boolPropHandler,\n        disabled: boolPropHandler,\n        autofocus: boolPropHandler,\n        required: boolPropHandler\n    },\n\n    button: {\n        disabled: boolPropHandler,\n        autofocus: boolPropHandler,\n        type: function (el, value) {\n            if (value != null) {\n                el.setAttribute('type', value);\n            }\n            else {\n                el.removeAttribute('type');\n            }\n        }\n    }\n};\n\nfunction isOptionSelected(element, value) {\n    var parentSelect = element.parent;\n    while (parentSelect) {\n        if (parentSelect.tagName === 'select') {\n            break;\n        }\n\n        parentSelect = parentSelect.parent;\n    }\n\n\n    if (parentSelect) {\n        var selectValue = null;\n        var prop;\n        var expr;\n\n        if ((prop = getANodeProp(parentSelect.aNode, 'value'))\n            && (expr = prop.expr)\n        ) {\n            selectValue = parentSelect.nodeType === NodeType.CMPT\n                ? evalExpr(expr, parentSelect.data, parentSelect)\n                : evalExpr(expr, parentSelect.scope, parentSelect.owner)\n                || '';\n        }\n\n        if (selectValue === value) {\n            return 1;\n        }\n    }\n}\n\n\n/**\n * 获取属性处理对象\n *\n * @param {string} tagName 元素tag\n * @param {string} attrName 属性名\n * @return {Object}\n */\nfunction getPropHandler(tagName, attrName) {\n    if (svgTags[tagName]) {\n        return svgPropHandler;\n    }\n\n    var tagPropHandlers = elementPropHandlers[tagName];\n    if (!tagPropHandlers) {\n        tagPropHandlers = elementPropHandlers[tagName] = {};\n    }\n\n    var propHandler = tagPropHandlers[attrName];\n    if (!propHandler) {\n        propHandler = defaultElementPropHandlers[attrName] || defaultElementPropHandler;\n        tagPropHandlers[attrName] = propHandler;\n    }\n\n    return propHandler;\n}\n\nexports = module.exports = getPropHandler;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断数组中是否包含某项\n */\n\nvar each = require('./each');\n\n/**\n * 判断数组中是否包含某项\n *\n * @param {Array} array 数组\n * @param {*} value 包含的项\n * @return {boolean}\n */\nfunction contains(array, value) {\n    var result = false;\n    each(array, function (item) {\n        result = item === value;\n        return !result;\n    });\n\n    return result;\n}\n\nexports = module.exports = contains;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断变更是否来源于元素\n */\n\n/**\n * 判断变更是否来源于元素，来源于元素时，视图更新需要阻断\n *\n * @param {Object} change 变更对象\n * @param {Element} element 元素\n * @param {string?} propName 属性名，可选。需要精确判断是否来源于此属性时传入\n * @return {boolean}\n */\nfunction isDataChangeByElement(change, element, propName) {\n    var changeTarget = change.option.target;\n    return changeTarget && changeTarget.node === element\n        && (!propName || changeTarget.prop === propName);\n}\n\nexports = module.exports = isDataChangeByElement;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 在对象上使用accessor表达式查找方法\n */\n\nvar evalExpr = require('../runtime/eval-expr');\n\n/**\n * 在对象上使用accessor表达式查找方法\n *\n * @param {Object} source 源对象\n * @param {Object} nameExpr 表达式\n * @param {Data} data 所属数据环境\n * @return {Function}\n */\nfunction findMethod(source, nameExpr, data) {\n    var method = source;\n\n    for (var i = 0; method != null && i < nameExpr.paths.length; i++) {\n        method = method[evalExpr(nameExpr.paths[i], data)];\n    }\n\n    return method;\n}\n\nexports = module.exports = findMethod;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 数据类\n */\n\nvar ExprType = require('../parser/expr-type');\nvar evalExpr = require('./eval-expr');\nvar DataChangeType = require('./data-change-type');\nvar createAccessor = require('../parser/create-accessor');\nvar parseExpr = require('../parser/parse-expr');\n\n/**\n * 数据类\n *\n * @class\n * @param {Object?} data 初始数据\n * @param {Model?} parent 父级数据容器\n */\nfunction Data(data, parent) {\n    this.parent = parent;\n    this.raw = data || {};\n    this.listeners = [];\n}\n\n// #[begin] error\n// 以下两个函数只在开发模式下可用，在生产模式下不存在\n/**\n * DataTypes 检测\n */\nData.prototype.checkDataTypes = function () {\n    if (this.typeChecker) {\n        this.typeChecker(this.raw);\n    }\n};\n\n/**\n * 设置 type checker\n *\n * @param  {Function} typeChecker 类型校验器\n */\nData.prototype.setTypeChecker = function (typeChecker) {\n    this.typeChecker = typeChecker;\n};\n\n// #[end]\n\n/**\n * 添加数据变更的事件监听器\n *\n * @param {Function} listener 监听函数\n */\nData.prototype.listen = function (listener) {\n    if (typeof listener === 'function') {\n        this.listeners.push(listener);\n    }\n};\n\n/**\n * 移除数据变更的事件监听器\n *\n * @param {Function} listener 监听函数\n */\nData.prototype.unlisten = function (listener) {\n    var len = this.listeners.length;\n    while (len--) {\n        if (!listener || this.listeners[len] === listener) {\n            this.listeners.splice(len, 1);\n        }\n    }\n};\n\n/**\n * 触发数据变更\n *\n * @param {Object} change 变更信息对象\n */\nData.prototype.fire = function (change) {\n    if (change.option.silent || change.option.silence || change.option.quiet) {\n        return;\n    }\n\n    for (var i = 0; i < this.listeners.length; i++) {\n        this.listeners[i].call(this, change);\n    }\n};\n\n/**\n * 获取数据项\n *\n * @param {string|Object?} expr 数据项路径\n * @param {Data?} callee 当前数据获取的调用环境\n * @return {*}\n */\nData.prototype.get = function (expr, callee) {\n    var value = this.raw;\n    if (!expr) {\n        return value;\n    }\n\n    if (typeof expr !== 'object') {\n        expr = parseExpr(expr);\n    }\n\n    var paths = expr.paths;\n    callee = callee || this;\n\n    value = value[paths[0].value];\n\n    if (value == null && this.parent) {\n        value = this.parent.get(expr, callee);\n    }\n    else {\n        for (var i = 1, l = paths.length; value != null && i < l; i++) {\n            value = value[paths[i].value || evalExpr(paths[i], callee)];\n        }\n    }\n\n    return value;\n};\n\n\n/**\n * 数据对象变更操作\n *\n * @inner\n * @param {Object|Array} source 要变更的源数据\n * @param {Array} exprPaths 属性路径\n * @param {number} pathsStart 当前处理的属性路径指针位置\n * @param {number} pathsLen 属性路径长度\n * @param {*} value 变更属性值\n * @param {Data} data 对应的Data对象\n * @return {*} 变更后的新数据\n */\nfunction immutableSet(source, exprPaths, pathsStart, pathsLen, value, data) {\n    if (pathsStart >= pathsLen) {\n        return value;\n    }\n\n    if (source == null) {\n        source = {};\n    }\n\n    var pathExpr = exprPaths[pathsStart];\n    var prop = evalExpr(pathExpr, data);\n    var result = source;\n\n    if (source instanceof Array) {\n        var index = +prop;\n        prop = isNaN(index) ? prop : index;\n\n        result = source.slice(0);\n        result[prop] = immutableSet(source[prop], exprPaths, pathsStart + 1, pathsLen, value, data);\n    }\n    else if (typeof source === 'object') {\n        result = {};\n\n        for (var key in source) {\n            /* istanbul ignore else  */\n            if (key !== prop && source.hasOwnProperty(key)) {\n                result[key] = source[key];\n            }\n        }\n\n        result[prop] = immutableSet(source[prop], exprPaths, pathsStart + 1, pathsLen, value, data);\n    }\n\n    if (pathExpr.value == null) {\n        exprPaths[pathsStart] = {\n            type: typeof prop === 'string' ? ExprType.STRING : ExprType.NUMBER,\n            value: prop\n        };\n    }\n\n    return result;\n}\n\n/**\n * 设置数据项\n *\n * @param {string|Object} expr 数据项路径\n * @param {*} value 数据值\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.set = function (expr, value, option) {\n    option = option || {};\n\n    // #[begin] error\n    var exprRaw = expr;\n    // #[end]\n\n    expr = parseExpr(expr);\n\n    // #[begin] error\n    if (expr.type !== ExprType.ACCESSOR) {\n        throw new Error('[SAN ERROR] Invalid Expression in Data set: ' + exprRaw);\n    }\n    // #[end]\n\n    if (this.get(expr) === value && !option.force) {\n        return;\n    }\n\n    expr = {\n        type: ExprType.ACCESSOR,\n        paths: expr.paths.slice(0)\n    };\n\n    var prop = expr.paths[0].value;\n    this.raw[prop] = immutableSet(this.raw[prop], expr.paths, 1, expr.paths.length, value, this);\n\n    this.fire({\n        type: DataChangeType.SET,\n        expr: expr,\n        value: value,\n        option: option\n    });\n\n    // #[begin] error\n    this.checkDataTypes();\n    // #[end]\n\n};\n\n/**\n * 批量设置数据\n *\n * @param {Object} source 待设置的数据集\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.assign = function (source, option) {\n    option = option || {};\n\n    for (var key in source) { // eslint-disable-line\n        this.set(\n            createAccessor([\n                {\n                    type: ExprType.STRING,\n                    value: key\n                }\n            ]),\n            source[key],\n            option\n        );\n    }\n};\n\n/**\n * 合并更新数据项\n *\n * @param {string|Object} expr 数据项路径\n * @param {Object} source 待合并的数据\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.merge = function (expr, source, option) {\n    option = option || {};\n\n    // #[begin] error\n    var exprRaw = expr;\n    // #[end]\n\n    expr = parseExpr(expr);\n\n    // #[begin] error\n    if (expr.type !== ExprType.ACCESSOR) {\n        throw new Error('[SAN ERROR] Invalid Expression in Data merge: ' + exprRaw);\n    }\n\n    if (typeof this.get(expr) !== 'object') {\n        throw new Error('[SAN ERROR] Merge Expects a Target of Type \\'object\\'; got ' + typeof oldValue);\n    }\n\n    if (typeof source !== 'object') {\n        throw new Error('[SAN ERROR] Merge Expects a Source of Type \\'object\\'; got ' + typeof source);\n    }\n    // #[end]\n\n    for (var key in source) { // eslint-disable-line\n        this.set(\n            createAccessor(\n                expr.paths.concat(\n                    [\n                        {\n                            type: ExprType.STRING,\n                            value: key\n                        }\n                    ]\n                )\n            ),\n            source[key],\n            option\n        );\n    }\n};\n\n/**\n * 基于更新函数更新数据项\n *\n * @param {string|Object} expr 数据项路径\n * @param {Function} fn 数据处理函数\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.apply = function (expr, fn, option) {\n    // #[begin] error\n    var exprRaw = expr;\n    // #[end]\n\n    expr = parseExpr(expr);\n\n    // #[begin] error\n    if (expr.type !== ExprType.ACCESSOR) {\n        throw new Error('[SAN ERROR] Invalid Expression in Data apply: ' + exprRaw);\n    }\n    // #[end]\n\n    var oldValue = this.get(expr);\n\n    // #[begin] error\n    if (typeof fn !== 'function') {\n        throw new Error(\n            '[SAN ERROR] Invalid Argument\\'s Type in Data apply: '\n            + 'Expected Function but got ' + typeof fn\n        );\n    }\n    // #[end]\n\n    this.set(expr, fn(oldValue), option);\n};\n\n/**\n * 数组数据项splice操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {Array} args splice 接受的参数列表，数组项与Array.prototype.splice的参数一致\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {Array} 新数组\n */\nData.prototype.splice = function (expr, args, option) {\n    option = option || {};\n    // #[begin] error\n    var exprRaw = expr;\n    // #[end]\n\n    expr = parseExpr(expr);\n\n    // #[begin] error\n    if (expr.type !== ExprType.ACCESSOR) {\n        throw new Error('[SAN ERROR] Invalid Expression in Data splice: ' + exprRaw);\n    }\n    // #[end]\n\n    expr = {\n        type: ExprType.ACCESSOR,\n        paths: expr.paths.slice(0)\n    };\n\n    var target = this.get(expr);\n    var returnValue = [];\n\n    if (target instanceof Array) {\n        var index = args[0];\n        var len = target.length;\n        if (index > len) {\n            index = len;\n        }\n        else if (index < 0) {\n            index = len + index;\n            if (index < 0) {\n                index = 0;\n            }\n        }\n\n        var newArray = target.slice(0);\n        returnValue = newArray.splice.apply(newArray, args);\n\n        this.raw = immutableSet(this.raw, expr.paths, 0, expr.paths.length, newArray, this);\n\n        this.fire({\n            expr: expr,\n            type: DataChangeType.SPLICE,\n            index: index,\n            deleteCount: returnValue.length,\n            value: returnValue,\n            insertions: args.slice(2),\n            option: option\n        });\n    }\n\n    // #[begin] error\n    this.checkDataTypes();\n    // #[end]\n\n    return returnValue;\n};\n\n/**\n * 数组数据项push操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {*} item 要push的值\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {number} 新数组的length属性\n */\nData.prototype.push = function (expr, item, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n        this.splice(expr, [target.length, 0, item], option);\n        return target.length + 1;\n    }\n};\n\n/**\n * 数组数据项pop操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {*}\n */\nData.prototype.pop = function (expr, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n        var len = target.length;\n        if (len) {\n            return this.splice(expr, [len - 1, 1], option)[0];\n        }\n    }\n};\n\n/**\n * 数组数据项shift操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {*}\n */\nData.prototype.shift = function (expr, option) {\n    return this.splice(expr, [0, 1], option)[0];\n};\n\n/**\n * 数组数据项unshift操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {*} item 要unshift的值\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n * @return {number} 新数组的length属性\n */\nData.prototype.unshift = function (expr, item, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n        this.splice(expr, [0, 0, item], option);\n        return target.length + 1;\n    }\n};\n\n/**\n * 数组数据项移除操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {number} index 要移除项的索引\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.removeAt = function (expr, index, option) {\n    this.splice(expr, [index, 1], option);\n};\n\n/**\n * 数组数据项移除操作\n *\n * @param {string|Object} expr 数据项路径\n * @param {*} value 要移除的项\n * @param {Object=} option 设置参数\n * @param {boolean} option.silent 静默设置，不触发变更事件\n */\nData.prototype.remove = function (expr, value, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n        var len = target.length;\n        while (len--) {\n            if (target[len] === value) {\n                this.splice(expr, [len, 1], option);\n                break;\n            }\n        }\n    }\n};\n\nexports = module.exports = Data;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取声明式事件的监听函数\n */\n\n\nvar evalArgs = require('../runtime/eval-args');\nvar findMethod = require('../runtime/find-method');\nvar Data = require('../runtime/data');\n\n/**\n * 获取声明式事件的监听函数\n *\n * @param {Object} eventBind 绑定信息对象\n * @param {Component} owner 所属组件环境\n * @param {Data} data 数据环境\n * @param {boolean} isComponentEvent 是否组件自定义事件\n * @return {Function}\n */\nfunction getEventListener(eventBind, owner, data, isComponentEvent) {\n    var args = eventBind.expr.args;\n\n    return function (e) {\n        e = isComponentEvent ? e : e || window.event;\n\n        var method = findMethod(owner, eventBind.expr.name, data);\n        if (typeof method === 'function') {\n            method.apply(\n                owner,\n                args.length ? evalArgs(args, new Data({ $event: e }, data), owner) : []\n            );\n        }\n\n        if (eventBind.modifier.prevent) {\n            e.preventDefault && e.preventDefault();\n            return false;\n        }\n\n        if (eventBind.modifier.stop) {\n            if (e.stopPropagation) {\n                e.stopPropagation();\n            }\n            else {\n                e.cancelBubble = true;\n            }\n        }\n    };\n}\n\nexports = module.exports = getEventListener;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断变更数组是否影响到数据引用摘要\n */\n\n\n/**\n * 判断变更数组是否影响到数据引用摘要\n *\n * @param {Array} changes 变更数组\n * @param {Object} dataRef 数据引用摘要\n * @return {boolean}\n */\nfunction changesIsInDataRef(changes, dataRef) {\n    if (dataRef) {\n        for (var i = 0; i < changes.length; i++) {\n            var change = changes[i];\n\n            if (!change.overview) {\n                var paths = change.expr.paths;\n                change.overview = paths[0].value;\n\n                if (paths.length > 1) {\n                    change.extOverview = paths[0].value + '.' + paths[1].value;\n                    change.wildOverview = paths[0].value + '.*';\n                }\n            }\n\n            if (dataRef[change.overview]\n                || change.wildOverview && dataRef[change.wildOverview]\n                || change.extOverview && dataRef[change.extOverview]\n            ) {\n                return true;\n            }\n        }\n    }\n}\n\nexports = module.exports = changesIsInDataRef;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file insertBefore 方法的兼容性封装\n */\n\n/**\n * insertBefore 方法的兼容性封装\n *\n * @param {HTMLNode} targetEl 要插入的节点\n * @param {HTMLElement} parentEl 父元素\n * @param {HTMLElement?} beforeEl 在此元素之前插入\n */\nfunction insertBefore(targetEl, parentEl, beforeEl) {\n    if (parentEl) {\n        if (beforeEl) {\n            parentEl.insertBefore(targetEl, beforeEl);\n        }\n        else {\n            parentEl.appendChild(targetEl);\n        }\n    }\n}\n\nexports = module.exports = insertBefore;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 元素的基本属性\n */\n\nvar splitStr2Obj = require('../util/split-str-2-obj');\n\n/**\n * 元素的基本属性\n *\n * @type {Object}\n */\nvar baseProps = splitStr2Obj('class,style,id');\n\nexports = module.exports = baseProps;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 元素子节点遍历操作类\n */\n\nvar removeEl = require('../browser/remove-el');\n\n// #[begin] reverse\n/**\n * 元素子节点遍历操作类\n *\n * @inner\n * @class\n * @param {HTMLElement} el 要遍历的元素\n */\nfunction DOMChildrenWalker(el) {\n    this.children = [];\n    this.index = 0;\n    this.target = el;\n\n    var child = el.firstChild;\n    var next;\n    while (child) {\n        next = child.nextSibling;\n\n        switch (child.nodeType) {\n            case 3:\n                if (/^\\s*$/.test(child.data || child.textContent)) {\n                    removeEl(child);\n                }\n                else {\n                    this.children.push(child);\n                }\n                break;\n\n            case 1:\n            case 8:\n                this.children.push(child);\n        }\n\n        child = next;\n    }\n\n    this.current = this.children[this.index];\n    this.next = this.children[this.index + 1];\n}\n\n/**\n * 往下走一个元素\n */\nDOMChildrenWalker.prototype.goNext = function () {\n    this.current = this.children[++this.index];\n    this.next = this.children[this.index + 1];\n};\n// #[end]\n\nexports = module.exports = DOMChildrenWalker;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 元素节点类\n */\n\n\nvar changeExprCompare = require('../runtime/change-expr-compare');\nvar changesIsInDataRef = require('../runtime/changes-is-in-data-ref');\nvar evalExpr = require('../runtime/eval-expr');\nvar insertBefore = require('../browser/insert-before');\nvar LifeCycle = require('./life-cycle');\nvar NodeType = require('./node-type');\nvar baseProps = require('./base-props');\nvar reverseElementChildren = require('./reverse-element-children');\nvar isDataChangeByElement = require('./is-data-change-by-element');\nvar getPropHandler = require('./get-prop-handler');\nvar createNode = require('./create-node');\nvar elementOwnDetach = require('./element-own-detach');\nvar elementOwnDispose = require('./element-own-dispose');\nvar elementOwnOnEl = require('./element-own-on-el');\nvar elementOwnAttached = require('./element-own-attached');\nvar nodeSBindInit = require('./node-s-bind-init');\nvar nodeSBindUpdate = require('./node-s-bind-update');\nvar warnSetHTML = require('./warn-set-html');\nvar getNodePath = require('./get-node-path');\n\n/**\n * 元素节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction Element(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n\n    this.lifeCycle = LifeCycle.start;\n    this.children = [];\n    this._elFns = [];\n    this.parentComponent = parent.nodeType === NodeType.CMPT\n        ? parent\n        : parent.parentComponent;\n\n    this.tagName = aNode.tagName;\n\n    // #[begin] allua\n    // ie8- 不支持innerHTML输出自定义标签\n    /* istanbul ignore if */\n    if (ieOldThan9 && this.tagName.indexOf('-') > 0) {\n        this.tagName = 'div';\n    }\n    // #[end]\n\n    this._sbindData = nodeSBindInit(aNode.directives.bind, this.scope, this.owner);\n    this.lifeCycle = LifeCycle.inited;\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        var currentNode = reverseWalker.current;\n\n        /* istanbul ignore if */\n        if (!currentNode) {\n            throw new Error('[SAN REVERSE ERROR] Element not found. \\nPaths: '\n                + getNodePath(this).join(' > '));\n        }\n\n        /* istanbul ignore if */\n        if (currentNode.nodeType !== 1) {\n            throw new Error('[SAN REVERSE ERROR] Element type not match, expect 1 but '\n                + currentNode.nodeType + '.\\nPaths: '\n                + getNodePath(this).join(' > '));\n        }\n\n        /* istanbul ignore if */\n        if (currentNode.tagName.toLowerCase() !== this.tagName) {\n            throw new Error('[SAN REVERSE ERROR] Element tagName not match, expect '\n                + this.tagName + ' but meet ' + currentNode.tagName.toLowerCase() + '.\\nPaths: '\n                + getNodePath(this).join(' > '));\n        }\n\n        this.el = currentNode;\n        reverseWalker.goNext();\n\n        reverseElementChildren(this, this.scope, this.owner);\n\n        this.lifeCycle = LifeCycle.created;\n        this._attached();\n        this.lifeCycle = LifeCycle.attached;\n    }\n    // #[end]\n}\n\n\n\nElement.prototype.nodeType = NodeType.ELEM;\n\n/**\n * 将元素attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nElement.prototype.attach = function (parentEl, beforeEl) {\n    if (!this.lifeCycle.attached) {\n        if (!this.el) {\n            var sourceNode = this.aNode.hotspot.sourceNode;\n            var props = this.aNode.props;\n\n            if (sourceNode) {\n                this.el = sourceNode.cloneNode(false);\n                props = this.aNode.hotspot.dynamicProps;\n            }\n            else {\n                this.el = createEl(this.tagName);\n            }\n\n            if (this._sbindData) {\n                for (var key in this._sbindData) {\n                    if (this._sbindData.hasOwnProperty(key)) {\n                        getPropHandler(this.tagName, key)(\n                            this.el,\n                            this._sbindData[key],\n                            key,\n                            this\n                        );\n                    }\n                }\n            }\n\n            for (var i = 0, l = props.length; i < l; i++) {\n                var prop = props[i];\n                var value = evalExpr(prop.expr, this.scope, this.owner);\n\n                if (value || !baseProps[prop.name]) {\n                    prop.handler(this.el, value, prop.name, this);\n                }\n            }\n\n            this.lifeCycle = LifeCycle.created;\n        }\n        insertBefore(this.el, parentEl, beforeEl);\n\n        if (!this._contentReady) {\n            var htmlDirective = this.aNode.directives.html;\n\n            if (htmlDirective) {\n                // #[begin] error\n                warnSetHTML(this.el);\n                // #[end]\n\n                this.el.innerHTML = evalExpr(htmlDirective.value, this.scope, this.owner);\n            }\n            else {\n                for (var i = 0, l = this.aNode.children.length; i < l; i++) {\n                    var childANode = this.aNode.children[i];\n                    var child = childANode.Clazz\n                        ? new childANode.Clazz(childANode, this, this.scope, this.owner)\n                        : createNode(childANode, this, this.scope, this.owner);\n                    this.children.push(child);\n                    child.attach(this.el);\n                }\n            }\n\n            this._contentReady = 1;\n        }\n\n        this._attached();\n\n        this.lifeCycle = LifeCycle.attached;\n    }\n};\n\nElement.prototype.detach = elementOwnDetach;\nElement.prototype.dispose = elementOwnDispose;\nElement.prototype._onEl = elementOwnOnEl;\nElement.prototype._leave = function () {\n    if (this.leaveDispose) {\n        if (!this.lifeCycle.disposed) {\n            var len = this.children.length;\n            while (len--) {\n                this.children[len].dispose(1, 1);\n            }\n\n            len = this._elFns.length;\n            while (len--) {\n                var fn = this._elFns[len];\n                un(this.el, fn[0], fn[1], fn[2]);\n            }\n            this._elFns = null;\n\n            // #[begin] allua\n            /* istanbul ignore if */\n            if (this._inputTimer) {\n                clearInterval(this._inputTimer);\n                this._inputTimer = null;\n            }\n            // #[end]\n\n            // 如果没有parent，说明是一个root component，一定要从dom树中remove\n            if (!this.disposeNoDetach || !this.parent) {\n                removeEl(this.el);\n            }\n\n            this.lifeCycle = LifeCycle.detached;\n\n            this.el = null;\n            this.owner = null;\n            this.scope = null;\n            this.children = null;\n            this.lifeCycle = LifeCycle.disposed;\n\n            if (this._ondisposed) {\n                this._ondisposed();\n            }\n        }\n    }\n};\n\n/**\n * 视图更新\n *\n * @param {Array} changes 数据变化信息\n */\nElement.prototype._update = function (changes) {\n    var dataHotspot = this.aNode.hotspot.data;\n    if (dataHotspot && changesIsInDataRef(changes, dataHotspot)) {\n\n        // update s-bind\n        var me = this;\n        this._sbindData = nodeSBindUpdate(\n            this.aNode.directives.bind,\n            this._sbindData,\n            this.scope,\n            this.owner,\n            changes,\n            function (name, value) {\n                if (name in me.aNode.hotspot.props) {\n                    return;\n                }\n\n                getPropHandler(me.tagName, name)(me.el, value, name, me);\n            }\n        );\n\n        // update prop\n        var dynamicProps = this.aNode.hotspot.dynamicProps;\n        for (var i = 0, l = dynamicProps.length; i < l; i++) {\n            var prop = dynamicProps[i];\n            var propName = prop.name;\n\n            for (var j = 0, changeLen = changes.length; j < changeLen; j++) {\n                var change = changes[j];\n\n                if (!isDataChangeByElement(change, this, propName)\n                    && (\n                        changeExprCompare(change.expr, prop.expr, this.scope)\n                        || prop.hintExpr && changeExprCompare(change.expr, prop.hintExpr, this.scope)\n                    )\n                ) {\n                    prop.handler(this.el, evalExpr(prop.expr, this.scope, this.owner), propName, this);\n                    break;\n                }\n            }\n        }\n\n        // update content\n        var htmlDirective = this.aNode.directives.html;\n        if (htmlDirective) {\n            var len = changes.length;\n            while (len--) {\n                if (changeExprCompare(changes[len].expr, htmlDirective.value, this.scope)) {\n                    // #[begin] error\n                    warnSetHTML(this.el);\n                    // #[end]\n\n                    this.el.innerHTML = evalExpr(htmlDirective.value, this.scope, this.owner);\n                    break;\n                }\n            }\n        }\n        else {\n            for (var i = 0, l = this.children.length; i < l; i++) {\n                this.children[i]._update(changes);\n            }\n        }\n    }\n};\n\n/**\n * 执行完成attached状态的行为\n */\nElement.prototype._attached = elementOwnAttached;\n\nexports = module.exports = Element;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建节点对应的 stump comment 元素\n */\n\n\n\n/**\n * 创建节点对应的 stump comment 主元素\n */\nfunction nodeOwnCreateStump() {\n    this.el = this.el || document.createComment(this.id);\n}\n\nexports = module.exports = nodeOwnCreateStump;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 销毁释放元素的子元素\n */\n\n/**\n * 销毁释放元素的子元素\n *\n * @param {Array=} children 子元素数组\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n * @param {boolean=} noTransition 是否不显示过渡动画效果\n */\nfunction elementDisposeChildren(children, noDetach, noTransition) {\n    var len = children && children.length;\n    while (len--) {\n        children[len].dispose(noDetach, noTransition);\n    }\n}\n\nexports = module.exports = elementDisposeChildren;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 简单执行销毁节点的行为\n */\n\nvar removeEl = require('../browser/remove-el');\nvar LifeCycle = require('./life-cycle');\nvar elementDisposeChildren = require('./element-dispose-children');\n\n/**\n * 简单执行销毁节点的行为\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n */\nfunction nodeOwnSimpleDispose(noDetach) {\n    elementDisposeChildren(this.children, noDetach, 1);\n\n    if (!noDetach) {\n        removeEl(this.el);\n    }\n\n    this.el = null;\n    this.owner = null;\n    this.scope = null;\n    this.children = null;\n\n    this.lifeCycle = LifeCycle.disposed;\n    if (this._ondisposed) {\n        this._ondisposed();\n    }\n}\n\nexports = module.exports = nodeOwnSimpleDispose;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 异步组件类\n */\n\nvar guid = require('../util/guid');\nvar each = require('../util/each');\nvar insertBefore = require('../browser/insert-before');\nvar nodeOwnCreateStump = require('./node-own-create-stump');\nvar nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n\n\n/**\n * 异步组件类\n *\n * @class\n * @param {Object} options 初始化参数\n * @param {Object} loader 组件加载器\n */\nfunction AsyncComponent(options, loader) {\n    this.options = options;\n    this.loader = loader;\n    this.id = guid++;\n    this.children = [];\n\n    // #[begin] reverse\n    var reverseWalker = options.reverseWalker;\n    if (reverseWalker) {\n        var PlaceholderComponent = this.loader.placeholder;\n        if (PlaceholderComponent) {\n            this.children[0] = new PlaceholderComponent(options);\n        }\n\n        this._create();\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n\n        var me = this;\n        this.loader.start(function (ComponentClass) {\n            me.onload(ComponentClass);\n        });\n    }\n    options.reverseWalker = null;\n    // #[end]\n}\n\nAsyncComponent.prototype._create = nodeOwnCreateStump;\nAsyncComponent.prototype.dispose = nodeOwnSimpleDispose;\n\n/**\n * attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nAsyncComponent.prototype.attach = function (parentEl, beforeEl) {\n    var PlaceholderComponent = this.loader.placeholder;\n    if (PlaceholderComponent) {\n        var component = new PlaceholderComponent(this.options);\n        this.children[0] = component;\n        component.attach(parentEl, beforeEl);\n    }\n\n    this._create();\n    insertBefore(this.el, parentEl, beforeEl);\n\n    var me = this;\n    this.loader.start(function (ComponentClass) {\n        me.onload(ComponentClass);\n    });\n};\n\n\n/**\n * loader加载完成，渲染组件\n *\n * @param {Function=} ComponentClass 组件类\n */\nAsyncComponent.prototype.onload = function (ComponentClass) {\n    if (this.el && ComponentClass) {\n        var component = new ComponentClass(this.options);\n        component.attach(this.el.parentNode, this.el);\n\n        var parentChildren = this.options.parent.children;\n        if (this.parentIndex == null || parentChildren[this.parentIndex] !== this) {\n            each(parentChildren, function (child, index) {\n                if (child instanceof AsyncComponent) {\n                    child.parentIndex = index;\n                }\n            });\n        }\n\n        parentChildren[this.parentIndex] = component;\n    }\n\n    this.dispose();\n};\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n */\nAsyncComponent.prototype._update = function (changes) {\n    this.children[0] && this.children[0]._update(changes);\n};\n\nexports = module.exports = AsyncComponent;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 通过组件反解创建节点的工厂方法\n */\n\nvar Element = require('./element');\nvar AsyncComponent = require('./async-component');\n\n// #[begin] reverse\n/**\n * 通过组件反解创建节点\n *\n * @param {ANode} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker} reverseWalker 子元素遍历对象\n * @return {Node}\n */\nfunction createReverseNode(aNode, parent, scope, owner, reverseWalker, componentName) {\n    if (aNode.Clazz) {\n        return new aNode.Clazz(aNode, parent, scope, owner, reverseWalker);\n    }\n\n    var ComponentOrLoader = owner.components[componentName || aNode.tagName];\n\n    if (ComponentOrLoader) {\n        return typeof ComponentOrLoader === 'function'\n            ? new ComponentOrLoader({\n                source: aNode,\n                owner: owner,\n                scope: scope,\n                parent: parent,\n                reverseWalker: reverseWalker\n            })\n            : new AsyncComponent({\n                source: aNode,\n                owner: owner,\n                scope: scope,\n                parent: parent,\n                reverseWalker: reverseWalker\n            }, ComponentOrLoader);\n    }\n\n    return new Element(aNode, parent, scope, owner, reverseWalker);\n}\n// #[end]\n\nexports = module.exports = createReverseNode;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 对元素的子节点进行反解\n */\n\n\nvar each = require('../util/each');\nvar DOMChildrenWalker = require('./dom-children-walker');\nvar createReverseNode = require('./create-reverse-node');\n\n// #[begin] reverse\n\n/**\n * 对元素的子节点进行反解\n *\n * @param {Object} element 元素\n */\nfunction reverseElementChildren(element, scope, owner) {\n    var htmlDirective = element.aNode.directives.html;\n\n    if (!htmlDirective) {\n        var reverseWalker = new DOMChildrenWalker(element.el);\n        var aNodeChildren = element.aNode.children;\n        \n        for (var i = 0, l = aNodeChildren.length; i < l; i++) {\n            element.children.push(\n                createReverseNode(aNodeChildren[i], element, scope, owner, reverseWalker)\n            );\n        }\n    }\n}\n// #[end]\n\nexports = module.exports = reverseElementChildren;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建节点的工厂方法\n */\n\nvar evalExpr = require('../runtime/eval-expr');\nvar Element = require('./element');\nvar AsyncComponent = require('./async-component');\n\n\n/**\n * 创建节点\n *\n * @param {ANode} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @return {Node}\n */\nfunction createNode(aNode, parent, scope, owner, componentName) {\n    if (aNode.Clazz) {\n        return new aNode.Clazz(aNode, parent, scope, owner);\n    }\n\n    var ComponentOrLoader = owner.components[componentName || aNode.tagName];\n\n    if (ComponentOrLoader) {\n        return typeof ComponentOrLoader === 'function'\n            ? new ComponentOrLoader({\n                source: aNode,\n                owner: owner,\n                scope: scope,\n                parent: parent\n            })\n            : new AsyncComponent({\n                source: aNode,\n                owner: owner,\n                scope: scope,\n                parent: parent\n            }, ComponentOrLoader);\n    }\n\n    aNode.Clazz = Element;\n    return new Element(aNode, parent, scope, owner);\n}\n\nexports = module.exports = createNode;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取 element 的 transition 控制对象\n */\n\nvar evalArgs = require('../runtime/eval-args');\nvar findMethod = require('../runtime/find-method');\nvar NodeType = require('./node-type');\n\n/**\n * 获取 element 的 transition 控制对象\n *\n * @param {Object} element 元素\n * @return {Object?}\n */\nfunction elementGetTransition(element) {\n    var directive = element.aNode.directives.transition;\n    var owner = element.owner;\n\n    if (element.nodeType === NodeType.CMPT) {\n        var cmptGivenTransition = element.source && element.source.directives.transition;\n        if (cmptGivenTransition) {\n            directive = cmptGivenTransition;\n        }\n        else {\n            owner = element;\n        }\n    }\n\n    var transition;\n    if (directive && owner) {\n        transition = findMethod(owner, directive.value.name);\n\n        if (typeof transition === 'function') {\n            transition = transition.apply(\n                owner,\n                evalArgs(directive.value.args, element.scope, owner)\n            );\n        }\n    }\n\n    return transition || element.transition;\n}\n\nexports = module.exports = elementGetTransition;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 将元素从页面上移除\n */\n\nvar elementGetTransition = require('./element-get-transition');\n\n/**\n * 将元素从页面上移除\n */\nfunction elementOwnDetach() {\n    var lifeCycle = this.lifeCycle;\n    if (lifeCycle.leaving) {\n        return;\n    }\n\n    if (!this.disposeNoTransition) {\n        var transition = elementGetTransition(this);\n\n        if (transition && transition.leave) {\n            if (this._toPhase) {\n                this._toPhase('leaving');\n            }\n            else {\n                this.lifeCycle = LifeCycle.leaving;\n            }\n\n            var me = this;\n            transition.leave(this.el, function () {\n                me._leave();\n            });\n\n            return;\n        }\n    }\n\n    this._leave();\n}\n\n\nexports = module.exports = elementOwnDetach;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 销毁释放元素\n */\n\n/**\n * 销毁释放元素\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n * @param {boolean=} noTransition 是否不显示过渡动画效果\n */\nfunction elementOwnDispose(noDetach, noTransition) {\n    this.leaveDispose = 1;\n    this.disposeNoDetach = noDetach;\n    this.disposeNoTransition = noTransition;\n\n    this.detach();\n}\n\nexports = module.exports = elementOwnDispose;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 为元素的 el 绑定事件\n */\n\nvar on = require('../browser/on');\n\n/**\n * 为元素的 el 绑定事件\n *\n * @param {string} name 事件名\n * @param {Function} listener 监听器\n * @param {boolean} capture 是否是捕获阶段触发\n */\nfunction elementOwnOnEl(name, listener, capture) {\n    capture = !!capture;\n    this._elFns.push([name, listener, capture]);\n    on(this.el, name, listener, capture);\n}\n\nexports = module.exports = elementOwnOnEl;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 是否浏览器环境\n */\n\nvar isBrowser = typeof window !== 'undefined';\n\nexports = module.exports = isBrowser;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 给 devtool 发通知消息\n */\n\nvar isBrowser = require('../browser/is-browser');\n\n// #[begin] devtool\nvar san4devtool;\n\n/**\n * 给 devtool 发通知消息\n *\n * @param {string} name 消息名称\n * @param {*} arg 消息参数\n */\nfunction emitDevtool(name, arg) {\n    /* istanbul ignore if */\n    if (isBrowser && san4devtool && san4devtool.debug && window.__san_devtool__) {\n        window.__san_devtool__.emit(name, arg);\n    }\n}\n\nemitDevtool.start = function (main) {\n    san4devtool = main;\n    emitDevtool('san', main);\n};\n// #[end]\n\nexports = module.exports = emitDevtool;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 开发时的警告提示\n */\n\n// #[begin] error\n/**\n * 开发时的警告提示\n *\n * @param {string} message 警告信息\n */\nfunction warn(message) {\n    message = '[SAN WARNING] ' + message;\n\n    /* eslint-disable no-console */\n    /* istanbul ignore next */\n    if (typeof console === 'object' && console.warn) {\n        console.warn(message);\n    }\n    else {\n        // 防止警告中断调用堆栈\n        setTimeout(function () {\n            throw new Error(message);\n        }, 0);\n    }\n    /* eslint-enable no-console */\n}\n// #[end]\n\nexports = module.exports = warn;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file  事件绑定不存在的 warning\n */\n\nvar each = require('../util/each');\nvar warn = require('../util/warn');\n\n// #[begin] error\n/**\n * 事件绑定不存在的 warning\n *\n * @param {Object} eventBind 事件绑定对象\n * @param {Component} owner 所属的组件对象\n */\nfunction warnEventListenMethod(eventBind, owner) {\n    var valid = true;\n    var method = owner;\n    each(eventBind.expr.name.paths, function (path) {\n        method = method[path.value];\n        valid = !!method;\n        return valid;\n    });\n\n    if (!valid) {\n        var paths = [];\n        each(eventBind.expr.name.paths, function (path) {\n            paths.push(path.value);\n        });\n\n        warn(eventBind.name + ' listen fail,\"' + paths.join('.') + '\" not exist');\n    }\n}\n// #[end]\n\nexports = module.exports = warnEventListenMethod;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 完成元素 attached 后的行为\n */\n\n\nvar empty = require('../util/empty');\nvar isBrowser = require('../browser/is-browser');\nvar trigger = require('../browser/trigger');\nvar NodeType = require('./node-type');\nvar elementGetTransition = require('./element-get-transition');\nvar getEventListener = require('./get-event-listener');\nvar warnEventListenMethod = require('./warn-event-listen-method');\n\n/**\n * 双绑输入框CompositionEnd事件监听函数\n *\n * @inner\n */\nfunction inputOnCompositionEnd() {\n    if (!this.composing) {\n        return;\n    }\n\n    this.composing = 0;\n    trigger(this, 'input');\n}\n\n/**\n * 双绑输入框CompositionStart事件监听函数\n *\n * @inner\n */\nfunction inputOnCompositionStart() {\n    this.composing = 1;\n}\n\nfunction getXPropOutputer(element, xProp, data) {\n    return function () {\n        xPropOutput(element, xProp, data);\n    };\n}\n\nfunction getInputXPropOutputer(element, xProp, data) {\n    return function () {\n        // #[begin] allua\n        /* istanbul ignore if */\n        if (element.__bkph) {\n            element.__bkph = false;\n            return;\n        }\n        // #[end]\n\n        if (!this.composing) {\n            xPropOutput(element, xProp, data);\n        }\n    };\n}\n\n// #[begin] allua\n/* istanbul ignore next */\nfunction getInputFocusXPropHandler(element, xProp, data) {\n    return function () {\n        element._inputTimer = setInterval(function () {\n            xPropOutput(element, xProp, data);\n        }, 16);\n    };\n}\n\n/* istanbul ignore next */\nfunction getInputBlurXPropHandler(element) {\n    return function () {\n        clearInterval(element._inputTimer);\n        element._inputTimer = null;\n    };\n}\n// #[end]\n\nfunction xPropOutput(element, bindInfo, data) {\n    /* istanbul ignore if */\n    if (!element.lifeCycle.created) {\n        return;\n    }\n\n    var el = element.el;\n\n    if (element.tagName === 'input' && bindInfo.name === 'checked') {\n        var bindValue = getANodeProp(element.aNode, 'value');\n        var bindType = getANodeProp(element.aNode, 'type');\n\n        if (bindValue && bindType) {\n            switch (el.type.toLowerCase()) {\n                case 'checkbox':\n                    data[el.checked ? 'push' : 'remove'](bindInfo.expr, el.value);\n                    return;\n\n                case 'radio':\n                    el.checked && data.set(bindInfo.expr, el.value, {\n                        target: {\n                            node: element,\n                            prop: bindInfo.name\n                        }\n                    });\n                    return;\n            }\n        }\n    }\n\n    data.set(bindInfo.expr, el[bindInfo.name], {\n        target: {\n            node: element,\n            prop: bindInfo.name\n        }\n    });\n}\n\n/**\n * 完成元素 attached 后的行为\n *\n * @param {Object} element 元素节点\n */\nfunction elementOwnAttached() {\n    if (this._rootNode) {\n        return;\n    }\n\n    var isComponent = this.nodeType === NodeType.CMPT;\n    var data = isComponent ? this.data : this.scope;\n\n    /* eslint-disable no-redeclare */\n\n    // 处理自身变化时双向绑定的逻辑\n    var xProps = this.aNode.hotspot.xProps;\n    for (var i = 0, l = xProps.length; i < l; i++) {\n        var xProp = xProps[i];\n\n        switch (xProp.name) {\n            case 'value':\n                switch (this.tagName) {\n                    case 'input':\n                    case 'textarea':\n                        if (isBrowser && window.CompositionEvent) {\n                            this._onEl('change', inputOnCompositionEnd);\n                            this._onEl('compositionstart', inputOnCompositionStart);\n                            this._onEl('compositionend', inputOnCompositionEnd);\n                        }\n\n                        // #[begin] allua\n                        /* istanbul ignore else */\n                        if ('oninput' in this.el) {\n                        // #[end]\n                            this._onEl('input', getInputXPropOutputer(this, xProp, data));\n                        // #[begin] allua\n                        }\n                        else {\n                            this._onEl('focusin', getInputFocusXPropHandler(this, xProp, data));\n                            this._onEl('focusout', getInputBlurXPropHandler(this));\n                        }\n                        // #[end]\n\n                        break;\n\n                    case 'select':\n                        this._onEl('change', getXPropOutputer(this, xProp, data));\n                        break;\n                }\n                break;\n\n            case 'checked':\n                switch (this.tagName) {\n                    case 'input':\n                        switch (this.el.type) {\n                            case 'checkbox':\n                            case 'radio':\n                                this._onEl('click', getXPropOutputer(this, xProp, data));\n                        }\n                }\n                break;\n        }\n    }\n\n    var owner = isComponent ? this : this.owner;\n    for (var i = 0, l = this.aNode.events.length; i < l; i++) {\n        var eventBind = this.aNode.events[i];\n\n        // #[begin] error\n        warnEventListenMethod(eventBind, owner);\n        // #[end]\n\n        this._onEl(\n            eventBind.name,\n            getEventListener(eventBind, owner, data, eventBind.modifier),\n            eventBind.modifier.capture\n        );\n    }\n\n    if (isComponent) {\n        for (var i = 0, l = this.nativeEvents.length; i < l; i++) {\n            var eventBind = this.nativeEvents[i];\n\n            // #[begin] error\n            warnEventListenMethod(eventBind, this.owner);\n            // #[end]\n\n            this._onEl(\n                eventBind.name,\n                getEventListener(eventBind, this.owner, this.scope),\n                eventBind.modifier.capture\n            );\n        }\n    }\n\n    var transition = elementGetTransition(this);\n    if (transition && transition.enter) {\n        transition.enter(this.el, empty);\n    }\n}\n\nexports = module.exports = elementOwnAttached;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 初始化节点的 s-bind 数据\n */\n\n\nvar evalExpr = require('../runtime/eval-expr');\n\n/**\n * 初始化节点的 s-bind 数据\n *\n * @param {Object} sBind bind指令对象\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @return {boolean}\n */\nfunction nodeSBindInit(sBind, scope, owner) {\n    if (sBind && scope) {\n        return evalExpr(sBind.value, scope, owner);\n    }\n}\n\nexports = module.exports = nodeSBindInit;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 计算两个对象 key 的并集\n */\n\n/**\n * 计算两个对象 key 的并集\n *\n * @param {Object} obj1 目标对象\n * @param {Object} obj2 源对象\n * @return {Array}\n */\nfunction unionKeys(obj1, obj2) {\n    var result = [];\n    var key;\n\n    for (key in obj1) {\n        /* istanbul ignore else  */\n        if (obj1.hasOwnProperty(key)) {\n            result.push(key);\n        }\n    }\n\n    for (key in obj2) {\n        /* istanbul ignore else  */\n        if (obj2.hasOwnProperty(key)) {\n            !obj1[key] && result.push(key);\n        }\n    }\n\n    return result;\n}\n\nexports = module.exports = unionKeys;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 更新节点的 s-bind 数据\n */\n\nvar unionKeys = require('../util/union-keys');\nvar evalExpr = require('../runtime/eval-expr');\nvar changeExprCompare = require('../runtime/change-expr-compare');\n\n/**\n * 更新节点的 s-bind 数据\n *\n * @param {Object} sBind bind指令对象\n * @param {Object} oldBindData 当前s-bind数据\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {Array} changes 变更数组\n * @param {Function} updater 绑定对象子项变更的更新函数\n */\nfunction nodeSBindUpdate(sBind, oldBindData, scope, owner, changes, updater) {\n    if (sBind) {\n        var len = changes.length;\n\n        while (len--) {\n            if (changeExprCompare(changes[len].expr, sBind.value, scope)) {\n                var newBindData = evalExpr(sBind.value, scope, owner);\n                var keys = unionKeys(newBindData, oldBindData);\n\n                for (var i = 0, l = keys.length; i < l; i++) {\n                    var key = keys[i];\n                    var value = newBindData[key];\n\n                    if (value !== oldBindData[key]) {\n                        updater(key, value);\n                    }\n                }\n\n                return newBindData;\n            }\n\n        }\n\n        return oldBindData;\n    }\n}\n\nexports = module.exports = nodeSBindUpdate;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file  获取节点 stump 的 comment\n */\n\nvar noSetHTML = require('../browser/no-set-html');\nvar warn = require('../util/warn');\n\n// #[begin] error\n/**\n * 获取节点 stump 的 comment\n *\n * @param {HTMLElement} el HTML元素\n */\nfunction warnSetHTML(el) {\n    // dont warn if not in browser runtime\n    /* istanbul ignore if */\n    if (!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document)) {\n        return;\n    }\n\n    // some html elements cannot set innerHTML in old ie\n    // see: https://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx\n    if (noSetHTML(el)) {\n        warn('set html for element \"' + el.tagName + '\" may cause an error in old IE');\n    }\n}\n// #[end]\n\nexports = module.exports = warnSetHTML;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断元素是否不允许设置HTML\n */\n\n// some html elements cannot set innerHTML in old ie\n// see: https://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx\n\n/**\n * 判断元素是否不允许设置HTML\n *\n * @param {HTMLElement} el 要判断的元素\n * @return {boolean}\n */\nfunction noSetHTML(el) {\n    return /^(col|colgroup|frameset|style|table|tbody|tfoot|thead|tr|select)$/i.test(el.tagName);\n}\n\nexports = module.exports = noSetHTML;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 获取节点在组件树中的路径\n */\n\n\nvar NodeType = require('./node-type');\n\n// #[begin] reverse\n/**\n * 获取节点在组件树中的路径\n *\n * @param {Node} node 节点对象\n * @return {Array}\n */\n/* istanbul ignore next */\nfunction getNodePath(node) {\n    var nodePaths = [];\n    var nodeParent = node;\n    while (nodeParent) {\n        switch (nodeParent.nodeType) {\n            case NodeType.ELEM:\n                nodePaths.unshift(nodeParent.tagName);\n                break;\n\n            case NodeType.IF:\n                nodePaths.unshift('if');\n                break;\n\n            case NodeType.FOR:\n                nodePaths.unshift('for[' + nodeParent.aNode.directives['for'].item + ']'); // eslint-disable-line dot-notation\n                break;\n\n            case NodeType.SLOT:\n                nodePaths.unshift('slot[' + (nodeParent.name || 'default') + ']');\n                break;\n\n            case NodeType.TPL:\n                nodePaths.unshift('template');\n                break;\n\n            case NodeType.CMPT:\n                nodePaths.unshift('component[' + (nodeParent.source ? nodeParent.source.tagName : 'root') + ']');\n                break;\n\n            case NodeType.TEXT:\n                nodePaths.unshift('text');\n                break;\n        }\n\n        nodeParent = nodeParent.parent;\n    }\n\n    return nodePaths;\n}\n// #[end]\n\nexports = module.exports = getNodePath;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解压缩 ANode\n */\n\nvar ExprType = require('./expr-type');\n\n/**\n * 解压缩 ANode\n *\n * @param {Array} packed ANode压缩数据\n * @return {Object}\n */\nfunction unpackANode(packed) {\n    var root;\n    var nodeStack = [];\n    var typeStack = [];\n    var stateStack = [];\n    var targetStack = [];\n    var stackIndex = -1;\n\n    for (var i = 0, l = packed.length; i < l; i++) {\n        var current = nodeStack[stackIndex];\n        var currentType = typeStack[stackIndex];\n        var currentState = stateStack[stackIndex];\n        var currentTarget = targetStack[stackIndex];\n\n        while (current) {\n            if (currentState === -3) {\n                currentState = stateStack[stackIndex] = packed[i++] || -1;\n            }\n\n            if (currentState === -1) {\n                current = nodeStack[--stackIndex];\n                currentType = typeStack[stackIndex];\n                currentState = stateStack[stackIndex];\n                currentTarget = targetStack[stackIndex];\n            }\n            else {\n                break;\n            }\n        }\n            \n        var type = packed[i];\n        var node;\n        var state = -1;\n        var target = false;\n\n        switch (type) {\n            // Node: Tag\n            case 1:\n                node = {\n                    directives: {},\n                    props: [],\n                    events: [],\n                    children: []\n                };\n                var tagName = packed[++i];\n                tagName && (node.tagName = tagName);\n                state = packed[++i] || -1;\n                break;\n\n            case 3:\n                node = {\n                    type: ExprType.STRING,\n                    value: packed[++i]\n                };\n                break;\n\n            case 4:\n                node = {\n                    type: ExprType.NUMBER,\n                    value: packed[++i]\n                };\n                break;\n\n            case 5:\n                node = {\n                    type: ExprType.BOOL,\n                    value: !!packed[++i]\n                };\n                break;\n                \n            case 19:\n                node = {\n                    type: ExprType.NULL\n                };\n                break;\n\n            case 6:\n                target = [];\n                node = {\n                    type: ExprType.ACCESSOR,\n                    paths: target\n                };\n                state = packed[++i] || -1;\n                break;\n\n            case 7:\n                target = [];\n                node = {\n                    type: ExprType.INTERP,\n                    filters: target\n                };\n                packed[++i] && (node.original = 1);\n                state = -2;\n                break;\n                \n            case 8:\n                target = [];\n                node = {\n                    type: ExprType.CALL,\n                    args: target\n                };\n                state = -2;\n                break;\n\n            case 9:\n                target = [];\n                node = {\n                    type: ExprType.TEXT,\n                    segs: target\n                };\n\n                packed[++i] && (node.original = 1);\n                state = packed[++i] || -1;\n                break;\n\n            case 10:\n                target = [];\n                node = {\n                    type: ExprType.BINARY,\n                    operator: packed[++i],\n                    segs: target\n                };\n                state = 2;\n                break;\n\n            case 11:\n                node = {\n                    type: ExprType.UNARY,\n                    operator: packed[++i]\n                };\n                state = -2;\n                break;\n\n            case 12:\n                target = [];\n                node = {\n                    type: ExprType.TERTIARY,\n                    segs: target\n                };\n                state = 3;\n                break;\n\n            case 13:\n                target = [];\n                node = {\n                    type: ExprType.OBJECT,\n                    items: target\n                };\n                state = packed[++i] || -1;\n                break;\n\n            case 14:\n                node = {};\n                state = -2;\n                break;\n\n            case 15:\n                node = {spread: true};\n                state = -2;\n                break;\n\n            case 16:\n                target = [];\n                node = {\n                    type: ExprType.ARRAY,\n                    items: target\n                };\n                state = packed[++i] || -1;\n                break;\n\n            case 17:\n            case 18:\n                node = type === 18 ? {spread: true} : {};\n                state = -2;\n                break;\n\n            case 2:\n            case 33:\n            case 34:\n                node = {\n                    name: packed[++i]\n                };\n                (type === 33) && (node.noValue = 1);\n                (type === 34) && (node.x = 1);\n                state = -2;\n                break;\n\n            case 35:\n                node = {\n                    name: packed[++i],\n                    modifier: {}\n                };\n                state = -2;\n                break;\n\n            case 36:\n                node = {\n                    name: packed[++i]\n                };\n                state = -2;\n                break;\n\n            case 37:\n                node = {\n                    item: packed[++i]\n                };\n\n                var forIndex = packed[++i];\n                forIndex && (node.index = forIndex);\n\n                var trackBy = packed[++i];\n                if (trackBy) {\n                    node.trackByRaw = trackBy;\n                    node.trackBy = parseExpr(trackBy);\n                }\n\n                state = -2;\n                break;\n            \n            case 38:\n            case 39:\n            case 41:\n            case 42:\n            case 43:\n            case 44:\n            case 45:\n                node = {};\n                state = -2;\n                break;\n\n            // else\n            case 40:\n                node = {value: {}};\n                break;\n\n            // Node: Text\n            // Event modifier\n            default:\n                if (!type) {\n                    node = {};\n                    state = -2;\n                }\n\n        }\n\n        if (!root) {\n            root = node;\n        }\n\n        if (current) {\n\n            switch (currentType) {\n                // Node: Tag\n                case 1:\n                    if (currentTarget) {\n                        current.elses = current.elses || [];\n                        current.elses.push(node);\n                        if (!(--stateStack[stackIndex])) {\n                            stackIndex--;\n                        }\n                    }\n                    else {\n                        switch (type) {\n                            case 2:\n                            case 33:\n                            case 34:\n                                current.props.push(node);\n                                break;\n                            \n                            case 35:\n                                current.events.push(node);\n                                break;\n\n                            case 36:\n                                current.vars = current.vars || [];\n                                current.vars.push(node);\n                                break;\n\n                            case 37:\n                                current.directives['for'] = node;\n                                break;\n\n                            case 38:\n                                current.directives['if'] = node;\n                                break;\n\n                            case 39:\n                                current.directives.elif = node;\n                                break;\n\n                            case 40:\n                                current.directives['else'] = node;\n                                break;\n\n                            case 41:\n                                current.directives.ref = node;\n                                break;\n                            \n                            case 42:\n                                current.directives.bind = node;\n                                break;\n\n                            case 43:\n                                current.directives.html = node;\n                                break;\n\n                            case 44:\n                                current.directives.transition = node;\n                                break;\n\n                            case 45:\n                                current.directives.is = node;\n                                break;\n\n                            case 1:\n                            default:\n                                current.children.push(node);\n                        }\n\n                        if (!(--stateStack[stackIndex])) {\n                            if (current.directives['if']) {\n                                targetStack[stackIndex] = 'elses';\n                                stateStack[stackIndex] = -3;\n                            }\n                            else {\n                                stackIndex--;\n                            }\n                        }\n                    }\n                    break;\n\n                // Expr: Interp\n                case 7:\n                    if (currentState === -2) {\n                        stateStack[stackIndex] = -3;\n                        current.expr = node;\n                    }\n                    else {\n                        currentTarget.push(node);\n                        if (!(--stateStack[stackIndex])) {\n                            stackIndex--;\n                        }\n                    }\n                    break;\n\n                // Expr: CALL\n                case 8:\n                    if (currentState === -2) {\n                        stateStack[stackIndex] = -3;\n                        current.name = node;\n                    }\n                    else {\n                        currentTarget.push(node);\n                        if (!(--stateStack[stackIndex])) {\n                            stackIndex--;\n                        }\n                    }\n                    break;\n                \n                // Expr: ACCESSOR, TEXT, BINARY, TERTIARY, OBJECT, ARRAY\n                case 6:\n                case 9:\n                case 10:\n                case 12:\n                case 13:\n                case 16:\n                    currentTarget.push(node);\n                    if (!(--stateStack[stackIndex])) {\n                        stackIndex--;\n                    }\n                    break;\n                \n                // Expr: UNARY\n                // Prop\n                // var\n                // Object Spread Item, Array Item\n                case 11:\n                case 2:\n                case 33:\n                case 34:\n                case 36:\n                case 15:\n                case 17:\n                case 18:\n                    current.expr = node;\n                    stackIndex--;\n                    break;\n\n\n                // Expr: Object Item\n                case 14:\n                    if (currentState === -2) {\n                        stateStack[stackIndex] = -4;\n                        current.name = node;\n                    }\n                    else {\n                        current.expr = node;\n                        stackIndex--;\n                    }\n                    break;\n\n                // Event\n                case 35:\n                    if (currentState === -2) {\n                        stateStack[stackIndex] = -3;\n                        current.expr = node;\n                    }\n                    else {\n                        current.modifier[type] = true;\n                        if (!(--stateStack[stackIndex])) {\n                            stackIndex--;\n                        }\n                    }\n                    break;\n\n                // Directive: for, if, elif, ref, bind, html, transition, is\n                case 37:\n                case 38:\n                case 39:\n                case 41:\n                case 42:\n                case 43:\n                case 44:\n                case 45:\n                    current.value = node;\n                    stackIndex--;\n                    break;\n\n                // Node: Text\n                default:\n                    current.textExpr = node;\n                    stackIndex--;\n            }\n        }\n\n        if (state !== -1) {\n            nodeStack[++stackIndex] = node;\n            typeStack[stackIndex] = type;\n            stateStack[stackIndex] = state;\n            targetStack[stackIndex] = target;\n        }\n    }\n\n    return root;\n}\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 组件类\n */\n\nvar bind = require('../util/bind');\nvar each = require('../util/each');\nvar guid = require('../util/guid');\nvar extend = require('../util/extend');\nvar nextTick = require('../util/next-tick');\nvar emitDevtool = require('../util/emit-devtool');\nvar ExprType = require('../parser/expr-type');\nvar parseExpr = require('../parser/parse-expr');\nvar parseTemplate = require('../parser/parse-template');\nvar createAccessor = require('../parser/create-accessor');\nvar unpackANode = require('../parser/unpack-anode');\nvar removeEl = require('../browser/remove-el');\nvar Data = require('../runtime/data');\nvar evalExpr = require('../runtime/eval-expr');\nvar changeExprCompare = require('../runtime/change-expr-compare');\nvar DataChangeType = require('../runtime/data-change-type');\nvar insertBefore = require('../browser/insert-before');\nvar un = require('../browser/un');\nvar defineComponent = require('./define-component');\nvar ComponentLoader = require('./component-loader');\nvar createNode = require('./create-node');\nvar parseComponentTemplate = require('./parse-component-template');\nvar preheatANode = require('./preheat-a-node');\nvar LifeCycle = require('./life-cycle');\nvar getANodeProp = require('./get-a-node-prop');\nvar isDataChangeByElement = require('./is-data-change-by-element');\nvar getEventListener = require('./get-event-listener');\nvar reverseElementChildren = require('./reverse-element-children');\nvar NodeType = require('./node-type');\nvar nodeSBindInit = require('./node-s-bind-init');\nvar nodeSBindUpdate = require('./node-s-bind-update');\nvar elementOwnAttached = require('./element-own-attached');\nvar elementOwnOnEl = require('./element-own-on-el');\nvar elementOwnDetach = require('./element-own-detach');\nvar elementOwnDispose = require('./element-own-dispose');\nvar warnEventListenMethod = require('./warn-event-listen-method');\nvar elementDisposeChildren = require('./element-dispose-children');\nvar createDataTypesChecker = require('../util/create-data-types-checker');\nvar warn = require('../util/warn');\n\n\n\n/**\n * 组件类\n *\n * @class\n * @param {Object} options 初始化参数\n */\nfunction Component(options) { // eslint-disable-line\n    // #[begin] error\n    for (var key in Component.prototype) {\n        if (this[key] !== Component.prototype[key]) {\n            /* eslint-disable max-len */\n            warn('\\`' + key + '\\` is a reserved key of san components. Overriding this property may cause unknown exceptions.');\n            /* eslint-enable max-len */\n        }\n    }\n    // #[end]\n\n\n    options = options || {};\n\n    this.lifeCycle = LifeCycle.start;\n    this.children = [];\n    this._elFns = [];\n    this.listeners = {};\n    this.slotChildren = [];\n    this.implicitChildren = [];\n\n    var clazz = this.constructor;\n\n    this.filters = this.filters || clazz.filters || {};\n    this.computed = this.computed || clazz.computed || {};\n    this.messages = this.messages || clazz.messages || {};\n\n    if (options.transition) {\n        this.transition = options.transition;\n    }\n\n\n    this.id = guid++;\n\n    // #[begin] devtool\n    this._toPhase('beforeCompile');\n    // #[end]\n\n    var proto = clazz.prototype;\n\n    // pre define components class\n    /* istanbul ignore else  */\n    if (!proto.hasOwnProperty('_cmptReady')) {\n        proto.components = clazz.components || proto.components || {};\n        var components = proto.components;\n\n        for (var key in components) { // eslint-disable-line\n            var cmptClass = components[key];\n            if (typeof cmptClass === 'object' && !(cmptClass instanceof ComponentLoader)) {\n                components[key] = defineComponent(cmptClass);\n            }\n            else if (cmptClass === 'self') {\n                components[key] = clazz;\n            }\n        }\n\n        proto._cmptReady = 1;\n    }\n\n    // compile\n    if (!proto.hasOwnProperty('aNode')) {\n        var aPack = clazz.aPack || proto.hasOwnProperty('aPack') && proto.aPack;\n        if (aPack) {\n            proto.aNode = unpackANode(aPack);\n            clazz.aPack = proto.aPack = null;\n        }\n        else {\n            proto.aNode = parseComponentTemplate(clazz);\n        }\n    }\n\n    preheatANode(proto.aNode, this);\n\n    this.tagName = proto.aNode.tagName;\n    this.source = typeof options.source === 'string'\n        ? parseTemplate(options.source).children[0]\n        : options.source;\n\n    preheatANode(this.source);\n\n\n\n    this.sourceSlotNameProps = [];\n    this.sourceSlots = {\n        named: {}\n    };\n\n    this.owner = options.owner;\n    this.scope = options.scope;\n    this.el = options.el;\n\n    var parent = options.parent;\n    if (parent) {\n        this.parent = parent;\n        this.parentComponent = parent.nodeType === NodeType.CMPT\n            ? parent\n            : parent && parent.parentComponent;\n    }\n    else if (this.owner) {\n        this.parentComponent = this.owner;\n        this.scope = this.owner.data;\n    }\n\n    // #[begin] reverse\n    // 组件反解，读取注入的组件数据\n    if (this.el) {\n        var firstCommentNode = this.el.firstChild;\n        if (firstCommentNode && firstCommentNode.nodeType === 3) {\n            firstCommentNode = firstCommentNode.nextSibling;\n        }\n\n        if (firstCommentNode && firstCommentNode.nodeType === 8) {\n            var stumpMatch = firstCommentNode.data.match(/^\\s*s-data:([\\s\\S]+)?$/);\n            if (stumpMatch) {\n                var stumpText = stumpMatch[1];\n\n                // fill component data\n                options.data = (new Function('return '\n                    + stumpText\n                        .replace(/^[\\s\\n]*/, '')\n                        .replace(\n                            /\"(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})\\.\\d+Z\"/g,\n                            function (match, y, mon, d, h, m, s) {\n                                return 'new Date(' + (+y) + ',' + (+mon) + ',' + (+d)\n                                    + ',' + (+h) + ',' + (+m) + ',' + (+s) + ')';\n                            }\n                        )\n                ))();\n\n                if (firstCommentNode.previousSibling) {\n                    removeEl(firstCommentNode.previousSibling);\n                }\n                removeEl(firstCommentNode);\n            }\n        }\n    }\n    // #[end]\n\n    // native事件数组\n    this.nativeEvents = [];\n\n    if (this.source) {\n        // 组件运行时传入的结构，做slot解析\n        this._initSourceSlots(1);\n\n        for (var i = 0, l = this.source.events.length; i < l; i++) {\n            var eventBind = this.source.events[i];\n            // 保存当前实例的native事件，下面创建aNode时候做合并\n            if (eventBind.modifier.native) {\n                this.nativeEvents.push(eventBind);\n            }\n            else {\n                // #[begin] error\n                warnEventListenMethod(eventBind, options.owner);\n                // #[end]\n\n                this.on(\n                    eventBind.name,\n                    getEventListener(eventBind, options.owner, this.scope, 1),\n                    eventBind\n                );\n            }\n        }\n\n        this.tagName = this.tagName || this.source.tagName;\n        this.binds = this.source.hotspot.binds;\n\n        // init s-bind data\n        this._srcSbindData = nodeSBindInit(this.source.directives.bind, this.scope, this.owner);\n    }\n\n    this._toPhase('compiled');\n\n\n    // #[begin] devtool\n    this._toPhase('beforeInit');\n    // #[end]\n\n    // init data\n    var initData = extend(\n        typeof this.initData === 'function' && this.initData() || {},\n        options.data || this._srcSbindData\n    );\n\n    if (this.binds && this.scope) {\n        for (var i = 0, l = this.binds.length; i < l; i++) {\n            var bindInfo = this.binds[i];\n\n            var value = evalExpr(bindInfo.expr, this.scope, this.owner);\n            if (typeof value !== 'undefined') {\n                // See: https://github.com/ecomfe/san/issues/191\n                initData[bindInfo.name] = value;\n            }\n        }\n    }\n\n    this.data = new Data(initData);\n\n    this.tagName = this.tagName || 'div';\n    // #[begin] allua\n    // ie8- 不支持innerHTML输出自定义标签\n    /* istanbul ignore if */\n    if (ieOldThan9 && this.tagName.indexOf('-') > 0) {\n        this.tagName = 'div';\n    }\n    // #[end]\n\n\n    // #[begin] error\n    // 在初始化 + 数据绑定后，开始数据校验\n    // NOTE: 只在开发版本中进行属性校验\n    var dataTypes = this.dataTypes || clazz.dataTypes;\n    if (dataTypes) {\n        var dataTypeChecker = createDataTypesChecker(\n            dataTypes,\n            this.name || clazz.name\n        );\n        this.data.setTypeChecker(dataTypeChecker);\n        this.data.checkDataTypes();\n    }\n    // #[end]\n\n    this.computedDeps = {};\n    for (var expr in this.computed) {\n        if (this.computed.hasOwnProperty(expr) && !this.computedDeps[expr]) {\n            this._calcComputed(expr);\n        }\n    }\n\n    this._initDataChanger();\n    this._sbindData = nodeSBindInit(this.aNode.directives.bind, this.data, this);\n    this._toPhase('inited');\n\n    // #[begin] reverse\n    var reverseWalker = options.reverseWalker;\n    if (this.el || reverseWalker) {\n        var RootComponentType = this.components[this.aNode.tagName];\n\n        if (reverseWalker && (this.aNode.hotspot.hasRootNode || RootComponentType)) {\n            this._rootNode = createReverseNode(this.aNode, this, this.data, this, reverseWalker);\n            this._rootNode._getElAsRootNode && (this.el = this._rootNode._getElAsRootNode());\n        }\n        else if (this.el && RootComponentType) {\n            this._rootNode = new RootComponentType({\n                source: this.aNode,\n                owner: this,\n                scope: this.data,\n                parent: this,\n                el: this.el\n            });\n        }\n        else {\n            if (reverseWalker) {\n                var currentNode = reverseWalker.current;\n                if (currentNode && currentNode.nodeType === 1) {\n                    this.el = currentNode;\n                    reverseWalker.goNext();\n                }\n            }\n\n            reverseElementChildren(this, this.data, this);\n        }\n\n        this._toPhase('created');\n        this._attached();\n        this._toPhase('attached');\n    }\n    // #[end]\n}\n\n\n/**\n * 初始化创建组件外部传入的插槽对象\n *\n * @protected\n * @param {boolean} isFirstTime 是否初次对sourceSlots进行计算\n */\nComponent.prototype._initSourceSlots = function (isFirstTime) {\n    this.sourceSlots.named = {};\n\n    // 组件运行时传入的结构，做slot解析\n    if (this.source && this.scope) {\n        var sourceChildren = this.source.children;\n\n        for (var i = 0, l = sourceChildren.length; i < l; i++) {\n            var child = sourceChildren[i];\n            var target;\n\n            var slotBind = !child.textExpr && getANodeProp(child, 'slot');\n            if (slotBind) {\n                isFirstTime && this.sourceSlotNameProps.push(slotBind);\n\n                var slotName = evalExpr(slotBind.expr, this.scope, this.owner);\n                target = this.sourceSlots.named[slotName];\n                if (!target) {\n                    target = this.sourceSlots.named[slotName] = [];\n                }\n                target.push(child);\n            }\n            else if (isFirstTime) {\n                target = this.sourceSlots.noname;\n                if (!target) {\n                    target = this.sourceSlots.noname = [];\n                }\n                target.push(child);\n            }\n        }\n    }\n};\n\n/**\n * 类型标识\n *\n * @type {string}\n */\nComponent.prototype.nodeType = NodeType.CMPT;\n\n/**\n * 在下一个更新周期运行函数\n *\n * @param {Function} fn 要运行的函数\n */\nComponent.prototype.nextTick = nextTick;\n\nComponent.prototype._ctx = (new Date()).getTime().toString(16);\n\n/* eslint-disable operator-linebreak */\n/**\n * 使节点到达相应的生命周期\n *\n * @protected\n * @param {string} name 生命周期名称\n */\nComponent.prototype._callHook =\nComponent.prototype._toPhase = function (name) {\n    if (!this.lifeCycle[name]) {\n        this.lifeCycle = LifeCycle[name] || this.lifeCycle;\n        if (typeof this[name] === 'function') {\n            this[name]();\n        }\n\n        this._afterLife = this.lifeCycle;\n\n        // 通知devtool\n        // #[begin] devtool\n        emitDevtool('comp-' + name, this);\n        // #[end]\n    }\n};\n/* eslint-enable operator-linebreak */\n\n\n/**\n * 添加事件监听器\n *\n * @param {string} name 事件名\n * @param {Function} listener 监听器\n * @param {string?} declaration 声明式\n */\nComponent.prototype.on = function (name, listener, declaration) {\n    if (typeof listener === 'function') {\n        if (!this.listeners[name]) {\n            this.listeners[name] = [];\n        }\n        this.listeners[name].push({fn: listener, declaration: declaration});\n    }\n};\n\n/**\n * 移除事件监听器\n *\n * @param {string} name 事件名\n * @param {Function=} listener 监听器\n */\nComponent.prototype.un = function (name, listener) {\n    var nameListeners = this.listeners[name];\n    var len = nameListeners && nameListeners.length;\n\n    while (len--) {\n        if (!listener || listener === nameListeners[len].fn) {\n            nameListeners.splice(len, 1);\n        }\n    }\n};\n\n\n/**\n * 派发事件\n *\n * @param {string} name 事件名\n * @param {Object} event 事件对象\n */\nComponent.prototype.fire = function (name, event) {\n    var me = this;\n    // #[begin] devtool\n    emitDevtool('comp-event', {\n        name: name,\n        event: event,\n        target: this\n    });\n    // #[end]\n\n    each(this.listeners[name], function (listener) {\n        listener.fn.call(me, event);\n    });\n};\n\n/**\n * 计算 computed 属性的值\n *\n * @private\n * @param {string} computedExpr computed表达式串\n */\nComponent.prototype._calcComputed = function (computedExpr) {\n    var computedDeps = this.computedDeps[computedExpr];\n    if (!computedDeps) {\n        computedDeps = this.computedDeps[computedExpr] = {};\n    }\n\n    var me = this;\n    this.data.set(computedExpr, this.computed[computedExpr].call({\n        data: {\n            get: function (expr) {\n                // #[begin] error\n                if (!expr) {\n                    throw new Error('[SAN ERROR] call get method in computed need argument');\n                }\n                // #[end]\n\n                if (!computedDeps[expr]) {\n                    computedDeps[expr] = 1;\n\n                    if (me.computed[expr] && !me.computedDeps[expr]) {\n                        me._calcComputed(expr);\n                    }\n\n                    me.watch(expr, function () {\n                        me._calcComputed(computedExpr);\n                    });\n                }\n\n                return me.data.get(expr);\n            }\n        }\n    }));\n};\n\n/**\n * 派发消息\n * 组件可以派发消息，消息将沿着组件树向上传递，直到遇上第一个处理消息的组件\n *\n * @param {string} name 消息名称\n * @param {*?} value 消息值\n */\nComponent.prototype.dispatch = function (name, value) {\n    var parentComponent = this.parentComponent;\n\n    while (parentComponent) {\n        var handler = parentComponent.messages[name] || parentComponent.messages['*'];\n        if (typeof handler === 'function') {\n            // #[begin] devtool\n            emitDevtool('comp-message', {\n                target: this,\n                value: value,\n                name: name,\n                receiver: parentComponent\n            });\n            // #[end]\n\n            handler.call(\n                parentComponent,\n                {target: this, value: value, name: name}\n            );\n            return;\n        }\n\n        parentComponent = parentComponent.parentComponent;\n    }\n\n    // #[begin] devtool\n    emitDevtool('comp-message', {target: this, value: value, name: name});\n    // #[end]\n};\n\n/**\n * 获取组件内部的 slot\n *\n * @param {string=} name slot名称，空为default slot\n * @return {Array}\n */\nComponent.prototype.slot = function (name) {\n    var result = [];\n    var me = this;\n\n    function childrenTraversal(children) {\n        each(children, function (child) {\n            if (child.nodeType === NodeType.SLOT && child.owner === me) {\n                if (child.isNamed && child.name === name\n                    || !child.isNamed && !name\n                ) {\n                    result.push(child);\n                }\n            }\n            else {\n                childrenTraversal(child.children);\n            }\n        });\n    }\n\n    childrenTraversal(this.children);\n    return result;\n};\n\n/**\n * 获取带有 san-ref 指令的子组件引用\n *\n * @param {string} name 子组件的引用名\n * @return {Component}\n */\nComponent.prototype.ref = function (name) {\n    var refTarget;\n    var owner = this;\n\n    function childrenTraversal(children) {\n        if (children) {\n            for (var i = 0, l = children.length; i < l; i++) {\n                elementTraversal(children[i]);\n                if (refTarget) {\n                    return;\n                }\n            }\n        }\n    }\n\n    function elementTraversal(element) {\n        var nodeType = element.nodeType;\n        if (nodeType === NodeType.TEXT) {\n            return;\n        }\n\n        if (element.owner === owner) {\n            var ref;\n            switch (element.nodeType) {\n                case NodeType.ELEM:\n                    ref = element.aNode.directives.ref;\n                    if (ref && evalExpr(ref.value, element.scope, owner) === name) {\n                        refTarget = element.el;\n                    }\n                    break;\n\n                case NodeType.CMPT:\n                    ref = element.source.directives.ref;\n                    if (ref && evalExpr(ref.value, element.scope, owner) === name) {\n                        refTarget = element;\n                    }\n            }\n\n            if (refTarget) {\n                return;\n            }\n\n            childrenTraversal(element.slotChildren);\n        }\n\n        if (refTarget) {\n            return;\n        }\n\n        childrenTraversal(element.children);\n    }\n\n    this._rootNode ? elementTraversal(this._rootNode) : childrenTraversal(this.children);\n\n    return refTarget;\n};\n\n\n/**\n * 视图更新函数\n *\n * @param {Array?} changes 数据变化信息\n */\nComponent.prototype._update = function (changes) {\n    if (this.lifeCycle.disposed) {\n        return;\n    }\n\n    var me = this;\n\n\n    var needReloadForSlot = false;\n    this._notifyNeedReload = function () {\n        needReloadForSlot = true;\n    };\n\n    if (changes) {\n        if (this.source) {\n            this._srcSbindData = nodeSBindUpdate(\n                this.source.directives.bind,\n                this._srcSbindData,\n                this.scope,\n                this.owner,\n                changes,\n                function (name, value) {\n                    if (name in me.source.hotspot.props) {\n                        return;\n                    }\n\n                    me.data.set(name, value, {\n                        target: {\n                            node: me.owner\n                        }\n                    });\n                }\n            );\n        }\n\n        each(changes, function (change) {\n            var changeExpr = change.expr;\n\n            each(me.binds, function (bindItem) {\n                var relation;\n                var setExpr = bindItem.name;\n                var updateExpr = bindItem.expr;\n\n                if (!isDataChangeByElement(change, me, setExpr)\n                    && (relation = changeExprCompare(changeExpr, updateExpr, me.scope))\n                ) {\n                    if (relation > 2) {\n                        setExpr = createAccessor(\n                            [\n                                {\n                                    type: ExprType.STRING,\n                                    value: setExpr\n                                }\n                            ].concat(changeExpr.paths.slice(updateExpr.paths.length))\n                        );\n                        updateExpr = changeExpr;\n                    }\n\n                    if (relation >= 2 && change.type === DataChangeType.SPLICE) {\n                        me.data.splice(setExpr, [change.index, change.deleteCount].concat(change.insertions), {\n                            target: {\n                                node: me.owner\n                            }\n                        });\n                    }\n                    else {\n                        me.data.set(setExpr, evalExpr(updateExpr, me.scope, me.owner), {\n                            target: {\n                                node: me.owner\n                            }\n                        });\n                    }\n                }\n            });\n\n            each(me.sourceSlotNameProps, function (bindItem) {\n                needReloadForSlot = needReloadForSlot || changeExprCompare(changeExpr, bindItem.expr, me.scope);\n                return !needReloadForSlot;\n            });\n        });\n\n        if (needReloadForSlot) {\n            this._initSourceSlots();\n            this._repaintChildren();\n        }\n        else {\n            var slotChildrenLen = this.slotChildren.length;\n            while (slotChildrenLen--) {\n                var slotChild = this.slotChildren[slotChildrenLen];\n\n                if (slotChild.lifeCycle.disposed) {\n                    this.slotChildren.splice(slotChildrenLen, 1);\n                }\n                else if (slotChild.isInserted) {\n                    slotChild._update(changes, 1);\n                }\n            }\n        }\n    }\n\n    var dataChanges = this._dataChanges;\n    if (dataChanges) {\n        // #[begin] devtool\n        this._toPhase('beforeUpdate');\n        // #[end]\n\n        this._dataChanges = null;\n\n        this._sbindData = nodeSBindUpdate(\n            this.aNode.directives.bind,\n            this._sbindData,\n            this.data,\n            this,\n            dataChanges,\n            function (name, value) {\n                if (me._rootNode || (name in me.aNode.hotspot.props)) {\n                    return;\n                }\n\n                getPropHandler(me.tagName, name)(me.el, value, name, me);\n            }\n        );\n\n\n        if (this._rootNode) {\n            this._rootNode._update(dataChanges);\n            this._rootNode._getElAsRootNode && (this.el = this._rootNode._getElAsRootNode());\n        }\n        else {\n            var dynamicProps = this.aNode.hotspot.dynamicProps;\n                for (var i = 0; i < dynamicProps.length; i++) {\n                    var prop = dynamicProps[i];\n\n                    for (var j = 0; j < dataChanges.length; j++) {\n                        var change = dataChanges[j];\n                        if (changeExprCompare(change.expr, prop.expr, this.data)\n                            || prop.hintExpr && changeExprCompare(change.expr, prop.hintExpr, this.data)\n                        ) {\n                            prop.handler(this.el, evalExpr(prop.expr, this.data, this), prop.name, this);\n                            break;\n                        }\n                    }\n                }\n\n                for (var i = 0; i < this.children.length; i++) {\n                    this.children[i]._update(dataChanges);\n                }\n        }\n\n        if (needReloadForSlot) {\n            this._initSourceSlots();\n            this._repaintChildren();\n        }\n\n        for (var i = 0; i < this.implicitChildren.length; i++) {\n            this.implicitChildren[i]._update(dataChanges);\n        }\n\n        this._toPhase('updated');\n\n        if (this.owner && this._updateBindxOwner(dataChanges)) {\n            this.owner._update();\n        }\n    }\n\n    this._notifyNeedReload = null;\n};\n\nComponent.prototype._updateBindxOwner = function (dataChanges) {\n    var me = this;\n    var xbindUped;\n\n    each(dataChanges, function (change) {\n        each(me.binds, function (bindItem) {\n            var changeExpr = change.expr;\n            if (bindItem.x\n                && !isDataChangeByElement(change, me.owner)\n                && changeExprCompare(changeExpr, parseExpr(bindItem.name), me.data)\n            ) {\n                var updateScopeExpr = bindItem.expr;\n                if (changeExpr.paths.length > 1) {\n                    updateScopeExpr = createAccessor(\n                        bindItem.expr.paths.concat(changeExpr.paths.slice(1))\n                    );\n                }\n\n                xbindUped = 1;\n                me.scope.set(\n                    updateScopeExpr,\n                    evalExpr(changeExpr, me.data, me),\n                    {\n                        target: {\n                            node: me,\n                            prop: bindItem.name\n                        }\n                    }\n                );\n            }\n        });\n    });\n\n    return xbindUped;\n};\n\n/**\n * 重新绘制组件的内容\n * 当 dynamic slot name 发生变更或 slot 匹配发生变化时，重新绘制\n * 在组件级别重绘有点粗暴，但是能保证视图结果正确性\n */\nComponent.prototype._repaintChildren = function () {\n    // TODO: repaint once?\n\n    if (this._rootNode) {\n        var parentEl = this._rootNode.el.parentNode;\n        var beforeEl = this._rootNode.el.nextSibling;\n        this._rootNode.dispose(0, 1);\n        this.slotChildren = [];\n\n        this._rootNode = createNode(this.aNode, this, this.data, this);\n        this._rootNode.attach(parentEl, beforeEl);\n        this._rootNode._getElAsRootNode && (this.el = this._rootNode._getElAsRootNode());\n    }\n    else {\n        elementDisposeChildren(this.children, 0, 1);\n        this.children = [];\n        this.slotChildren = [];\n\n        for (var i = 0, l = this.aNode.children.length; i < l; i++) {\n            var child = createNode(this.aNode.children[i], this, this.data, this);\n            this.children.push(child);\n            child.attach(this.el);\n        }\n    }\n};\n\n\n/**\n * 初始化组件内部监听数据变化\n *\n * @private\n * @param {Object} change 数据变化信息\n */\nComponent.prototype._initDataChanger = function (change) {\n    var me = this;\n\n    this._dataChanger = function (change) {\n        if (me._afterLife.created) {\n            if (!me._dataChanges) {\n                nextTick(me._update, me);\n                me._dataChanges = [];\n            }\n\n            me._dataChanges.push(change);\n        }\n        else if (me.lifeCycle.inited && me.owner) {\n            me._updateBindxOwner([change]);\n        }\n    };\n\n    this.data.listen(this._dataChanger);\n};\n\n\n/**\n * 监听组件的数据变化\n *\n * @param {string} dataName 变化的数据项\n * @param {Function} listener 监听函数\n */\nComponent.prototype.watch = function (dataName, listener) {\n    var dataExpr = parseExpr(dataName);\n\n    this.data.listen(bind(function (change) {\n        if (changeExprCompare(change.expr, dataExpr, this.data)) {\n            listener.call(this, evalExpr(dataExpr, this.data, this), change);\n        }\n    }, this));\n};\n\nComponent.prototype._getElAsRootNode = function () {\n    return this.el;\n};\n\n/**\n * 将组件attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nComponent.prototype.attach = function (parentEl, beforeEl) {\n    if (!this.lifeCycle.attached) {\n        // #[begin] devtool\n        this._toPhase('beforeAttach');\n        // #[end]\n\n\n        if (this.aNode.hotspot.hasRootNode || this.components[this.aNode.tagName]) {\n            // #[begin] devtool\n            this._toPhase('beforeCreate');\n            // #[end]\n            this._rootNode = this._rootNode || createNode(this.aNode, this, this.data, this);\n            this._rootNode.attach(parentEl, beforeEl);\n            this._rootNode._getElAsRootNode && (this.el = this._rootNode._getElAsRootNode());\n            this._toPhase('created');\n        }\n        else {\n            if (!this.el) {\n                // #[begin] devtool\n                this._toPhase('beforeCreate');\n                // #[end]\n\n                var sourceNode = this.aNode.hotspot.sourceNode;\n                var props = this.aNode.props;\n\n                if (sourceNode) {\n                    this.el = sourceNode.cloneNode(false);\n                    props = this.aNode.hotspot.dynamicProps;\n                }\n                else {\n                    this.el = createEl(this.tagName);\n                }\n\n                if (this._sbindData) {\n                    for (var key in this._sbindData) {\n                        if (this._sbindData.hasOwnProperty(key)) {\n                            getPropHandler(this.tagName, key)(\n                                this.el,\n                                this._sbindData[key],\n                                key,\n                                this\n                            );\n                        }\n                    }\n                }\n\n                for (var i = 0, l = props.length; i < l; i++) {\n                    var prop = props[i];\n                    var value = evalExpr(prop.expr, this.data, this);\n\n                    if (value || !baseProps[prop.name]) {\n                        prop.handler(this.el, value, prop.name, this);\n                    }\n                }\n\n                this._toPhase('created');\n            }\n\n            insertBefore(this.el, parentEl, beforeEl);\n\n            if (!this._contentReady) {\n                for (var i = 0, l = this.aNode.children.length; i < l; i++) {\n                    var childANode = this.aNode.children[i];\n                    var child = childANode.Clazz\n                        ? new childANode.Clazz(childANode, this, this.data, this)\n                        : createNode(childANode, this, this.data, this);\n                    this.children.push(child);\n                    child.attach(this.el);\n                }\n\n                this._contentReady = 1;\n            }\n\n            this._attached();\n        }\n\n        this._toPhase('attached');\n\n        // element 都是内部创建的，只有动态创建的 component 才会进入这个分支\n        if (this.owner && !this.parent) {\n            this.owner.implicitChildren.push(this);\n        }\n    }\n};\n\nComponent.prototype.detach = elementOwnDetach;\nComponent.prototype.dispose = elementOwnDispose;\nComponent.prototype._onEl = elementOwnOnEl;\nComponent.prototype._attached = elementOwnAttached;\nComponent.prototype._leave = function () {\n    if (this.leaveDispose) {\n        if (!this.lifeCycle.disposed) {\n            // #[begin] devtool\n            this._toPhase('beforeDetach');\n            // #[end]\n            this.data.unlisten();\n            this.dataChanger = null;\n            this._dataChanges = null;\n\n            var len = this.implicitChildren.length;\n            while (len--) {\n                this.implicitChildren[len].dispose(0, 1);\n            }\n\n            this.implicitChildren = null;\n\n            this.source = null;\n            this.sourceSlots = null;\n            this.sourceSlotNameProps = null;\n\n            // 这里不用挨个调用 dispose 了，因为 children 释放链会调用的\n            this.slotChildren = null;\n\n\n            if (this._rootNode) {\n                // 如果没有parent，说明是一个root component，一定要从dom树中remove\n                this._rootNode.dispose(this.disposeNoDetach && this.parent);\n            }\n            else {\n                var len = this.children.length;\n                while (len--) {\n                    this.children[len].dispose(1, 1);\n                }\n\n                len = this._elFns.length;\n                while (len--) {\n                    var fn = this._elFns[len];\n                    un(this.el, fn[0], fn[1], fn[2]);\n                }\n                this._elFns = null;\n\n                // #[begin] allua\n                /* istanbul ignore if */\n                if (this._inputTimer) {\n                    clearInterval(this._inputTimer);\n                    this._inputTimer = null;\n                }\n                // #[end]\n\n                // 如果没有parent，说明是一个root component，一定要从dom树中remove\n                if (!this.disposeNoDetach || !this.parent) {\n                    removeEl(this.el);\n                }\n            }\n\n            this._toPhase('detached');\n\n            // #[begin] devtool\n            this._toPhase('beforeDispose');\n            // #[end]\n\n            this._rootNode = null;\n            this.el = null;\n            this.owner = null;\n            this.scope = null;\n            this.children = null;\n\n            this._toPhase('disposed');\n\n            if (this._ondisposed) {\n                this._ondisposed();\n            }\n        }\n    }\n    else if (this.lifeCycle.attached) {\n        // #[begin] devtool\n        this._toPhase('beforeDetach');\n        // #[end]\n\n        if (this._rootNode) {\n            if (this._rootNode.detach) {\n                this._rootNode.detach();\n            }\n            else {\n                this._rootNode.dispose();\n                this._rootNode = null;\n            }\n        }\n        else {\n            removeEl(this.el);\n        }\n\n        this._toPhase('detached');\n    }\n};\n\n\nexports = module.exports = Component;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建数据检测函数\n */\n\n\n// #[begin] error\n\n/**\n * 创建数据检测函数\n *\n * @param  {Object} dataTypes     数据格式\n * @param  {string} componentName 组件名\n * @return {Function}\n */\nfunction createDataTypesChecker(dataTypes, componentName) {\n\n    /**\n     * 校验 data 是否满足 data types 的格式\n     *\n     * @param  {*} data 数据\n     */\n    return function (data) {\n\n        for (var dataTypeName in dataTypes) {\n            /* istanbul ignore else  */\n            if (dataTypes.hasOwnProperty(dataTypeName)) {\n\n                var dataTypeChecker = dataTypes[dataTypeName];\n\n                if (typeof dataTypeChecker !== 'function') {\n                    throw new Error('[SAN ERROR] '\n                        + componentName + ':' + dataTypeName + ' is invalid; '\n                        + 'it must be a function, usually from san.DataTypes'\n                    );\n                }\n\n                dataTypeChecker(\n                    data,\n                    dataTypeName,\n                    componentName,\n                    dataTypeName\n                );\n\n\n            }\n        }\n\n    };\n\n}\n\n// #[end]\n\nmodule.exports = createDataTypesChecker;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 创建组件类\n */\n\nvar Component = require('./component');\nvar inherits = require('../util/inherits');\n\n/**\n * 创建组件类\n *\n * @param {Object} proto 组件类的方法表\n * @param {Function=} SuperComponent 父组件类\n * @return {Function}\n */\nfunction defineComponent(proto, SuperComponent) {\n    // 如果传入一个不是 san component 的 constructor，直接返回不是组件构造函数\n    // 这种场景导致的错误 san 不予考虑\n    if (typeof proto === 'function') {\n        return proto;\n    }\n\n    // #[begin] error\n    if (typeof proto !== 'object') {\n        throw new Error('[SAN FATAL] defineComponent need a plain object.');\n    }\n    // #[end]\n\n    function ComponentClass(option) { // eslint-disable-line\n        Component.call(this, option);\n    }\n\n    ComponentClass.prototype = proto;\n    inherits(ComponentClass, SuperComponent || Component);\n\n    return ComponentClass;\n}\n\nexports = module.exports = defineComponent;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 组件Loader类\n */\n\nvar nextTick = require('../util/next-tick');\nvar each = require('../util/each');\n\n\n/**\n * 组件Loader类\n *\n * @class\n *\n * @param {Function} load load方法\n * @param {Function=} placeholder loading过程中渲染的组件\n * @param {Function=} fallback load失败时渲染的组件\n */\nfunction ComponentLoader(load, placeholder, fallback) {\n    this.load = load;\n    this.placeholder = placeholder;\n    this.fallback = fallback;\n\n    this.listeners = [];\n}\n\n\n/**\n * 开始加载组件\n *\n * @param {Function} onload 组件加载完成监听函数\n */\nComponentLoader.prototype.start = function (onload) {\n    var me = this;\n\n    switch (this.state) {\n        case 2:\n            nextTick(function () {\n                onload(me.Component);\n            });\n            break;\n\n        case 1:\n            this.listeners.push(onload);\n            break;\n\n        default:\n            this.listeners.push(onload);\n            this.state = 1;\n\n            var startLoad = this.load();\n            var done = function (RealComponent) {\n                me.done(RealComponent);\n            };\n\n            if (startLoad && typeof startLoad.then === 'function') {\n                startLoad.then(done, done);\n            }\n    }\n};\n\n/**\n * 完成组件加载\n *\n * @param {Function=} ComponentClass 组件类\n */\nComponentLoader.prototype.done = function (ComponentClass) {\n    this.state = 2;\n    ComponentClass = ComponentClass || this.fallback;\n    this.Component = ComponentClass;\n\n    each(this.listeners, function (listener) {\n        listener(ComponentClass);\n    });\n};\n\nexports = module.exports = ComponentLoader;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 解析组件的模板\n */\n\nvar warn = require('../util/warn');\nvar parseTemplate = require('../parser/parse-template');\nvar ExprType = require('../parser/expr-type');\nvar createAccessor = require('../parser/create-accessor');\n\n\n\n/**\n * 解析组件的模板\n *\n * @param {Function} ComponentClass 组件类\n * @return {ANode}\n */\nfunction parseComponentTemplate(ComponentClass) {\n    var proto = ComponentClass.prototype;\n\n    \n    var tplANode = parseTemplate(ComponentClass.template || proto.template, {\n        trimWhitespace: proto.trimWhitespace || ComponentClass.trimWhitespace,\n        delimiters: proto.delimiters || ComponentClass.delimiters\n    });\n\n    var aNode = tplANode.children[0];\n    if (aNode && aNode.textExpr) {\n        aNode = null;\n    }\n\n    // #[begin] error\n    if (tplANode.children.length !== 1 || !aNode) {\n        warn('Component template must have a root element.');\n    }\n    // #[end]\n\n    aNode = aNode || {\n        directives: {},\n        props: [],\n        events: [],\n        children: []\n    };\n\n    if (aNode.tagName === 'template') {\n        delete aNode.tagName;\n    }\n\n    if (proto.autoFillStyleAndId !== false && ComponentClass.autoFillStyleAndId !== false) {\n        var extraPropExists = {};\n\n        var len = aNode.props.length;\n        while (len--) {\n            var prop = aNode.props[len];\n            switch (prop.name) {\n                case 'class':\n                case 'style':\n                    extraPropExists[prop.name] = true;\n                    prop.expr = {\n                        type: ExprType.INTERP,\n                        expr: createAccessor([{\n                            type: ExprType.STRING,\n                            value: prop.name\n                        }]),\n                        filters: [{\n                            type: ExprType.CALL,\n                            args: [prop.expr],\n                            name: createAccessor([{\n                                type: ExprType.STRING,\n                                value: '_x' + prop.name\n                            }])\n                        }]\n                    }\n                    break;\n\n                case 'id':\n                    extraPropExists[prop.name] = true;\n                \n            }\n        }\n\n        if (!extraPropExists['class']) {\n            aNode.props.push({\n                name: 'class',\n                expr: {\n                    type: ExprType.INTERP,\n                    expr: createAccessor([{\n                        type: ExprType.STRING,\n                        value: 'class'\n                    }]),\n                    filters: [{\n                        type: ExprType.CALL,\n                        args: [],\n                        name: createAccessor([{\n                            type: ExprType.STRING,\n                            value: '_class'\n                        }])\n                    }]\n                }\n            });\n        }\n\n        if (!extraPropExists.style) {\n            aNode.props.push({\n                name: 'style',\n                expr: {\n                    type: ExprType.INTERP,\n                    expr: createAccessor([{\n                        type: ExprType.STRING,\n                        value: 'style'\n                    }]),\n                    filters: [{\n                        type: ExprType.CALL,\n                        args: [],\n                        name: createAccessor([{\n                            type: ExprType.STRING,\n                            value: '_style'\n                        }])\n                    }]\n                }\n            });\n        }\n\n        if (!extraPropExists.id) {\n            aNode.props.push({ \n                name: 'id', \n                expr: createAccessor([{\n                    type: ExprType.STRING,\n                    value: 'id'\n                }])\n            });\n        }\n    }\n\n    return aNode;\n}\n\nexports = module.exports = parseComponentTemplate;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 常用标签表，用于 element 创建优化\n */\n\nvar splitStr2Obj = require('../util/split-str-2-obj');\n\n/**\n * 常用标签表\n *\n * @type {Object}\n */\nvar hotTags = splitStr2Obj(\n    'div,span,img,ul,ol,li,dl,dt,dd,a,b,u,hr,'\n    + 'form,input,textarea,button,label,select,option,'\n    + 'table,tbody,th,tr,td,thead,main,aside,header,footer,nav'\n);\n\nexports = module.exports = hotTags;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file text 节点类\n */\n\nvar guid = require('../util/guid');\nvar isBrowser = require('../browser/is-browser');\nvar removeEl = require('../browser/remove-el');\nvar insertBefore = require('../browser/insert-before');\nvar changeExprCompare = require('../runtime/change-expr-compare');\nvar evalExpr = require('../runtime/eval-expr');\nvar NodeType = require('./node-type');\nvar warnSetHTML = require('./warn-set-html');\nvar isEndStump = require('./is-end-stump');\nvar getNodePath = require('./get-node-path');\n\n\n/**\n * text 节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction TextNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        var currentNode = reverseWalker.current;\n        if (currentNode) {\n            switch (currentNode.nodeType) {\n                case 8:\n                    if (currentNode.data === 's-text') {\n                        this.id = this.id || guid++;\n                        this.sel = currentNode;\n                        currentNode.data = this.id;\n                        reverseWalker.goNext();\n\n                        while (1) { // eslint-disable-line\n                            currentNode = reverseWalker.current;\n                            /* istanbul ignore if */\n                            if (!currentNode) {\n                                throw new Error('[SAN REVERSE ERROR] Text end flag not found. \\nPaths: '\n                                    + getNodePath(this).join(' > '));\n                            }\n\n                            if (isEndStump(currentNode, 'text')) {\n                                this.el = currentNode;\n                                reverseWalker.goNext();\n                                currentNode.data = this.id;\n                                break;\n                            }\n\n                            reverseWalker.goNext();\n                        }\n                    }\n                    break;\n\n                case 3:\n                    reverseWalker.goNext();\n                    if (!this.aNode.textExpr.original) {\n                        this.el = currentNode;\n                    }\n                    break;\n            }\n        }\n        else {\n            this.el = document.createTextNode('');\n            insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n        }\n    }\n    // #[end]\n}\n\nTextNode.prototype.nodeType = NodeType.TEXT;\n\n/**\n * 将text attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nTextNode.prototype.attach = function (parentEl, beforeEl) {\n    this.content = evalExpr(this.aNode.textExpr, this.scope, this.owner);\n    if (this.content == null) {\n        this.content = '';\n    }\n\n    if (this.aNode.textExpr.original) {\n        this.id = this.id || guid++;\n        this.sel = document.createComment(this.id);\n        insertBefore(this.sel, parentEl, beforeEl);\n\n        this.el = document.createComment(this.id);\n        insertBefore(this.el, parentEl, beforeEl);\n\n        var tempFlag = document.createElement('script');\n        parentEl.insertBefore(tempFlag, this.el);\n        tempFlag.insertAdjacentHTML('beforebegin', this.content);\n        parentEl.removeChild(tempFlag);\n    }\n    else {\n        this.el = document.createTextNode(this.content);\n        insertBefore(this.el, parentEl, beforeEl);\n    }\n};\n\n/**\n * 销毁 text 节点\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n */\nTextNode.prototype.dispose = function (noDetach) {\n    if (!noDetach) {\n        removeEl(this.el);\n        removeEl(this.sel);\n    }\n\n    this.el = null;\n    this.sel = null;\n};\n\nvar textUpdateProp = isBrowser\n    && (typeof document.createTextNode('').textContent === 'string'\n        ? 'textContent'\n        : 'data');\n\n/**\n * 更新 text 节点的视图\n *\n * @param {Array} changes 数据变化信息\n */\nTextNode.prototype._update = function (changes) {\n    if (this.aNode.textExpr.value) {\n        return;\n    }\n\n    var len = changes.length;\n    while (len--) {\n        if (changeExprCompare(changes[len].expr, this.aNode.textExpr, this.scope)) {\n            var text = evalExpr(this.aNode.textExpr, this.scope, this.owner);\n            if (text == null) {\n                text = '';\n            }\n\n            if (text !== this.content) {\n                this.content = text;\n\n                if (this.aNode.textExpr.original) {\n                    var startRemoveEl = this.sel.nextSibling;\n                    var parentEl = this.el.parentNode;\n\n                    while (startRemoveEl !== this.el) {\n                        var removeTarget = startRemoveEl;\n                        startRemoveEl = startRemoveEl.nextSibling;\n                        removeEl(removeTarget);\n                    }\n\n                    // #[begin] error\n                    warnSetHTML(parentEl);\n                    // #[end]\n\n                    var tempFlag = document.createElement('script');\n                    parentEl.insertBefore(tempFlag, this.el);\n                    tempFlag.insertAdjacentHTML('beforebegin', text);\n                    parentEl.removeChild(tempFlag);\n                }\n                else {\n                    this.el[textUpdateProp] = text;\n                }\n            }\n\n            return;\n        }\n    }\n};\n\nexports = module.exports = TextNode;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 判断是否结束桩\n */\n\n// #[begin] reverse\n/**\n * 判断是否结束桩\n *\n * @param {HTMLElement|HTMLComment} target 要判断的元素\n * @param {string} type 桩类型\n * @return {boolean}\n */\nfunction isEndStump(target, type) {\n    return target.nodeType === 8 && target.data === '/s-' + type;\n}\n// #[end]\n\nexports = module.exports = isEndStump;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 将没有 root 只有 children 的元素 attach 到页面\n */\n\n\nvar insertBefore = require('../browser/insert-before');\nvar LifeCycle = require('./life-cycle');\nvar createNode = require('./create-node');\n\n/**\n * 将没有 root 只有 children 的元素 attach 到页面\n * 主要用于 slot 和 template\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nfunction nodeOwnOnlyChildrenAttach(parentEl, beforeEl) {\n    this.sel = document.createComment(this.id);\n    insertBefore(this.sel, parentEl, beforeEl);\n\n    for (var i = 0; i < this.aNode.children.length; i++) {\n        var child = createNode(\n            this.aNode.children[i],\n            this,\n            this.childScope || this.scope,\n            this.childOwner || this.owner\n        );\n        this.children.push(child);\n        child.attach(parentEl, beforeEl);\n    }\n\n    this.el = document.createComment(this.id);\n    insertBefore(this.el, parentEl, beforeEl);\n\n    this.lifeCycle = LifeCycle.attached;\n}\n\nexports = module.exports = nodeOwnOnlyChildrenAttach;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file slot 节点类\n */\n\nvar each = require('../util/each');\nvar guid = require('../util/guid');\nvar extend = require('../util/extend');\nvar ExprType = require('../parser/expr-type');\nvar createAccessor = require('../parser/create-accessor');\nvar evalExpr = require('../runtime/eval-expr');\nvar Data = require('../runtime/data');\nvar DataChangeType = require('../runtime/data-change-type');\nvar changeExprCompare = require('../runtime/change-expr-compare');\nvar removeEl = require('../browser/remove-el');\nvar NodeType = require('./node-type');\nvar LifeCycle = require('./life-cycle');\nvar getANodeProp = require('./get-a-node-prop');\nvar nodeSBindInit = require('./node-s-bind-init');\nvar nodeSBindUpdate = require('./node-s-bind-update');\nvar createReverseNode = require('./create-reverse-node');\nvar elementDisposeChildren = require('./element-dispose-children');\nvar nodeOwnOnlyChildrenAttach = require('./node-own-only-children-attach');\n\n\n/**\n * slot 节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction SlotNode(aNode, parent, scope, owner, reverseWalker) {\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === NodeType.CMPT\n        ? parent\n        : parent.parentComponent;\n\n    this.id = guid++;\n\n    this.lifeCycle = LifeCycle.start;\n    this.children = [];\n\n    // calc slot name\n    this.nameBind = getANodeProp(aNode, 'name');\n    if (this.nameBind) {\n        this.isNamed = true;\n        this.name = evalExpr(this.nameBind.expr, this.scope, this.owner);\n    }\n\n    // calc aNode children\n    var sourceSlots = owner.sourceSlots;\n    var matchedSlots;\n    if (sourceSlots) {\n        matchedSlots = this.isNamed ? sourceSlots.named[this.name] : sourceSlots.noname;\n    }\n\n    if (matchedSlots) {\n        this.isInserted = true;\n    }\n\n    this.aNode = {\n        directives: aNode.directives,\n        props: [],\n        events: [],\n        children: matchedSlots || aNode.children.slice(0),\n        vars: aNode.vars\n    };\n\n    this._sbindData = nodeSBindInit(aNode.directives.bind, this.scope, this.owner);\n\n    // calc scoped slot vars\n    var initData;\n    if (this._sbindData) {\n        initData = extend({}, this._sbindData);\n    }\n\n    if (aNode.vars) {\n        initData = initData || {};\n        each(aNode.vars, function (varItem) {\n            initData[varItem.name] = evalExpr(varItem.expr, scope, owner);\n        });\n    }\n\n    // child owner & child scope\n    if (this.isInserted) {\n        this.childOwner = owner.owner;\n        this.childScope = owner.scope;\n    }\n\n    if (initData) {\n        this.isScoped = true;\n        this.childScope = new Data(initData, this.childScope || this.scope);\n    }\n\n\n    owner.slotChildren.push(this);\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        var hasFlagComment;\n\n        // start flag\n        if (reverseWalker.current && reverseWalker.current.nodeType === 8) {\n            this.sel = reverseWalker.current;\n            hasFlagComment = 1;\n            reverseWalker.goNext();\n        }\n        else {\n            this.sel = document.createComment(this.id);\n            reverseWalker.current\n                ? reverseWalker.target.insertBefore(this.sel, reverseWalker.current)\n                : reverseWalker.target.appendChild(this.sel);\n        }\n\n        var aNodeChildren = this.aNode.children;\n        for (var i = 0, l = aNodeChildren.length; i < l; i++) {\n            this.children.push(createReverseNode(\n                aNodeChildren[i],\n                this,\n                this.childScope || this.scope,\n                this.childOwner || this.owner,\n                reverseWalker\n            ));\n        }\n\n        // end flag\n        if (hasFlagComment) {\n            this.el = reverseWalker.current;\n            reverseWalker.goNext();\n        }\n        else {\n            this.el = document.createComment(this.id);\n            reverseWalker.current\n                ? reverseWalker.target.insertBefore(this.el, reverseWalker.current)\n                : reverseWalker.target.appendChild(this.el);\n        }\n\n        this.lifeCycle = LifeCycle.attached;\n    }\n    // #[end]\n}\n\nSlotNode.prototype.nodeType = NodeType.SLOT;\n\n/**\n * 销毁释放 slot\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n * @param {boolean=} noTransition 是否不显示过渡动画效果\n */\nSlotNode.prototype.dispose = function (noDetach, noTransition) {\n    this.childOwner = null;\n    this.childScope = null;\n\n    elementDisposeChildren(this.children, noDetach, noTransition);\n\n    if (!noDetach) {\n        removeEl(this.el);\n        removeEl(this.sel);\n    }\n\n    this.sel = null;\n    this.el = null;\n    this.owner = null;\n    this.scope = null;\n    this.children = null;\n\n    this.lifeCycle = LifeCycle.disposed;\n\n    if (this._ondisposed) {\n        this._ondisposed();\n    }\n};\n\nSlotNode.prototype.attach = nodeOwnOnlyChildrenAttach;\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n * @param {boolean=} isFromOuter 变化信息是否来源于父组件之外的组件\n * @return {boolean}\n */\nSlotNode.prototype._update = function (changes, isFromOuter) {\n    var me = this;\n\n    if (this.nameBind && evalExpr(this.nameBind.expr, this.scope, this.owner) !== this.name) {\n        this.owner._notifyNeedReload();\n        return false;\n    }\n\n    if (isFromOuter) {\n        if (this.isInserted) {\n            for (var i = 0; i < this.children.length; i++) {\n                this.children[i]._update(changes);\n            }\n        }\n    }\n    else {\n        if (this.isScoped) {\n            var varKeys = {};\n            each(this.aNode.vars, function (varItem) {\n                varKeys[varItem.name] = 1;\n                me.childScope.set(varItem.name, evalExpr(varItem.expr, me.scope, me.owner));\n            });\n\n            var scopedChanges = [];\n\n            this._sbindData = nodeSBindUpdate(\n                this.aNode.directives.bind,\n                this._sbindData,\n                this.scope,\n                this.owner,\n                changes,\n                function (name, value) {\n                    if (varKeys[name]) {\n                        return;\n                    }\n\n                    me.childScope.set(name, value);\n                    scopedChanges.push({\n                        type: DataChangeType.SET,\n                        expr: createAccessor([\n                            {type: ExprType.STRING, value: name}\n                        ]),\n                        value: value,\n                        option: {}\n                    });\n                }\n            );\n\n            each(changes, function (change) {\n                if (!me.isInserted) {\n                    scopedChanges.push(change);\n                }\n\n                each(me.aNode.vars, function (varItem) {\n                    var name = varItem.name;\n                    var relation = changeExprCompare(change.expr, varItem.expr, me.scope);\n\n                    if (relation < 1) {\n                        return;\n                    }\n\n                    if (change.type !== DataChangeType.SPLICE) {\n                        scopedChanges.push({\n                            type: DataChangeType.SET,\n                            expr: createAccessor([\n                                {type: ExprType.STRING, value: name}\n                            ]),\n                            value: me.childScope.get(name),\n                            option: change.option\n                        });\n                    }\n                    else if (relation === 2) {\n                        scopedChanges.push({\n                            expr: createAccessor([\n                                {type: ExprType.STRING, value: name}\n                            ]),\n                            type: DataChangeType.SPLICE,\n                            index: change.index,\n                            deleteCount: change.deleteCount,\n                            value: change.value,\n                            insertions: change.insertions,\n                            option: change.option\n                        });\n                    }\n                });\n            });\n\n            for (var i = 0; i < this.children.length; i++) {\n                this.children[i]._update(scopedChanges);\n            }\n        }\n        else if (!this.isInserted) {\n            for (var i = 0; i < this.children.length; i++) {\n                this.children[i]._update(changes);\n            }\n        }\n    }\n};\n\nexports = module.exports = SlotNode;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file for 指令节点类\n */\n\nvar inherits = require('../util/inherits');\nvar each = require('../util/each');\nvar guid = require('../util/guid');\nvar ExprType = require('../parser/expr-type');\nvar parseExpr = require('../parser/parse-expr');\nvar createAccessor = require('../parser/create-accessor');\nvar Data = require('../runtime/data');\nvar DataChangeType = require('../runtime/data-change-type');\nvar changeExprCompare = require('../runtime/change-expr-compare');\nvar evalExpr = require('../runtime/eval-expr');\nvar changesIsInDataRef = require('../runtime/changes-is-in-data-ref');\nvar insertBefore = require('../browser/insert-before');\nvar NodeType = require('./node-type');\nvar createNode = require('./create-node');\nvar createReverseNode = require('./create-reverse-node');\nvar nodeOwnSimpleDispose = require('./node-own-simple-dispose');\nvar nodeOwnCreateStump = require('./node-own-create-stump');\n\n\n/**\n * 循环项的数据容器类\n *\n * @inner\n * @class\n * @param {Object} forElement for元素对象\n * @param {*} item 当前项的数据\n * @param {number} index 当前项的索引\n */\nfunction ForItemData(forElement, item, index) {\n    this.parent = forElement.scope;\n    this.raw = {};\n    this.listeners = [];\n\n    this.directive = forElement.aNode.directives['for']; // eslint-disable-line dot-notation\n    this.indexName = this.directive.index || '$index';\n\n    this.raw[this.directive.item] = item;\n    this.raw[this.indexName] = index;\n}\n\n/**\n * 将数据操作的表达式，转换成为对parent数据操作的表达式\n * 主要是对item和index进行处理\n *\n * @param {Object} expr 表达式\n * @return {Object}\n */\nForItemData.prototype.exprResolve = function (expr) {\n    var me = this;\n    var directive = this.directive;\n\n    function resolveItem(expr) {\n        if (expr.type === ExprType.ACCESSOR && expr.paths[0].value === directive.item) {\n            return createAccessor(\n                directive.value.paths.concat(\n                    {\n                        type: ExprType.NUMBER,\n                        value: me.raw[me.indexName]\n                    },\n                    expr.paths.slice(1)\n                )\n            );\n        }\n\n        return expr;\n    }\n\n    expr = resolveItem(expr);\n\n    var resolvedPaths = [];\n\n    each(expr.paths, function (item) {\n        resolvedPaths.push(\n            item.type === ExprType.ACCESSOR && item.paths[0].value === me.indexName\n                ? {\n                    type: ExprType.NUMBER,\n                    value: me.raw[me.indexName]\n                }\n                : resolveItem(item)\n        );\n    });\n\n    return createAccessor(resolvedPaths);\n};\n\n// 代理数据操作方法\ninherits(ForItemData, Data);\neach(\n    ['set', 'remove', 'unshift', 'shift', 'push', 'pop', 'splice'],\n    function (method) {\n        ForItemData.prototype['_' + method] = Data.prototype[method];\n\n        ForItemData.prototype[method] = function (expr) {\n            expr = this.exprResolve(parseExpr(expr));\n            this.parent[method].apply(\n                this.parent,\n                [expr].concat(Array.prototype.slice.call(arguments, 1))\n            );\n        };\n    }\n);\n\n/**\n * for 指令节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction ForNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === NodeType.CMPT\n        ? parent\n        : parent.parentComponent;\n\n    this.id = guid++;\n    this.children = [];\n\n    this.param = aNode.directives['for']; // eslint-disable-line dot-notation\n\n    this.itemPaths = [\n        {\n            type: ExprType.STRING,\n            value: this.param.item\n        }\n    ];\n\n    this.itemExpr = {\n        type: ExprType.ACCESSOR,\n        paths: this.itemPaths,\n        raw: this.param.item\n    };\n\n    if (this.param.index) {\n        this.indexExpr = createAccessor([{\n            type: ExprType.STRING,\n            value: '' + this.param.index\n        }]);\n    }\n\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        this.listData = evalExpr(this.param.value, this.scope, this.owner);\n        if (this.listData instanceof Array) {\n            for (var i = 0; i < this.listData.length; i++) {\n                this.children.push(createReverseNode(\n                    this.aNode.forRinsed,\n                    this,\n                    new ForItemData(this, this.listData[i], i),\n                    this.owner,\n                    reverseWalker\n                ));\n            }\n        }\n        else if (this.listData && typeof this.listData === 'object') {\n            for (var i in this.listData) {\n                if (this.listData.hasOwnProperty(i) && this.listData[i] != null) {\n                    this.children.push(createReverseNode(\n                        this.aNode.forRinsed,\n                        this,\n                        new ForItemData(this, this.listData[i], i),\n                        this.owner,\n                        reverseWalker\n                    ));\n                }\n            }\n        }\n\n        this._create();\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n    }\n    // #[end]\n}\n\n\nForNode.prototype.nodeType = NodeType.FOR;\nForNode.prototype._create = nodeOwnCreateStump;\nForNode.prototype.dispose = nodeOwnSimpleDispose;\n\n/**\n * 将元素attach到页面的行为\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nForNode.prototype.attach = function (parentEl, beforeEl) {\n    this._create();\n    insertBefore(this.el, parentEl, beforeEl);\n    this.listData = evalExpr(this.param.value, this.scope, this.owner);\n\n    this._createChildren();\n};\n\n/**\n * 创建子元素\n */\nForNode.prototype._createChildren = function () {\n    var parentEl = this.el.parentNode;\n    var listData = this.listData;\n\n    if (listData instanceof Array) {\n        for (var i = 0; i < listData.length; i++) {\n            var childANode = this.aNode.forRinsed;\n            var child = childANode.Clazz\n                        ? new childANode.Clazz(childANode, this, new ForItemData(this, listData[i], i), this.owner)\n                        : createNode(childANode, this, new ForItemData(this, listData[i], i), this.owner);\n\n            this.children.push(child);\n            child.attach(parentEl, this.el);\n        }\n    }\n    else if (listData && typeof listData === 'object') {\n        for (var i in listData) {\n            if (listData.hasOwnProperty(i) && listData[i] != null) {\n                var childANode = this.aNode.forRinsed;\n                var child = childANode.Clazz\n                        ? new childANode.Clazz(childANode, this, new ForItemData(this, listData[i], i), this.owner)\n                        : createNode(childANode, this, new ForItemData(this, listData[i], i), this.owner);\n                this.children.push(child);\n                child.attach(parentEl, this.el);\n            }\n        }\n    }\n};\n\n/* eslint-disable fecs-max-statements */\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n */\nForNode.prototype._update = function (changes) {\n    var listData = evalExpr(this.param.value, this.scope, this.owner);\n    var oldIsArr = this.listData instanceof Array;\n    var newIsArr = listData instanceof Array;\n\n    if (this.children.length) {\n        if (!listData || newIsArr && listData.length === 0) {\n            this._disposeChildren();\n            this.listData = listData;\n        }\n        else if (oldIsArr !== newIsArr || !newIsArr) {\n            // 就是这么暴力\n            // 不推荐使用for遍历object，用的话自己负责\n            this.listData = listData;\n\n            var isListChanged;\n            for (var cIndex = 0; !isListChanged && cIndex < changes.length; cIndex++) {\n                isListChanged = changeExprCompare(changes[cIndex].expr, this.param.value, this.scope);\n            }\n            var dataHotspot = this.aNode.hotspot.data;\n            if (isListChanged || dataHotspot && changesIsInDataRef(changes, dataHotspot)) {\n                var me = this;\n                this._disposeChildren(null, function () {\n                    me._createChildren();\n                });\n            }\n        }\n        else {\n            this._updateArray(changes, listData);\n            this.listData = listData;\n        }\n    }\n    else {\n        this.listData = listData;\n        this._createChildren();\n    }\n};\n\n/**\n * 销毁释放子元素\n *\n * @param {Array?} children 要销毁的子元素，默认为自身的children\n * @param {Function} callback 释放完成的回调函数\n */\nForNode.prototype._disposeChildren = function (children, callback) {\n    var parentEl = this.el.parentNode;\n    var parentFirstChild = parentEl.firstChild;\n    var parentLastChild = parentEl.lastChild;\n\n    var len = this.children.length;\n\n    var violentClear = !this.aNode.directives.transition\n        && !children\n        // 是否 parent 的唯一 child\n        && len && parentFirstChild === this.children[0].el && parentLastChild === this.el\n        ;\n\n    if (!children) {\n        children = this.children;\n        this.children = [];\n    }\n\n\n    var disposedChildCount = 0;\n    len = children.length;\n\n    // 调用入口处已保证此处必有需要被删除的 child\n    for (var i = 0; i < len; i++) {\n        var disposeChild = children[i];\n\n        if (violentClear) {\n            disposeChild && disposeChild.dispose(violentClear, violentClear);\n        }\n        else if (disposeChild) {\n            disposeChild._ondisposed = childDisposed;\n            disposeChild.dispose();\n        }\n        else {\n            childDisposed();\n        }\n    }\n\n    if (violentClear) {\n        // #[begin] allua\n        /* istanbul ignore next */\n        if (ie) {\n            parentEl.innerHTML = '';\n        }\n        else {\n            // #[end]\n            parentEl.textContent = '';\n            // #[begin] allua\n        }\n        // #[end]\n\n        this.el = document.createComment(this.id);\n        parentEl.appendChild(this.el);\n        callback && callback();\n    }\n\n    function childDisposed() {\n        disposedChildCount++;\n        if (disposedChildCount >= len) {\n            callback && callback();\n        }\n    }\n};\n\nForNode.prototype.opti = typeof navigator !== 'undefined'\n    && /chrome\\/[0-9]+/i.test(navigator.userAgent);\n/**\n * 数组类型的视图更新\n *\n * @param {Array} changes 数据变化信息\n * @param {Array} newList 新数组数据\n */\nForNode.prototype._updateArray = function (changes, newList) {\n    var oldChildrenLen = this.children.length;\n    var childrenChanges = new Array(oldChildrenLen);\n    var childIsElem = this.children[0].nodeType === NodeType.ELEM;\n\n    function pushToChildrenChanges(change) {\n        for (var i = 0, l = childrenChanges.length; i < l; i++) {\n            (childrenChanges[i] = childrenChanges[i] || []).push(change);\n        }\n        childrenNeedUpdate = null;\n        isOnlyDispose = false;\n    }\n\n    var disposeChildren = [];\n\n    // 控制列表是否整体更新的变量\n    var isChildrenRebuild;\n\n    //\n    var isOnlyDispose = true;\n\n    var childrenNeedUpdate = {};\n\n    var newLen = newList.length;\n    var getItemKey = this.aNode.hotspot.getForKey;\n\n    /* eslint-disable no-redeclare */\n    for (var cIndex = 0; cIndex < changes.length; cIndex++) {\n        var change = changes[cIndex];\n        var relation = changeExprCompare(change.expr, this.param.value, this.scope);\n\n        if (!relation) {\n            // 无关时，直接传递给子元素更新，列表本身不需要动\n            pushToChildrenChanges(change);\n        }\n        else {\n            if (relation > 2) {\n                // 变更表达式是list绑定表达式的子项\n                // 只需要对相应的子项进行更新\n                var changePaths = change.expr.paths;\n                var forLen = this.param.value.paths.length;\n                var changeIndex = +evalExpr(changePaths[forLen], this.scope, this.owner);\n\n                if (isNaN(changeIndex)) {\n                    pushToChildrenChanges(change);\n                }\n                else if (!isChildrenRebuild) {\n                    isOnlyDispose = false;\n                    childrenNeedUpdate && (childrenNeedUpdate[changeIndex] = 1);\n\n                    childrenChanges[changeIndex] = childrenChanges[changeIndex] || [];\n                    if (this.param.index) {\n                        childrenChanges[changeIndex].push(change);\n                    }\n\n                    change = change.type === DataChangeType.SET\n                        ? {\n                            type: change.type,\n                            expr: createAccessor(\n                                this.itemPaths.concat(changePaths.slice(forLen + 1))\n                            ),\n                            value: change.value,\n                            option: change.option\n                        }\n                        : {\n                            index: change.index,\n                            deleteCount: change.deleteCount,\n                            insertions: change.insertions,\n                            type: change.type,\n                            expr: createAccessor(\n                                this.itemPaths.concat(changePaths.slice(forLen + 1))\n                            ),\n                            value: change.value,\n                            option: change.option\n                        };\n\n\n                    childrenChanges[changeIndex].push(change);\n\n                    if (change.type === DataChangeType.SET) {\n                        if (this.children[changeIndex]) {\n                            this.children[changeIndex].scope._set(\n                                change.expr,\n                                change.value,\n                                {\n                                    silent: 1\n                                }\n                            );\n                        }\n                        else {\n                            // 设置数组项的索引可能超出数组长度，此时需要新增\n                            // 比如当前数组只有2项，但是set list[4]\n                            this.children[changeIndex] = 0;\n                        }\n                    }\n                    else if (this.children[changeIndex]) {\n                        this.children[changeIndex].scope._splice(\n                            change.expr,\n                            [].concat(change.index, change.deleteCount, change.insertions),\n                            {\n                                silent: 1\n                            }\n                        );\n                    }\n                }\n            }\n            else if (isChildrenRebuild) {\n                continue;\n            }\n            else if (relation === 2 && change.type === DataChangeType.SPLICE\n                && (this.owner.updateMode !== 'optimized' || !this.opti || this.aNode.directives.transition)\n            ) {\n                childrenNeedUpdate = null;\n\n                // 变更表达式是list绑定表达式本身数组的splice操作\n                // 此时需要删除部分项，创建部分项\n                var changeStart = change.index;\n                var deleteCount = change.deleteCount;\n                var insertionsLen = change.insertions.length;\n                var newCount = insertionsLen - deleteCount;\n\n                if (newCount) {\n                    var indexChange = this.param.index\n                        ? {\n                            type: DataChangeType.SET,\n                            option: change.option,\n                            expr: this.indexExpr\n                        }\n                        : null;\n\n                    for (var i = changeStart + deleteCount; i < this.children.length; i++) {\n                        if (indexChange) {\n                            isOnlyDispose = false;\n                            (childrenChanges[i] = childrenChanges[i] || []).push(indexChange);\n                        }\n\n                        var child = this.children[i];\n                        if (child) {\n                            child.scope.raw[child.scope.indexName] = i - deleteCount + insertionsLen;\n                        }\n                    }\n                }\n\n                var deleteLen = deleteCount;\n                while (deleteLen--) {\n                    if (deleteLen < insertionsLen) {\n                        isOnlyDispose = false;\n                        var i = changeStart + deleteLen;\n                        // update\n                        (childrenChanges[i] = childrenChanges[i] || []).push({\n                            type: DataChangeType.SET,\n                            option: change.option,\n                            expr: this.itemExpr,\n                            value: change.insertions[deleteLen]\n                        });\n                        if (this.children[i]) {\n                            this.children[i].scope.raw[this.param.item] = change.insertions[deleteLen];\n                        }\n                    }\n                }\n\n                if (newCount < 0) {\n                    disposeChildren = disposeChildren.concat(\n                        this.children.splice(changeStart + insertionsLen, -newCount)\n                    );\n                    childrenChanges.splice(changeStart + insertionsLen, -newCount);\n                }\n                else if (newCount > 0) {\n                    isOnlyDispose = false;\n                    var spliceArgs = [changeStart + deleteCount, 0].concat(new Array(newCount));\n                    this.children.splice.apply(this.children, spliceArgs);\n                    childrenChanges.splice.apply(childrenChanges, spliceArgs);\n                }\n            }\n            else {\n                childrenNeedUpdate = null;\n                isOnlyDispose = false;\n\n                isChildrenRebuild = 1;\n\n                // 变更表达式是list绑定表达式本身或母项的重新设值\n                // 此时需要更新整个列表\n\n                if (getItemKey && newLen && oldChildrenLen) {\n                    // 如果设置了trackBy，用lis更新。开始 ====\n                    var newListKeys = [];\n                    var oldListKeys = [];\n                    var newListKeysMap = {};\n                    var oldListInNew = [];\n                    var oldListKeyIndex = {};\n\n                    for (var i = 0; i < newList.length; i++) {\n                        var itemKey = getItemKey(newList[i]);\n                        newListKeys.push(itemKey);\n                        newListKeysMap[itemKey] = i;\n                    };\n\n                    for (var i = 0; i < this.listData.length; i++) {\n                        var itemKey = getItemKey(this.listData[i]);\n\n                        oldListKeys.push(itemKey);\n                        oldListKeyIndex[itemKey] = i;\n\n                        if (newListKeysMap[itemKey] != null) {\n                            oldListInNew[i] = newListKeysMap[itemKey];\n                        }\n                        else {\n                            oldListInNew[i] = -1;\n                            disposeChildren.push(this.children[i]);\n                        }\n                    };\n\n                    var newIndexStart = 0;\n                    var newIndexEnd = newLen;\n                    var oldIndexStart = 0;\n                    var oldIndexEnd = oldChildrenLen;\n\n                    // 优化：从头开始比对新旧 list 项是否相同\n                    while (newIndexStart < newLen\n                        && oldIndexStart < oldChildrenLen\n                        && newListKeys[newIndexStart] === oldListKeys[oldIndexStart]\n                    ) {\n                        if (this.listData[oldIndexStart] !== newList[newIndexStart]) {\n                            this.children[oldIndexStart].scope.raw[this.param.item] = newList[newIndexStart];\n                            (childrenChanges[oldIndexStart] = childrenChanges[oldIndexStart] || []).push({\n                                type: DataChangeType.SET,\n                                option: change.option,\n                                expr: this.itemExpr,\n                                value: newList[newIndexStart]\n                            });\n                        }\n\n                        // 对list更上级数据的直接设置\n                        if (relation < 2) {\n                            (childrenChanges[oldIndexStart] = childrenChanges[oldIndexStart] || []).push(change);\n                        }\n\n                        newIndexStart++;\n                        oldIndexStart++;\n                    }\n\n                    var indexChange = this.param.index\n                        ? {\n                            type: DataChangeType.SET,\n                            option: change.option,\n                            expr: this.indexExpr\n                        }\n                        : null;\n\n                    // 优化：从尾开始比对新旧 list 项是否相同\n                    while (newIndexEnd > newIndexStart && oldIndexEnd > oldIndexStart\n                        && newListKeys[newIndexEnd - 1] === oldListKeys[oldIndexEnd - 1]\n                    ) {\n                        newIndexEnd--;\n                        oldIndexEnd--;\n\n                        if (this.listData[oldIndexEnd] !== newList[newIndexEnd]) {\n                            // refresh item\n                            this.children[oldIndexEnd].scope.raw[this.param.item] = newList[newIndexEnd];\n                            (childrenChanges[oldIndexEnd] = childrenChanges[oldIndexEnd] || []).push({\n                                type: DataChangeType.SET,\n                                option: change.option,\n                                expr: this.itemExpr,\n                                value: newList[newIndexEnd]\n                            });\n                        }\n\n                        // refresh index\n                        if (newIndexEnd !== oldIndexEnd) {\n                            this.children[oldIndexEnd].scope.raw[this.children[oldIndexEnd].scope.indexName] = newIndexEnd;\n\n                            if (indexChange) {\n                                (childrenChanges[oldIndexEnd] = childrenChanges[oldIndexEnd] || []).push(indexChange);\n                            }\n                        }\n\n                        // 对list更上级数据的直接设置\n                        if (relation < 2) {\n                            (childrenChanges[oldIndexEnd] = childrenChanges[oldIndexEnd] || []).push(change);\n                        }\n                    }\n\n                    var oldListLIS = [];\n                    var lisIdx = [];\n                    var lisPos = -1;\n                    var lisSource = oldListInNew.slice(oldIndexStart, oldIndexEnd);\n                    var len = oldIndexEnd - oldIndexStart;\n                    var preIdx = new Array(len);\n\n                    for (var i = 0; i < len; i++) {\n                        var oldItemInNew = lisSource[i];\n                        if (oldItemInNew === -1) {\n                            continue;\n                        }\n\n                        var rePos = -1;\n                        var rePosEnd = oldListLIS.length;\n\n                        if (rePosEnd > 0 && oldListLIS[rePosEnd - 1] <= oldItemInNew) {\n                            rePos = rePosEnd - 1;\n                        }\n                        else {\n                            while (rePosEnd - rePos > 1) {\n                                var mid = Math.floor((rePos + rePosEnd) / 2);\n                                if (oldListLIS[mid] > oldItemInNew) {\n                                    rePosEnd = mid;\n                                } else {\n                                    rePos = mid;\n                                }\n                            }\n                        }\n\n                        if (rePos !== -1) {\n                            preIdx[i] = lisIdx[rePos];\n                        }\n\n                        if (rePos === lisPos) {\n                            lisPos++;\n                            oldListLIS[lisPos] = oldItemInNew;\n                            lisIdx[lisPos] = i;\n                        } else if (oldItemInNew < oldListLIS[rePos + 1]) {\n                            oldListLIS[rePos + 1] = oldItemInNew;\n                            lisIdx[rePos + 1] = i;\n                        }\n                    }\n\n                    for (var i = lisIdx[lisPos]; lisPos >= 0; i = preIdx[i], lisPos--) {\n                        oldListLIS[lisPos] = i;\n                    }\n\n                    var oldListLISPos = oldListLIS.length;\n                    var staticPos = oldListLISPos ? oldListInNew[oldListLIS[--oldListLISPos] + oldIndexStart] : -1;\n\n                    var newChildren = [];\n                    var newChildrenChanges = [];\n\n                    var beforeEl = this.el;\n                    var parentEl = childIsElem && beforeEl.parentNode;\n                    for (var i = newLen - 1; i >= 0; i--) {\n                        if (i >= newIndexEnd) {\n                            newChildren[i] = this.children[oldChildrenLen - newLen + i];\n                            newChildrenChanges[i] = childrenChanges[oldChildrenLen - newLen + i];\n                            if (childIsElem) {\n                                beforeEl = newChildren[i].el;\n                            }\n                        }\n                        else if (i < newIndexStart) {\n                            newChildren[i] = this.children[i];\n                            newChildrenChanges[i] = childrenChanges[i];\n                        }\n                        else {\n                            var oldListIndex = oldListKeyIndex[newListKeys[i]];\n                            var oldListNode = this.children[oldListIndex];\n\n                            if (oldListNode && (childIsElem || i === staticPos)) {\n                                var oldScope = oldListNode.scope;\n\n                                // 如果数据本身引用发生变化，设置变更\n                                if (this.listData[oldListIndex] !== newList[i]) {\n                                    oldScope.raw[this.param.item] = newList[i];\n                                    (childrenChanges[oldListIndex] = childrenChanges[oldListIndex] || []).push({\n                                        type: DataChangeType.SET,\n                                        option: change.option,\n                                        expr: this.itemExpr,\n                                        value: newList[i]\n                                    });\n                                }\n\n                                // refresh index\n                                if (indexChange && i !== oldListIndex) {\n                                    oldScope.raw[oldScope.indexName] = i;\n\n                                    if (indexChange) {\n                                        (childrenChanges[oldListIndex] = childrenChanges[oldListIndex] || []).push(indexChange);\n                                    }\n                                }\n\n                                // 对list更上级数据的直接设置\n                                if (relation < 2) {\n                                    (childrenChanges[oldListIndex] = childrenChanges[oldListIndex] || []).push(change);\n                                }\n\n                                newChildren[i] = oldListNode;\n                                newChildrenChanges[i] = childrenChanges[oldListIndex];\n\n                                if (i === staticPos) {\n                                    staticPos = oldListLISPos ? oldListInNew[oldListLIS[--oldListLISPos] + oldIndexStart] : -1;\n                                }\n                                else {\n                                    parentEl.insertBefore(oldListNode.el, beforeEl);\n                                }\n\n                                if (childIsElem) {\n                                    beforeEl = oldListNode.el;\n                                }\n                            }\n                            else {\n                                oldListNode && disposeChildren.push(oldListNode);\n                                newChildren[i] = 0;\n                                newChildrenChanges[i] = 0;\n                            }\n                        }\n                    }\n\n                    this.children = newChildren;\n                    childrenChanges = newChildrenChanges;\n                    // 如果设置了trackBy，用lis更新。结束 ====\n                }\n                else {\n                    // 老的比新的多的部分，标记需要dispose\n                    if (oldChildrenLen > newLen) {\n                        disposeChildren = disposeChildren.concat(this.children.slice(newLen));\n                        childrenChanges = childrenChanges.slice(0, newLen);\n                        this.children = this.children.slice(0, newLen);\n                    }\n\n                    // 剩下的部分整项变更\n                    for (var i = 0; i < newLen; i++) {\n                        // 对list更上级数据的直接设置\n                        if (relation < 2) {\n                            (childrenChanges[i] = childrenChanges[i] || []).push(change);\n                        }\n\n                        if (this.children[i]) {\n                            if (this.children[i].scope.raw[this.param.item] !== newList[i]) {\n                                this.children[i].scope.raw[this.param.item] = newList[i];\n                                (childrenChanges[i] = childrenChanges[i] || []).push({\n                                    type: DataChangeType.SET,\n                                    option: change.option,\n                                    expr: this.itemExpr,\n                                    value: newList[i]\n                                });\n                            }\n                        }\n                        else {\n                            this.children[i] = 0;\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    // 标记 length 是否发生变化\n    if (newLen !== oldChildrenLen && this.param.value.paths) {\n        var lengthChange = {\n            type: DataChangeType.SET,\n            option: {},\n            expr: createAccessor(\n                this.param.value.paths.concat({\n                    type: ExprType.STRING,\n                    value: 'length'\n                })\n            )\n        };\n\n        if (changesIsInDataRef([lengthChange], this.aNode.hotspot.data)) {\n            pushToChildrenChanges(lengthChange);\n        }\n    }\n\n    // 执行视图更新，先删再刷新\n    this._doCreateAndUpdate = doCreateAndUpdate;\n\n    var me = this;\n    if (disposeChildren.length === 0) {\n        doCreateAndUpdate();\n    }\n    else {\n        this._disposeChildren(disposeChildren, function () {\n            if (doCreateAndUpdate === me._doCreateAndUpdate) {\n                doCreateAndUpdate();\n            }\n        });\n    }\n\n    function doCreateAndUpdate() {\n        me._doCreateAndUpdate = null;\n\n        if (isOnlyDispose) {\n            return;\n        }\n\n        var beforeEl = me.el;\n        var parentEl = beforeEl.parentNode;\n\n        // 对相应的项进行更新\n        // 如果不attached则直接创建，如果存在则调用更新函数\n        var j = -1;\n        for (var i = 0; i < newLen; i++) {\n            var child = me.children[i];\n\n            if (child) {\n                if (childrenChanges[i] && (!childrenNeedUpdate || childrenNeedUpdate[i])) {\n                    child._update(childrenChanges[i]);\n                }\n            }\n            else {\n                if (j < i) {\n                    j = i + 1;\n                    beforeEl = null;\n                    while (j < newLen) {\n                        var nextChild = me.children[j];\n                        if (nextChild) {\n                            beforeEl = nextChild.sel || nextChild.el;\n                            break;\n                        }\n                        j++;\n                    }\n                }\n\n                me.children[i] = createNode(me.aNode.forRinsed, me, new ForItemData(me, newList[i], i), me.owner);\n                me.children[i].attach(parentEl, beforeEl || me.el);\n            }\n        }\n    }\n};\n\nexports = module.exports = ForNode;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file if 指令节点类\n */\n\nvar each = require('../util/each');\nvar guid = require('../util/guid');\nvar insertBefore = require('../browser/insert-before');\nvar evalExpr = require('../runtime/eval-expr');\nvar NodeType = require('./node-type');\nvar createNode = require('./create-node');\nvar createReverseNode = require('./create-reverse-node');\nvar nodeOwnCreateStump = require('./node-own-create-stump');\nvar nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n\n/**\n * if 指令节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction IfNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === NodeType.CMPT\n        ? parent\n        : parent.parentComponent;\n\n    this.id = guid++;\n    this.children = [];\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        if (evalExpr(this.aNode.directives['if'].value, this.scope, this.owner)) { // eslint-disable-line dot-notation\n            this.elseIndex = -1;\n            this.children[0] = createReverseNode(\n                this.aNode.ifRinsed,\n                this,\n                this.scope,\n                this.owner,\n                reverseWalker\n            );\n        }\n        else {\n            var me = this;\n            each(aNode.elses, function (elseANode, index) {\n                var elif = elseANode.directives.elif;\n\n                if (!elif || elif && evalExpr(elif.value, me.scope, me.owner)) {\n                    me.elseIndex = index;\n                    me.children[0] = createReverseNode(\n                        elseANode,\n                        me,\n                        me.scope,\n                        me.owner,\n                        reverseWalker\n                    );\n                    return false;\n                }\n            });\n        }\n\n        this._create();\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n    }\n    // #[end]\n}\n\nIfNode.prototype.nodeType = NodeType.IF;\n\nIfNode.prototype._create = nodeOwnCreateStump;\nIfNode.prototype.dispose = nodeOwnSimpleDispose;\n\n/**\n * attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nIfNode.prototype.attach = function (parentEl, beforeEl) {\n    var me = this;\n    var elseIndex;\n    var child;\n\n    if (evalExpr(this.aNode.directives['if'].value, this.scope, this.owner)) { // eslint-disable-line dot-notation\n        child = createNode(this.aNode.ifRinsed, this, this.scope, this.owner);\n        elseIndex = -1;\n    }\n    else {\n        each(this.aNode.elses, function (elseANode, index) {\n            var elif = elseANode.directives.elif;\n\n            if (!elif || elif && evalExpr(elif.value, me.scope, me.owner)) {\n                child = createNode(elseANode, me, me.scope, me.owner);\n                elseIndex = index;\n                return false;\n            }\n        });\n    }\n\n    if (child) {\n        this.children[0] = child;\n        child.attach(parentEl, beforeEl);\n        this.elseIndex = elseIndex;\n    }\n\n\n    this._create();\n    insertBefore(this.el, parentEl, beforeEl);\n};\n\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n */\nIfNode.prototype._update = function (changes) {\n    var me = this;\n    var childANode = this.aNode.ifRinsed;\n    var elseIndex;\n\n    if (evalExpr(this.aNode.directives['if'].value, this.scope, this.owner)) { // eslint-disable-line dot-notation\n        elseIndex = -1;\n    }\n    else {\n        each(this.aNode.elses, function (elseANode, index) {\n            var elif = elseANode.directives.elif;\n\n            if (elif && evalExpr(elif.value, me.scope, me.owner) || !elif) {\n                elseIndex = index;\n                childANode = elseANode;\n                return false;\n            }\n        });\n    }\n\n    var child = this.children[0];\n    if (elseIndex === this.elseIndex) {\n        child && child._update(changes);\n    }\n    else {\n        this.children = [];\n        if (child) {\n            child._ondisposed = newChild;\n            child.dispose();\n        }\n        else {\n            newChild();\n        }\n\n        this.elseIndex = elseIndex;\n    }\n\n    function newChild() {\n        if (typeof elseIndex !== 'undefined') {\n            (me.children[0] = createNode(childANode, me, me.scope, me.owner))\n                .attach(me.el.parentNode, me.el);\n        }\n    }\n};\n\nIfNode.prototype._getElAsRootNode = function () {\n    var child = this.children[0];\n    return child && child.el || this.el;\n};\n\nexports = module.exports = IfNode;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file is 指令节点类\n */\n\nvar guid = require('../util/guid');\nvar evalExpr = require('../runtime/eval-expr');\nvar NodeType = require('./node-type');\nvar createNode = require('./create-node');\nvar createReverseNode = require('./create-reverse-node');\nvar nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n\n/**\n * is 指令节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction IsNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === NodeType.CMPT\n        ? parent\n        : parent.parentComponent;\n\n    this.id = guid++;\n    this.children = [];\n    this.tagName = this.aNode.tagName;\n    // #[begin] reverse\n    if (reverseWalker) {\n        this.cmpt = evalExpr(this.aNode.directives.is.value, this.scope) || this.tagName;\n        this.children[0] = createReverseNode(\n            this.aNode.isRinsed,\n            this,\n            this.scope,\n            this.owner,\n            reverseWalker,\n            this.cmpt\n        );\n    }\n    // #[end]\n}\n\nIsNode.prototype.nodeType = NodeType.IS;\n\nIsNode.prototype.dispose = nodeOwnSimpleDispose;\n\n/**\n * attach到页面\n *\n * @param {HTMLElement} parentEl 要添加到的父元素\n * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n */\nIsNode.prototype.attach = function (parentEl, beforeEl) {\n    this.cmpt = evalExpr(this.aNode.directives.is.value, this.scope) || this.tagName;\n\n    var child = createNode(this.aNode.isRinsed, this, this.scope, this.owner, this.cmpt);\n    this.children[0] = child;\n    child.attach(parentEl, beforeEl);\n};\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n */\nIsNode.prototype._update = function (changes) {\n    var childANode = this.aNode.isRinsed;\n    var child = this.children[0];\n    var cmpt = evalExpr(this.aNode.directives.is.value, this.scope) || this.tagName;\n\n    if (cmpt === this.cmpt) {\n        child._update(changes);\n    }\n    else {\n        this.cmpt = cmpt;\n        var newChild = createNode(childANode, this, this.scope, this.owner, this.cmpt);\n        var el = child.el;\n        newChild.attach(el.parentNode, el);\n\n        child.dispose();\n        this.children[0] = newChild;\n    }\n};\n\nIsNode.prototype._getElAsRootNode = function () {\n    return this.children[0].el;\n};\n\nexports = module.exports = IsNode;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file template 节点类\n */\n\nvar guid = require('../util/guid');\nvar insertBefore = require('../browser/insert-before');\nvar removeEl = require('../browser/remove-el');\nvar NodeType = require('./node-type');\nvar LifeCycle = require('./life-cycle');\nvar createReverseNode = require('./create-reverse-node');\nvar elementDisposeChildren = require('./element-dispose-children');\nvar nodeOwnOnlyChildrenAttach = require('./node-own-only-children-attach');\n\n/**\n * template 节点类\n *\n * @class\n * @param {Object} aNode 抽象节点\n * @param {Node} parent 父亲节点\n * @param {Model} scope 所属数据环境\n * @param {Component} owner 所属组件环境\n * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n */\nfunction TemplateNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === NodeType.CMPT\n        ? parent\n        : parent.parentComponent;\n\n    this.id = guid++;\n    this.lifeCycle = LifeCycle.start;\n    this.children = [];\n\n    // #[begin] reverse\n    if (reverseWalker) {\n        var hasFlagComment;\n\n        // start flag\n        if (reverseWalker.current && reverseWalker.current.nodeType === 8) {\n            this.sel = reverseWalker.current;\n            hasFlagComment = 1;\n            reverseWalker.goNext();\n        }\n        else {\n            this.sel = document.createComment(this.id);\n            insertBefore(this.sel, reverseWalker.target, reverseWalker.current);\n        }\n\n        // content\n        var aNodeChildren = this.aNode.children;\n        for (var i = 0, l = aNodeChildren.length; i < l; i++) {\n            this.children.push(\n                createReverseNode(aNodeChildren[i], this, this.scope, this.owner, reverseWalker)\n            );\n        }\n\n        // end flag\n        if (hasFlagComment) {\n            this.el = reverseWalker.current;\n            reverseWalker.goNext();\n        }\n        else {\n            this.el = document.createComment(this.id);\n            insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n        }\n\n        this.lifeCycle = LifeCycle.attached;\n    }\n    // #[end]\n}\n\n\n\nTemplateNode.prototype.nodeType = NodeType.TPL;\n\nTemplateNode.prototype.attach = nodeOwnOnlyChildrenAttach;\n\n/**\n * 销毁释放\n *\n * @param {boolean=} noDetach 是否不要把节点从dom移除\n * @param {boolean=} noTransition 是否不显示过渡动画效果\n */\nTemplateNode.prototype.dispose = function (noDetach, noTransition) {\n    elementDisposeChildren(this.children, noDetach, noTransition);\n\n    if (!noDetach) {\n        removeEl(this.el);\n        removeEl(this.sel);\n    }\n\n    this.sel = null;\n    this.el = null;\n    this.owner = null;\n    this.scope = null;\n    this.children = null;\n\n    this.lifeCycle = LifeCycle.disposed;\n\n    if (this._ondisposed) {\n        this._ondisposed();\n    }\n};\n\n/**\n * 视图更新函数\n *\n * @param {Array} changes 数据变化信息\n */\nTemplateNode.prototype._update = function (changes) {\n    for (var i = 0; i < this.children.length; i++) {\n        this.children[i]._update(changes);\n    }\n};\n\nexports = module.exports = TemplateNode;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file ANode预热\n */\n\nvar ExprType = require('../parser/expr-type');\nvar each = require('../util/each');\nvar extend = require('../util/extend');\nvar kebab2camel = require('../util/kebab2camel');\nvar hotTags = require('../browser/hot-tags');\nvar createEl = require('../browser/create-el');\nvar getPropHandler = require('./get-prop-handler');\nvar getANodeProp = require('./get-a-node-prop');\nvar isBrowser = require('../browser/is-browser');\nvar TextNode = require('./text-node');\nvar SlotNode = require('./slot-node');\nvar ForNode = require('./for-node');\nvar IfNode = require('./if-node');\nvar IsNode = require('./is-node');\nvar TemplateNode = require('./template-node');\nvar Element = require('./element');\n\n/**\n * ANode预热，分析的数据引用等信息\n *\n * @param {Object} aNode 要预热的ANode\n */\nfunction preheatANode(aNode, componentInstance) {\n    var stack = [];\n\n    function recordHotspotData(expr, notContentData) {\n        var refs = analyseExprDataHotspot(expr);\n\n        if (refs.length) {\n            for (var i = 0, len = stack.length; i < len; i++) {\n                if (!notContentData || i !== len - 1) {\n                    var data = stack[i].hotspot.data;\n                    if (!data) {\n                        data = stack[i].hotspot.data = {};\n                    }\n\n                    each(refs, function (ref) {\n                        data[ref] = 1;\n                    });\n                }\n            }\n        }\n    }\n\n\n    function analyseANodeHotspot(aNode) {\n        if (!aNode.hotspot) {\n            stack.push(aNode);\n\n\n            if (aNode.textExpr) {\n                aNode.hotspot = {};\n                aNode.Clazz = TextNode;\n                recordHotspotData(aNode.textExpr);\n            }\n            else {\n                var sourceNode;\n                if (isBrowser && aNode.tagName\n                    && aNode.tagName.indexOf('-') < 0\n                    && !/^(template|slot|select|input|option|button|video|audio|canvas|img|embed|object|iframe)$/i.test(aNode.tagName)\n                ) {\n                    sourceNode = createEl(aNode.tagName);\n                }\n\n                aNode.hotspot = {\n                    dynamicProps: [],\n                    xProps: [],\n                    props: {},\n                    binds: [],\n                    sourceNode: sourceNode\n                };\n\n\n                // === analyse hotspot data: start\n                each(aNode.vars, function (varItem) {\n                    recordHotspotData(varItem.expr);\n                });\n\n                each(aNode.props, function (prop) {\n                    aNode.hotspot.binds.push({\n                        name: kebab2camel(prop.name),\n                        expr: prop.noValue != null\n                            ? {type: ExprType.BOOL, value: true}\n                            : prop.expr,\n                        x: prop.x,\n                        noValue: prop.noValue\n                    });\n                    recordHotspotData(prop.expr);\n                });\n\n                for (var key in aNode.directives) {\n                    /* istanbul ignore else  */\n                    if (aNode.directives.hasOwnProperty(key)) {\n                        var directive = aNode.directives[key];\n                        recordHotspotData(\n                            directive.value,\n                            !/^(html|bind)$/.test(key)\n                        );\n\n                        // init trackBy getKey function\n                        if (key === 'for') {\n                            var trackBy = directive.trackBy;\n                            if (trackBy\n                                && trackBy.type === ExprType.ACCESSOR\n                                && trackBy.paths[0].value === directive.item\n                            ) {\n                                aNode.hotspot.getForKey = new Function(\n                                    directive.item,\n                                    'return ' + directive.trackByRaw\n                                );\n                            }\n                        }\n                    }\n                }\n\n                each(aNode.elses, function (child) {\n                    analyseANodeHotspot(child);\n                });\n\n                each(aNode.children, function (child) {\n                    analyseANodeHotspot(child);\n                });\n                // === analyse hotspot data: end\n\n\n                // === analyse hotspot props: start\n                each(aNode.props, function (prop, index) {\n                    aNode.hotspot.props[prop.name] = index;\n                    prop.handler = getPropHandler(aNode.tagName, prop.name);\n\n                    if (prop.expr.value != null) {\n                        if (sourceNode) {\n                            prop.handler(sourceNode, prop.expr.value, prop.name, aNode);\n                        }\n                    }\n                    else {\n                        if (prop.x) {\n                            aNode.hotspot.xProps.push(prop);\n                        }\n                        aNode.hotspot.dynamicProps.push(prop);\n                    }\n                });\n\n                // ie 下，如果 option 没有 value 属性，select.value = xx 操作不会选中 option\n                // 所以没有设置 value 时，默认把 option 的内容作为 value\n                if (aNode.tagName === 'option'\n                    && !getANodeProp(aNode, 'value')\n                    && aNode.children[0]\n                ) {\n                    var valueProp = {\n                        name: 'value',\n                        expr: aNode.children[0].textExpr,\n                        handler: getPropHandler(aNode.tagName, 'value')\n                    };\n                    aNode.props.push(valueProp);\n                    aNode.hotspot.dynamicProps.push(valueProp);\n                    aNode.hotspot.props.value = aNode.props.length - 1;\n                }\n\n                if (aNode.directives['if']) { // eslint-disable-line dot-notation\n                    aNode.ifRinsed = {\n                        children: aNode.children,\n                        props: aNode.props,\n                        events: aNode.events,\n                        tagName: aNode.tagName,\n                        vars: aNode.vars,\n                        hotspot: aNode.hotspot,\n                        directives: aNode.directives\n                    };\n                    aNode.hotspot.hasRootNode = true;\n                    aNode.Clazz = IfNode;\n                    aNode = aNode.ifRinsed;\n                }\n\n                if (aNode.directives['for']) { // eslint-disable-line dot-notation\n                    aNode.forRinsed = {\n                        children: aNode.children,\n                        props: aNode.props,\n                        events: aNode.events,\n                        tagName: aNode.tagName,\n                        vars: aNode.vars,\n                        hotspot: aNode.hotspot,\n                        directives: aNode.directives\n                    };\n                    aNode.hotspot.hasRootNode = true;\n                    aNode.Clazz = ForNode;\n                    aNode = aNode.forRinsed;\n                }\n\n                if (aNode.directives.is) {\n                    aNode.isRinsed = {\n                        children: aNode.children,\n                        props: aNode.props,\n                        events: aNode.events,\n                        tagName: aNode.tagName,\n                        vars: aNode.vars,\n                        hotspot: aNode.hotspot,\n                        directives: aNode.directives\n                    };\n                    aNode.hotspot.hasRootNode = true;\n                    aNode.Clazz = IsNode;\n                    aNode = aNode.isRinsed;\n                }\n\n                switch (aNode.tagName) {\n                    case 'slot':\n                        aNode.Clazz = SlotNode;\n                        break;\n\n                    case 'template':\n                    case 'fragment':\n                        aNode.hotspot.hasRootNode = true;\n                        aNode.Clazz = TemplateNode;\n                        break;\n\n                    default:\n                        if (hotTags[aNode.tagName]) {\n                            if (!aNode.directives.is\n                                && (!componentInstance || !componentInstance.components[aNode.tagName])\n                            ) {\n                                aNode.Clazz = Element;\n                            }\n\n                            // #[begin] error\n                            if (componentInstance && componentInstance.components[aNode.tagName]) {\n                                warn('\\`' + aNode.tagName + '\\` as sub-component tag is a bad practice.');\n                            }\n                            // #[end]\n                        }\n                }\n                // === analyse hotspot props: end\n            }\n\n            stack.pop();\n        }\n    }\n\n    if (aNode) {\n        analyseANodeHotspot(aNode);\n    }\n}\n\n/**\n * 分析表达式的数据引用\n *\n * @param {Object} expr 要分析的表达式\n * @return {Array}\n */\nfunction analyseExprDataHotspot(expr, accessorMeanDynamic) {\n    var refs = [];\n    var isDynamic;\n\n    function analyseExprs(exprs, accessorMeanDynamic) {\n        for (var i = 0, l = exprs.length; i < l; i++) {\n            refs = refs.concat(analyseExprDataHotspot(exprs[i], accessorMeanDynamic));\n            isDynamic = isDynamic || exprs[i].dynamic;\n        }\n    }\n\n    switch (expr.type) {\n        case ExprType.ACCESSOR:\n            isDynamic = accessorMeanDynamic;\n\n            var paths = expr.paths;\n            refs.push(paths[0].value);\n\n            if (paths.length > 1) {\n                refs.push(paths[0].value + '.' + (paths[1].value || '*'));\n            }\n\n            analyseExprs(paths.slice(1), 1);\n            break;\n\n        case ExprType.UNARY:\n            refs = analyseExprDataHotspot(expr.expr, accessorMeanDynamic);\n            isDynamic = expr.expr.dynamic;\n            break;\n\n        case ExprType.TEXT:\n        case ExprType.BINARY:\n        case ExprType.TERTIARY:\n            analyseExprs(expr.segs, accessorMeanDynamic);\n            break;\n\n        case ExprType.INTERP:\n            refs = analyseExprDataHotspot(expr.expr);\n            isDynamic = expr.expr.dynamic;\n\n            each(expr.filters, function (filter) {\n                analyseExprs(filter.name.paths);\n                analyseExprs(filter.args);\n            });\n\n            break;\n\n        case ExprType.CALL:\n            analyseExprs(expr.name.paths);\n            analyseExprs(expr.args);\n            break;\n\n        case ExprType.ARRAY:\n        case ExprType.OBJECT:\n            for (var i = 0; i < expr.items.length; i++) {\n                refs = refs.concat(analyseExprDataHotspot(expr.items[i].expr));\n                isDynamic = isDynamic || expr.items[i].expr.dynamic;\n            }\n            break;\n    }\n\n    isDynamic && (expr.dynamic = true);\n    return refs;\n}\n\nexports = module.exports = preheatANode;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 表达式类型\n */\n\n/**\n * 表达式类型\n *\n * @const\n * @type {Object}\n */\nvar ExprType = {\n    STRING: 1,\n    NUMBER: 2,\n    BOOL: 3,\n    ACCESSOR: 4,\n    INTERP: 5,\n    CALL: 6,\n    TEXT: 7,\n    BINARY: 8,\n    UNARY: 9,\n    TERTIARY: 10,\n    OBJECT: 11,\n    ARRAY: 12,\n    NULL: 13\n};\n\nexports = module.exports = ExprType;\n","/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file 节点类型\n */\n\n/**\n * 节点类型\n *\n * @const\n * @type {Object}\n */\nvar NodeType = {\n    TEXT: 1,\n    IF: 2,\n    FOR: 3,\n    ELEM: 4,\n    CMPT: 5,\n    SLOT: 6,\n    TPL: 7,\n    LOADER: 8,\n    IS: 9\n};\n\nexports = module.exports = NodeType;\n","/**\n * @file entry\n * @author Dafrok\n */\n\nimport './index.styl';\nimport san from 'san';\n\nconst App = san.defineComponent({\n    initData() {\n        return {\n            fontSize: 24,\n            text: 'THE SHIEKAH LANGUAGE',\n            translate: true\n        };\n    },\n    computed: {\n        textGroup() {\n            return this.data.get('text').split(' ');\n        }\n    },\n    onTextCompositionstart(e) {\n        this.flag = true;\n    },\n    onTextCompositionend(e) {\n        const text = e.target.value.replace(/(?![a-zA-Z0-9\\.\\-\\s\\?\\!]).{1}/g, '');\n        this.data.set('text', text);\n        this.flag = false;\n    },\n    onTextInput(e) {\n        if (this.flag) {\n            return;\n        }\n        const text = e.target.value.replace(/(?![a-zA-Z0-9\\.\\-\\s\\?\\!]).{1}/g, '');\n        this.data.set('text', text);\n    },\n    onTextKeydown(e) {\n        if (/(?![a-zA-Z0-9\\.\\-\\s\\?\\!]).{1}/.test(e.key)) {\n            e.preventDefault();\n        }\n    },\n    template: `\n<main>\n<section class=\"textbox {{translate ? 'translate' : ''}}\" style=\"font-size: {{fontSize}}px\">\n    <ruby s-for=\"word in textGroup\"><span>{{word}}</span><rt>{{word}}</rt>&nbsp;</ruby>\n</section>\n<section class=\"input-panel\">\n    <div class=\"text-container\">\n        <textarea\n            on-compositionstart=\"onTextCompositionstart\"\n            on-compositionend=\"onTextCompositionend\"\n            on-keydown=\"onTextKeydown\"\n            on-input=\"onTextInput\"\n            value=\"{= text =}\"\n        ></textarea>\n    </div>\n    <div class=\"settings\">\n        <label>\n            <ruby>TRANSLATE<rt>TRANSLATE</rt></ruby>\n            <input type=\"checkbox\" checked=\"{= translate =}\" >\n        </label>\n        <label>\n            <ruby>FONT-SIZE {{fontSize}}PX<rt>FONT-SIZE {{fontSize}}PX</rt></ruby>\n            <br>\n            <input type=\"range\" min=\"10\" max=\"96\" value=\"{= fontSize =}\">\n        </label>\n    </div>\n</section>  \n</main>  \n`\n});\n\nconst app = new App();\napp.attach(document.body);\n"]}